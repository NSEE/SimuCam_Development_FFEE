// MebX_Qsys_Project_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module MebX_Qsys_Project_mm_interconnect_0 (
		input  wire         clk_100_clk_clk,                                                       //                                               clk_100_clk.clk
		input  wire         m2_ddr2_memory_afi_clk_clk,                                            //                                    m2_ddr2_memory_afi_clk.clk
		input  wire         m2_ddr2_memory_afi_half_clk_clk,                                       //                               m2_ddr2_memory_afi_half_clk.clk
		input  wire         FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset,           //     FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset.reset
		input  wire         m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset,             //       m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset.reset
		input  wire         m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset,       // m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         m2_ddr2_memory_soft_reset_reset_bridge_in_reset_reset,                 //           m2_ddr2_memory_soft_reset_reset_bridge_in_reset.reset
		input  wire [63:0]  Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_address,      //  Communication_Module_v2_Ch1_avalon_mm_left_buffer_master.address
		output wire         Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_waitrequest,  //                                                          .waitrequest
		input  wire         Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_read,         //                                                          .read
		output wire [255:0] Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_readdata,     //                                                          .readdata
		input  wire [63:0]  Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_address,     // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master.address
		output wire         Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_waitrequest, //                                                          .waitrequest
		input  wire         Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_read,        //                                                          .read
		output wire [255:0] Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_readdata,    //                                                          .readdata
		input  wire [63:0]  Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_address,      //  Communication_Module_v2_Ch2_avalon_mm_left_buffer_master.address
		output wire         Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_waitrequest,  //                                                          .waitrequest
		input  wire         Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_read,         //                                                          .read
		output wire [255:0] Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_readdata,     //                                                          .readdata
		input  wire [63:0]  Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_address,     // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master.address
		output wire         Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_waitrequest, //                                                          .waitrequest
		input  wire         Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_read,        //                                                          .read
		output wire [255:0] Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_readdata,    //                                                          .readdata
		input  wire [63:0]  Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_address,      //  Communication_Module_v2_Ch3_avalon_mm_left_buffer_master.address
		output wire         Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_waitrequest,  //                                                          .waitrequest
		input  wire         Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_read,         //                                                          .read
		output wire [255:0] Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_readdata,     //                                                          .readdata
		input  wire [63:0]  Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_address,     // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master.address
		output wire         Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_waitrequest, //                                                          .waitrequest
		input  wire         Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_read,        //                                                          .read
		output wire [255:0] Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_readdata,    //                                                          .readdata
		input  wire [63:0]  Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_address,      //  Communication_Module_v2_Ch4_avalon_mm_left_buffer_master.address
		output wire         Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_waitrequest,  //                                                          .waitrequest
		input  wire         Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_read,         //                                                          .read
		output wire [255:0] Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_readdata,     //                                                          .readdata
		input  wire [63:0]  Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_address,     // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master.address
		output wire         Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_waitrequest, //                                                          .waitrequest
		input  wire         Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_read,        //                                                          .read
		output wire [255:0] Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_readdata,    //                                                          .readdata
		input  wire [31:0]  ddr2_address_span_extender_expanded_master_address,                    //                ddr2_address_span_extender_expanded_master.address
		output wire         ddr2_address_span_extender_expanded_master_waitrequest,                //                                                          .waitrequest
		input  wire [7:0]   ddr2_address_span_extender_expanded_master_burstcount,                 //                                                          .burstcount
		input  wire [3:0]   ddr2_address_span_extender_expanded_master_byteenable,                 //                                                          .byteenable
		input  wire         ddr2_address_span_extender_expanded_master_read,                       //                                                          .read
		output wire [31:0]  ddr2_address_span_extender_expanded_master_readdata,                   //                                                          .readdata
		output wire         ddr2_address_span_extender_expanded_master_readdatavalid,              //                                                          .readdatavalid
		input  wire         ddr2_address_span_extender_expanded_master_write,                      //                                                          .write
		input  wire [31:0]  ddr2_address_span_extender_expanded_master_writedata,                  //                                                          .writedata
		input  wire [63:0]  FTDI_UMFT601A_Module_avalon_imgt_master_data_address,                  //              FTDI_UMFT601A_Module_avalon_imgt_master_data.address
		output wire         FTDI_UMFT601A_Module_avalon_imgt_master_data_waitrequest,              //                                                          .waitrequest
		input  wire         FTDI_UMFT601A_Module_avalon_imgt_master_data_write,                    //                                                          .write
		input  wire [15:0]  FTDI_UMFT601A_Module_avalon_imgt_master_data_writedata,                //                                                          .writedata
		input  wire [63:0]  FTDI_UMFT601A_Module_avalon_master_data_address,                       //                   FTDI_UMFT601A_Module_avalon_master_data.address
		output wire         FTDI_UMFT601A_Module_avalon_master_data_waitrequest,                   //                                                          .waitrequest
		input  wire         FTDI_UMFT601A_Module_avalon_master_data_read,                          //                                                          .read
		output wire [255:0] FTDI_UMFT601A_Module_avalon_master_data_readdata,                      //                                                          .readdata
		input  wire         FTDI_UMFT601A_Module_avalon_master_data_write,                         //                                                          .write
		input  wire [255:0] FTDI_UMFT601A_Module_avalon_master_data_writedata,                     //                                                          .writedata
		input  wire [63:0]  Memory_Filler_avalon_master_data_address,                              //                          Memory_Filler_avalon_master_data.address
		output wire         Memory_Filler_avalon_master_data_waitrequest,                          //                                                          .waitrequest
		input  wire         Memory_Filler_avalon_master_data_write,                                //                                                          .write
		input  wire [255:0] Memory_Filler_avalon_master_data_writedata,                            //                                                          .writedata
		input  wire [63:0]  rmap_mem_ffee_deb_area_avalon_mm_rmap_master_address,                  //              rmap_mem_ffee_deb_area_avalon_mm_rmap_master.address
		output wire         rmap_mem_ffee_deb_area_avalon_mm_rmap_master_waitrequest,              //                                                          .waitrequest
		input  wire         rmap_mem_ffee_deb_area_avalon_mm_rmap_master_read,                     //                                                          .read
		output wire [7:0]   rmap_mem_ffee_deb_area_avalon_mm_rmap_master_readdata,                 //                                                          .readdata
		input  wire         rmap_mem_ffee_deb_area_avalon_mm_rmap_master_write,                    //                                                          .write
		input  wire [7:0]   rmap_mem_ffee_deb_area_avalon_mm_rmap_master_writedata,                //                                                          .writedata
		output wire [30:0]  m1_clock_bridge_comm_1_left_s0_address,                                //                            m1_clock_bridge_comm_1_left_s0.address
		output wire         m1_clock_bridge_comm_1_left_s0_write,                                  //                                                          .write
		output wire         m1_clock_bridge_comm_1_left_s0_read,                                   //                                                          .read
		input  wire [255:0] m1_clock_bridge_comm_1_left_s0_readdata,                               //                                                          .readdata
		output wire [255:0] m1_clock_bridge_comm_1_left_s0_writedata,                              //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_comm_1_left_s0_burstcount,                             //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_comm_1_left_s0_byteenable,                             //                                                          .byteenable
		input  wire         m1_clock_bridge_comm_1_left_s0_readdatavalid,                          //                                                          .readdatavalid
		input  wire         m1_clock_bridge_comm_1_left_s0_waitrequest,                            //                                                          .waitrequest
		output wire         m1_clock_bridge_comm_1_left_s0_debugaccess,                            //                                                          .debugaccess
		output wire [30:0]  m1_clock_bridge_comm_1_right_s0_address,                               //                           m1_clock_bridge_comm_1_right_s0.address
		output wire         m1_clock_bridge_comm_1_right_s0_write,                                 //                                                          .write
		output wire         m1_clock_bridge_comm_1_right_s0_read,                                  //                                                          .read
		input  wire [255:0] m1_clock_bridge_comm_1_right_s0_readdata,                              //                                                          .readdata
		output wire [255:0] m1_clock_bridge_comm_1_right_s0_writedata,                             //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_comm_1_right_s0_burstcount,                            //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_comm_1_right_s0_byteenable,                            //                                                          .byteenable
		input  wire         m1_clock_bridge_comm_1_right_s0_readdatavalid,                         //                                                          .readdatavalid
		input  wire         m1_clock_bridge_comm_1_right_s0_waitrequest,                           //                                                          .waitrequest
		output wire         m1_clock_bridge_comm_1_right_s0_debugaccess,                           //                                                          .debugaccess
		output wire [30:0]  m1_clock_bridge_comm_2_left_s0_address,                                //                            m1_clock_bridge_comm_2_left_s0.address
		output wire         m1_clock_bridge_comm_2_left_s0_write,                                  //                                                          .write
		output wire         m1_clock_bridge_comm_2_left_s0_read,                                   //                                                          .read
		input  wire [255:0] m1_clock_bridge_comm_2_left_s0_readdata,                               //                                                          .readdata
		output wire [255:0] m1_clock_bridge_comm_2_left_s0_writedata,                              //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_comm_2_left_s0_burstcount,                             //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_comm_2_left_s0_byteenable,                             //                                                          .byteenable
		input  wire         m1_clock_bridge_comm_2_left_s0_readdatavalid,                          //                                                          .readdatavalid
		input  wire         m1_clock_bridge_comm_2_left_s0_waitrequest,                            //                                                          .waitrequest
		output wire         m1_clock_bridge_comm_2_left_s0_debugaccess,                            //                                                          .debugaccess
		output wire [30:0]  m1_clock_bridge_comm_2_right_s0_address,                               //                           m1_clock_bridge_comm_2_right_s0.address
		output wire         m1_clock_bridge_comm_2_right_s0_write,                                 //                                                          .write
		output wire         m1_clock_bridge_comm_2_right_s0_read,                                  //                                                          .read
		input  wire [255:0] m1_clock_bridge_comm_2_right_s0_readdata,                              //                                                          .readdata
		output wire [255:0] m1_clock_bridge_comm_2_right_s0_writedata,                             //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_comm_2_right_s0_burstcount,                            //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_comm_2_right_s0_byteenable,                            //                                                          .byteenable
		input  wire         m1_clock_bridge_comm_2_right_s0_readdatavalid,                         //                                                          .readdatavalid
		input  wire         m1_clock_bridge_comm_2_right_s0_waitrequest,                           //                                                          .waitrequest
		output wire         m1_clock_bridge_comm_2_right_s0_debugaccess,                           //                                                          .debugaccess
		output wire [30:0]  m1_clock_bridge_comm_3_left_s0_address,                                //                            m1_clock_bridge_comm_3_left_s0.address
		output wire         m1_clock_bridge_comm_3_left_s0_write,                                  //                                                          .write
		output wire         m1_clock_bridge_comm_3_left_s0_read,                                   //                                                          .read
		input  wire [255:0] m1_clock_bridge_comm_3_left_s0_readdata,                               //                                                          .readdata
		output wire [255:0] m1_clock_bridge_comm_3_left_s0_writedata,                              //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_comm_3_left_s0_burstcount,                             //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_comm_3_left_s0_byteenable,                             //                                                          .byteenable
		input  wire         m1_clock_bridge_comm_3_left_s0_readdatavalid,                          //                                                          .readdatavalid
		input  wire         m1_clock_bridge_comm_3_left_s0_waitrequest,                            //                                                          .waitrequest
		output wire         m1_clock_bridge_comm_3_left_s0_debugaccess,                            //                                                          .debugaccess
		output wire [30:0]  m1_clock_bridge_comm_3_right_s0_address,                               //                           m1_clock_bridge_comm_3_right_s0.address
		output wire         m1_clock_bridge_comm_3_right_s0_write,                                 //                                                          .write
		output wire         m1_clock_bridge_comm_3_right_s0_read,                                  //                                                          .read
		input  wire [255:0] m1_clock_bridge_comm_3_right_s0_readdata,                              //                                                          .readdata
		output wire [255:0] m1_clock_bridge_comm_3_right_s0_writedata,                             //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_comm_3_right_s0_burstcount,                            //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_comm_3_right_s0_byteenable,                            //                                                          .byteenable
		input  wire         m1_clock_bridge_comm_3_right_s0_readdatavalid,                         //                                                          .readdatavalid
		input  wire         m1_clock_bridge_comm_3_right_s0_waitrequest,                           //                                                          .waitrequest
		output wire         m1_clock_bridge_comm_3_right_s0_debugaccess,                           //                                                          .debugaccess
		output wire [30:0]  m1_clock_bridge_comm_4_left_s0_address,                                //                            m1_clock_bridge_comm_4_left_s0.address
		output wire         m1_clock_bridge_comm_4_left_s0_write,                                  //                                                          .write
		output wire         m1_clock_bridge_comm_4_left_s0_read,                                   //                                                          .read
		input  wire [255:0] m1_clock_bridge_comm_4_left_s0_readdata,                               //                                                          .readdata
		output wire [255:0] m1_clock_bridge_comm_4_left_s0_writedata,                              //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_comm_4_left_s0_burstcount,                             //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_comm_4_left_s0_byteenable,                             //                                                          .byteenable
		input  wire         m1_clock_bridge_comm_4_left_s0_readdatavalid,                          //                                                          .readdatavalid
		input  wire         m1_clock_bridge_comm_4_left_s0_waitrequest,                            //                                                          .waitrequest
		output wire         m1_clock_bridge_comm_4_left_s0_debugaccess,                            //                                                          .debugaccess
		output wire [30:0]  m1_clock_bridge_comm_4_right_s0_address,                               //                           m1_clock_bridge_comm_4_right_s0.address
		output wire         m1_clock_bridge_comm_4_right_s0_write,                                 //                                                          .write
		output wire         m1_clock_bridge_comm_4_right_s0_read,                                  //                                                          .read
		input  wire [255:0] m1_clock_bridge_comm_4_right_s0_readdata,                              //                                                          .readdata
		output wire [255:0] m1_clock_bridge_comm_4_right_s0_writedata,                             //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_comm_4_right_s0_burstcount,                            //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_comm_4_right_s0_byteenable,                            //                                                          .byteenable
		input  wire         m1_clock_bridge_comm_4_right_s0_readdatavalid,                         //                                                          .readdatavalid
		input  wire         m1_clock_bridge_comm_4_right_s0_waitrequest,                           //                                                          .waitrequest
		output wire         m1_clock_bridge_comm_4_right_s0_debugaccess,                           //                                                          .debugaccess
		output wire [30:0]  m1_clock_bridge_ftdi_s0_address,                                       //                                   m1_clock_bridge_ftdi_s0.address
		output wire         m1_clock_bridge_ftdi_s0_write,                                         //                                                          .write
		output wire         m1_clock_bridge_ftdi_s0_read,                                          //                                                          .read
		input  wire [255:0] m1_clock_bridge_ftdi_s0_readdata,                                      //                                                          .readdata
		output wire [255:0] m1_clock_bridge_ftdi_s0_writedata,                                     //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_ftdi_s0_burstcount,                                    //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_ftdi_s0_byteenable,                                    //                                                          .byteenable
		input  wire         m1_clock_bridge_ftdi_s0_readdatavalid,                                 //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ftdi_s0_waitrequest,                                   //                                                          .waitrequest
		output wire         m1_clock_bridge_ftdi_s0_debugaccess,                                   //                                                          .debugaccess
		output wire [30:0]  m1_clock_bridge_general_s0_address,                                    //                                m1_clock_bridge_general_s0.address
		output wire         m1_clock_bridge_general_s0_write,                                      //                                                          .write
		output wire         m1_clock_bridge_general_s0_read,                                       //                                                          .read
		input  wire [255:0] m1_clock_bridge_general_s0_readdata,                                   //                                                          .readdata
		output wire [255:0] m1_clock_bridge_general_s0_writedata,                                  //                                                          .writedata
		output wire [0:0]   m1_clock_bridge_general_s0_burstcount,                                 //                                                          .burstcount
		output wire [31:0]  m1_clock_bridge_general_s0_byteenable,                                 //                                                          .byteenable
		input  wire         m1_clock_bridge_general_s0_readdatavalid,                              //                                                          .readdatavalid
		input  wire         m1_clock_bridge_general_s0_waitrequest,                                //                                                          .waitrequest
		output wire         m1_clock_bridge_general_s0_debugaccess,                                //                                                          .debugaccess
		output wire [25:0]  m2_ddr2_memory_avl_address,                                            //                                        m2_ddr2_memory_avl.address
		output wire         m2_ddr2_memory_avl_write,                                              //                                                          .write
		output wire         m2_ddr2_memory_avl_read,                                               //                                                          .read
		input  wire [255:0] m2_ddr2_memory_avl_readdata,                                           //                                                          .readdata
		output wire [255:0] m2_ddr2_memory_avl_writedata,                                          //                                                          .writedata
		output wire         m2_ddr2_memory_avl_beginbursttransfer,                                 //                                                          .beginbursttransfer
		output wire [7:0]   m2_ddr2_memory_avl_burstcount,                                         //                                                          .burstcount
		output wire [31:0]  m2_ddr2_memory_avl_byteenable,                                         //                                                          .byteenable
		input  wire         m2_ddr2_memory_avl_readdatavalid,                                      //                                                          .readdatavalid
		input  wire         m2_ddr2_memory_avl_waitrequest                                         //                                                          .waitrequest
	);

	wire          ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_waitrequest;                // FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_waitrequest -> FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_waitrequest
	wire   [15:0] ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_readdata;                   // FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_readdata -> FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_readdata
	wire          ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_debugaccess;                // FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_debugaccess -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_debugaccess
	wire   [63:0] ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_address;                    // FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_address -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_address
	wire          ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_read;                       // FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_read -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_read
	wire    [1:0] ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_byteenable;                 // FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_byteenable -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_byteenable
	wire          ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_readdatavalid;              // FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_readdatavalid -> FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_readdatavalid
	wire          ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_lock;                       // FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_lock -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_lock
	wire          ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_write;                      // FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_write -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_write
	wire   [15:0] ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_writedata;                  // FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_writedata -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_writedata
	wire    [1:0] ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_burstcount;                 // FTDI_UMFT601A_Module_avalon_imgt_master_data_translator:uav_burstcount -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:av_burstcount
	wire          ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_waitrequest;                     // FTDI_UMFT601A_Module_avalon_master_data_agent:av_waitrequest -> FTDI_UMFT601A_Module_avalon_master_data_translator:uav_waitrequest
	wire  [255:0] ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_readdata;                        // FTDI_UMFT601A_Module_avalon_master_data_agent:av_readdata -> FTDI_UMFT601A_Module_avalon_master_data_translator:uav_readdata
	wire          ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_debugaccess;                     // FTDI_UMFT601A_Module_avalon_master_data_translator:uav_debugaccess -> FTDI_UMFT601A_Module_avalon_master_data_agent:av_debugaccess
	wire   [63:0] ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_address;                         // FTDI_UMFT601A_Module_avalon_master_data_translator:uav_address -> FTDI_UMFT601A_Module_avalon_master_data_agent:av_address
	wire          ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_read;                            // FTDI_UMFT601A_Module_avalon_master_data_translator:uav_read -> FTDI_UMFT601A_Module_avalon_master_data_agent:av_read
	wire   [31:0] ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_byteenable;                      // FTDI_UMFT601A_Module_avalon_master_data_translator:uav_byteenable -> FTDI_UMFT601A_Module_avalon_master_data_agent:av_byteenable
	wire          ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_readdatavalid;                   // FTDI_UMFT601A_Module_avalon_master_data_agent:av_readdatavalid -> FTDI_UMFT601A_Module_avalon_master_data_translator:uav_readdatavalid
	wire          ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_lock;                            // FTDI_UMFT601A_Module_avalon_master_data_translator:uav_lock -> FTDI_UMFT601A_Module_avalon_master_data_agent:av_lock
	wire          ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_write;                           // FTDI_UMFT601A_Module_avalon_master_data_translator:uav_write -> FTDI_UMFT601A_Module_avalon_master_data_agent:av_write
	wire  [255:0] ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_writedata;                       // FTDI_UMFT601A_Module_avalon_master_data_translator:uav_writedata -> FTDI_UMFT601A_Module_avalon_master_data_agent:av_writedata
	wire    [5:0] ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_burstcount;                      // FTDI_UMFT601A_Module_avalon_master_data_translator:uav_burstcount -> FTDI_UMFT601A_Module_avalon_master_data_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                                        // rsp_mux_001:src_valid -> FTDI_UMFT601A_Module_avalon_master_data_agent:rp_valid
	wire  [401:0] rsp_mux_001_src_data;                                                                                         // rsp_mux_001:src_data -> FTDI_UMFT601A_Module_avalon_master_data_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                                        // FTDI_UMFT601A_Module_avalon_master_data_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [12:0] rsp_mux_001_src_channel;                                                                                      // rsp_mux_001:src_channel -> FTDI_UMFT601A_Module_avalon_master_data_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                                                // rsp_mux_001:src_startofpacket -> FTDI_UMFT601A_Module_avalon_master_data_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                                  // rsp_mux_001:src_endofpacket -> FTDI_UMFT601A_Module_avalon_master_data_agent:rp_endofpacket
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_waitrequest;                            // Memory_Filler_avalon_master_data_agent:av_waitrequest -> Memory_Filler_avalon_master_data_translator:uav_waitrequest
	wire  [255:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdata;                               // Memory_Filler_avalon_master_data_agent:av_readdata -> Memory_Filler_avalon_master_data_translator:uav_readdata
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_debugaccess;                            // Memory_Filler_avalon_master_data_translator:uav_debugaccess -> Memory_Filler_avalon_master_data_agent:av_debugaccess
	wire   [63:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_address;                                // Memory_Filler_avalon_master_data_translator:uav_address -> Memory_Filler_avalon_master_data_agent:av_address
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_read;                                   // Memory_Filler_avalon_master_data_translator:uav_read -> Memory_Filler_avalon_master_data_agent:av_read
	wire   [31:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_byteenable;                             // Memory_Filler_avalon_master_data_translator:uav_byteenable -> Memory_Filler_avalon_master_data_agent:av_byteenable
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdatavalid;                          // Memory_Filler_avalon_master_data_agent:av_readdatavalid -> Memory_Filler_avalon_master_data_translator:uav_readdatavalid
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_lock;                                   // Memory_Filler_avalon_master_data_translator:uav_lock -> Memory_Filler_avalon_master_data_agent:av_lock
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_write;                                  // Memory_Filler_avalon_master_data_translator:uav_write -> Memory_Filler_avalon_master_data_agent:av_write
	wire  [255:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_writedata;                              // Memory_Filler_avalon_master_data_translator:uav_writedata -> Memory_Filler_avalon_master_data_agent:av_writedata
	wire    [5:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_burstcount;                             // Memory_Filler_avalon_master_data_translator:uav_burstcount -> Memory_Filler_avalon_master_data_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                                        // rsp_mux_002:src_valid -> Memory_Filler_avalon_master_data_agent:rp_valid
	wire  [401:0] rsp_mux_002_src_data;                                                                                         // rsp_mux_002:src_data -> Memory_Filler_avalon_master_data_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                                        // Memory_Filler_avalon_master_data_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [12:0] rsp_mux_002_src_channel;                                                                                      // rsp_mux_002:src_channel -> Memory_Filler_avalon_master_data_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                                                // rsp_mux_002:src_startofpacket -> Memory_Filler_avalon_master_data_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                                  // rsp_mux_002:src_endofpacket -> Memory_Filler_avalon_master_data_agent:rp_endofpacket
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest;    // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_waitrequest -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_waitrequest
	wire  [255:0] communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata;       // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_readdata -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_readdata
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess;    // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_debugaccess -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_debugaccess
	wire   [63:0] communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address;        // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_address -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_address
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read;           // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_read -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_read
	wire   [31:0] communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable;     // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_byteenable -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_byteenable
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid;  // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_readdatavalid -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_readdatavalid
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock;           // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_lock -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_lock
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write;          // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_write -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_write
	wire  [255:0] communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata;      // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_writedata -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_writedata
	wire    [5:0] communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount;     // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_translator:uav_burstcount -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                                        // rsp_mux_003:src_valid -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:rp_valid
	wire  [401:0] rsp_mux_003_src_data;                                                                                         // rsp_mux_003:src_data -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                                        // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [12:0] rsp_mux_003_src_channel;                                                                                      // rsp_mux_003:src_channel -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                                                // rsp_mux_003:src_startofpacket -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                                  // rsp_mux_003:src_endofpacket -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:rp_endofpacket
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest;    // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_waitrequest -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_waitrequest
	wire  [255:0] communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata;       // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_readdata -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_readdata
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess;    // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_debugaccess -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_debugaccess
	wire   [63:0] communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address;        // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_address -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_address
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read;           // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_read -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_read
	wire   [31:0] communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable;     // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_byteenable -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_byteenable
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid;  // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_readdatavalid -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_readdatavalid
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock;           // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_lock -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_lock
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write;          // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_write -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_write
	wire  [255:0] communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata;      // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_writedata -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_writedata
	wire    [5:0] communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount;     // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_translator:uav_burstcount -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                                        // rsp_mux_004:src_valid -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:rp_valid
	wire  [401:0] rsp_mux_004_src_data;                                                                                         // rsp_mux_004:src_data -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                                        // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [12:0] rsp_mux_004_src_channel;                                                                                      // rsp_mux_004:src_channel -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                                                // rsp_mux_004:src_startofpacket -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                                  // rsp_mux_004:src_endofpacket -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:rp_endofpacket
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest;    // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_waitrequest -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_waitrequest
	wire  [255:0] communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata;       // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_readdata -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_readdata
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess;    // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_debugaccess -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_debugaccess
	wire   [63:0] communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address;        // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_address -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_address
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read;           // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_read -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_read
	wire   [31:0] communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable;     // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_byteenable -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_byteenable
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid;  // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_readdatavalid -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_readdatavalid
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock;           // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_lock -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_lock
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write;          // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_write -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_write
	wire  [255:0] communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata;      // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_writedata -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_writedata
	wire    [5:0] communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount;     // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_translator:uav_burstcount -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                                                        // rsp_mux_005:src_valid -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:rp_valid
	wire  [401:0] rsp_mux_005_src_data;                                                                                         // rsp_mux_005:src_data -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                                                        // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [12:0] rsp_mux_005_src_channel;                                                                                      // rsp_mux_005:src_channel -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                                                // rsp_mux_005:src_startofpacket -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                                                  // rsp_mux_005:src_endofpacket -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:rp_endofpacket
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest;    // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_waitrequest -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_waitrequest
	wire  [255:0] communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata;       // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_readdata -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_readdata
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess;    // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_debugaccess -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_debugaccess
	wire   [63:0] communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address;        // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_address -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_address
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read;           // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_read -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_read
	wire   [31:0] communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable;     // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_byteenable -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_byteenable
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid;  // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_readdatavalid -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_readdatavalid
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock;           // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_lock -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_lock
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write;          // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_write -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_write
	wire  [255:0] communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata;      // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_writedata -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_writedata
	wire    [5:0] communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount;     // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_translator:uav_burstcount -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                                                        // rsp_mux_006:src_valid -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:rp_valid
	wire  [401:0] rsp_mux_006_src_data;                                                                                         // rsp_mux_006:src_data -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                                                        // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [12:0] rsp_mux_006_src_channel;                                                                                      // rsp_mux_006:src_channel -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                                                // rsp_mux_006:src_startofpacket -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                                                  // rsp_mux_006:src_endofpacket -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:rp_endofpacket
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest;   // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_waitrequest -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_waitrequest
	wire  [255:0] communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata;      // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_readdata -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_readdata
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess;   // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_debugaccess -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_debugaccess
	wire   [63:0] communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address;       // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_address -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_address
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read;          // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_read -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_read
	wire   [31:0] communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable;    // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_byteenable -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_byteenable
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid; // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_readdatavalid -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_readdatavalid
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock;          // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_lock -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_lock
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write;         // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_write -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_write
	wire  [255:0] communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata;     // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_writedata -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_writedata
	wire    [5:0] communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount;    // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_translator:uav_burstcount -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                                                        // rsp_mux_007:src_valid -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:rp_valid
	wire  [401:0] rsp_mux_007_src_data;                                                                                         // rsp_mux_007:src_data -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                                                        // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:rp_ready -> rsp_mux_007:src_ready
	wire   [12:0] rsp_mux_007_src_channel;                                                                                      // rsp_mux_007:src_channel -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                                                // rsp_mux_007:src_startofpacket -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                                                  // rsp_mux_007:src_endofpacket -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:rp_endofpacket
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest;   // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_waitrequest -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_waitrequest
	wire  [255:0] communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata;      // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_readdata -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_readdata
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess;   // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_debugaccess -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_debugaccess
	wire   [63:0] communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address;       // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_address -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_address
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read;          // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_read -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_read
	wire   [31:0] communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable;    // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_byteenable -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_byteenable
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid; // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_readdatavalid -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_readdatavalid
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock;          // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_lock -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_lock
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write;         // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_write -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_write
	wire  [255:0] communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata;     // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_writedata -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_writedata
	wire    [5:0] communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount;    // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_translator:uav_burstcount -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:av_burstcount
	wire          rsp_mux_008_src_valid;                                                                                        // rsp_mux_008:src_valid -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:rp_valid
	wire  [401:0] rsp_mux_008_src_data;                                                                                         // rsp_mux_008:src_data -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:rp_data
	wire          rsp_mux_008_src_ready;                                                                                        // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:rp_ready -> rsp_mux_008:src_ready
	wire   [12:0] rsp_mux_008_src_channel;                                                                                      // rsp_mux_008:src_channel -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:rp_channel
	wire          rsp_mux_008_src_startofpacket;                                                                                // rsp_mux_008:src_startofpacket -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:rp_startofpacket
	wire          rsp_mux_008_src_endofpacket;                                                                                  // rsp_mux_008:src_endofpacket -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:rp_endofpacket
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest;   // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_waitrequest -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_waitrequest
	wire  [255:0] communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata;      // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_readdata -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_readdata
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess;   // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_debugaccess -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_debugaccess
	wire   [63:0] communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address;       // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_address -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_address
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read;          // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_read -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_read
	wire   [31:0] communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable;    // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_byteenable -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_byteenable
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid; // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_readdatavalid -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_readdatavalid
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock;          // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_lock -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_lock
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write;         // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_write -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_write
	wire  [255:0] communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata;     // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_writedata -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_writedata
	wire    [5:0] communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount;    // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_translator:uav_burstcount -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:av_burstcount
	wire          rsp_mux_009_src_valid;                                                                                        // rsp_mux_009:src_valid -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:rp_valid
	wire  [401:0] rsp_mux_009_src_data;                                                                                         // rsp_mux_009:src_data -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:rp_data
	wire          rsp_mux_009_src_ready;                                                                                        // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:rp_ready -> rsp_mux_009:src_ready
	wire   [12:0] rsp_mux_009_src_channel;                                                                                      // rsp_mux_009:src_channel -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:rp_channel
	wire          rsp_mux_009_src_startofpacket;                                                                                // rsp_mux_009:src_startofpacket -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:rp_startofpacket
	wire          rsp_mux_009_src_endofpacket;                                                                                  // rsp_mux_009:src_endofpacket -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:rp_endofpacket
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest;   // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_waitrequest -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_waitrequest
	wire  [255:0] communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata;      // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_readdata -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_readdata
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess;   // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_debugaccess -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_debugaccess
	wire   [63:0] communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address;       // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_address -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_address
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read;          // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_read -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_read
	wire   [31:0] communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable;    // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_byteenable -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_byteenable
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid; // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_readdatavalid -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_readdatavalid
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock;          // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_lock -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_lock
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write;         // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_write -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_write
	wire  [255:0] communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata;     // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_writedata -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_writedata
	wire    [5:0] communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount;    // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_translator:uav_burstcount -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:av_burstcount
	wire          rsp_mux_010_src_valid;                                                                                        // rsp_mux_010:src_valid -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:rp_valid
	wire  [401:0] rsp_mux_010_src_data;                                                                                         // rsp_mux_010:src_data -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:rp_data
	wire          rsp_mux_010_src_ready;                                                                                        // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:rp_ready -> rsp_mux_010:src_ready
	wire   [12:0] rsp_mux_010_src_channel;                                                                                      // rsp_mux_010:src_channel -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:rp_channel
	wire          rsp_mux_010_src_startofpacket;                                                                                // rsp_mux_010:src_startofpacket -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:rp_startofpacket
	wire          rsp_mux_010_src_endofpacket;                                                                                  // rsp_mux_010:src_endofpacket -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:rp_endofpacket
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_waitrequest;                // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_waitrequest -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_waitrequest
	wire    [7:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_readdata;                   // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_readdata -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_readdata
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_debugaccess;                // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_debugaccess -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_debugaccess
	wire   [63:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_address;                    // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_address -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_address
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_read;                       // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_read -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_read
	wire    [0:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_byteenable;                 // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_byteenable -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_byteenable
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_readdatavalid;              // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_readdatavalid -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_readdatavalid
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_lock;                       // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_lock -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_lock
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_write;                      // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_write -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_write
	wire    [7:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_writedata;                  // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_writedata -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_writedata
	wire    [0:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_burstcount;                 // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator:uav_burstcount -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:av_burstcount
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_waitrequest;                  // ddr2_address_span_extender_expanded_master_agent:av_waitrequest -> ddr2_address_span_extender_expanded_master_translator:uav_waitrequest
	wire   [31:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdata;                     // ddr2_address_span_extender_expanded_master_agent:av_readdata -> ddr2_address_span_extender_expanded_master_translator:uav_readdata
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_debugaccess;                  // ddr2_address_span_extender_expanded_master_translator:uav_debugaccess -> ddr2_address_span_extender_expanded_master_agent:av_debugaccess
	wire   [63:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_address;                      // ddr2_address_span_extender_expanded_master_translator:uav_address -> ddr2_address_span_extender_expanded_master_agent:av_address
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_read;                         // ddr2_address_span_extender_expanded_master_translator:uav_read -> ddr2_address_span_extender_expanded_master_agent:av_read
	wire    [3:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_byteenable;                   // ddr2_address_span_extender_expanded_master_translator:uav_byteenable -> ddr2_address_span_extender_expanded_master_agent:av_byteenable
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdatavalid;                // ddr2_address_span_extender_expanded_master_agent:av_readdatavalid -> ddr2_address_span_extender_expanded_master_translator:uav_readdatavalid
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_lock;                         // ddr2_address_span_extender_expanded_master_translator:uav_lock -> ddr2_address_span_extender_expanded_master_agent:av_lock
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_write;                        // ddr2_address_span_extender_expanded_master_translator:uav_write -> ddr2_address_span_extender_expanded_master_agent:av_write
	wire   [31:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_writedata;                    // ddr2_address_span_extender_expanded_master_translator:uav_writedata -> ddr2_address_span_extender_expanded_master_agent:av_writedata
	wire    [9:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_burstcount;                   // ddr2_address_span_extender_expanded_master_translator:uav_burstcount -> ddr2_address_span_extender_expanded_master_agent:av_burstcount
	wire  [255:0] m2_ddr2_memory_avl_agent_m0_readdata;                                                                         // m2_ddr2_memory_avl_translator:uav_readdata -> m2_ddr2_memory_avl_agent:m0_readdata
	wire          m2_ddr2_memory_avl_agent_m0_waitrequest;                                                                      // m2_ddr2_memory_avl_translator:uav_waitrequest -> m2_ddr2_memory_avl_agent:m0_waitrequest
	wire          m2_ddr2_memory_avl_agent_m0_debugaccess;                                                                      // m2_ddr2_memory_avl_agent:m0_debugaccess -> m2_ddr2_memory_avl_translator:uav_debugaccess
	wire   [63:0] m2_ddr2_memory_avl_agent_m0_address;                                                                          // m2_ddr2_memory_avl_agent:m0_address -> m2_ddr2_memory_avl_translator:uav_address
	wire   [31:0] m2_ddr2_memory_avl_agent_m0_byteenable;                                                                       // m2_ddr2_memory_avl_agent:m0_byteenable -> m2_ddr2_memory_avl_translator:uav_byteenable
	wire          m2_ddr2_memory_avl_agent_m0_read;                                                                             // m2_ddr2_memory_avl_agent:m0_read -> m2_ddr2_memory_avl_translator:uav_read
	wire          m2_ddr2_memory_avl_agent_m0_readdatavalid;                                                                    // m2_ddr2_memory_avl_translator:uav_readdatavalid -> m2_ddr2_memory_avl_agent:m0_readdatavalid
	wire          m2_ddr2_memory_avl_agent_m0_lock;                                                                             // m2_ddr2_memory_avl_agent:m0_lock -> m2_ddr2_memory_avl_translator:uav_lock
	wire  [255:0] m2_ddr2_memory_avl_agent_m0_writedata;                                                                        // m2_ddr2_memory_avl_agent:m0_writedata -> m2_ddr2_memory_avl_translator:uav_writedata
	wire          m2_ddr2_memory_avl_agent_m0_write;                                                                            // m2_ddr2_memory_avl_agent:m0_write -> m2_ddr2_memory_avl_translator:uav_write
	wire   [12:0] m2_ddr2_memory_avl_agent_m0_burstcount;                                                                       // m2_ddr2_memory_avl_agent:m0_burstcount -> m2_ddr2_memory_avl_translator:uav_burstcount
	wire          m2_ddr2_memory_avl_agent_rf_source_valid;                                                                     // m2_ddr2_memory_avl_agent:rf_source_valid -> m2_ddr2_memory_avl_agent_rsp_fifo:in_valid
	wire  [402:0] m2_ddr2_memory_avl_agent_rf_source_data;                                                                      // m2_ddr2_memory_avl_agent:rf_source_data -> m2_ddr2_memory_avl_agent_rsp_fifo:in_data
	wire          m2_ddr2_memory_avl_agent_rf_source_ready;                                                                     // m2_ddr2_memory_avl_agent_rsp_fifo:in_ready -> m2_ddr2_memory_avl_agent:rf_source_ready
	wire          m2_ddr2_memory_avl_agent_rf_source_startofpacket;                                                             // m2_ddr2_memory_avl_agent:rf_source_startofpacket -> m2_ddr2_memory_avl_agent_rsp_fifo:in_startofpacket
	wire          m2_ddr2_memory_avl_agent_rf_source_endofpacket;                                                               // m2_ddr2_memory_avl_agent:rf_source_endofpacket -> m2_ddr2_memory_avl_agent_rsp_fifo:in_endofpacket
	wire          m2_ddr2_memory_avl_agent_rsp_fifo_out_valid;                                                                  // m2_ddr2_memory_avl_agent_rsp_fifo:out_valid -> m2_ddr2_memory_avl_agent:rf_sink_valid
	wire  [402:0] m2_ddr2_memory_avl_agent_rsp_fifo_out_data;                                                                   // m2_ddr2_memory_avl_agent_rsp_fifo:out_data -> m2_ddr2_memory_avl_agent:rf_sink_data
	wire          m2_ddr2_memory_avl_agent_rsp_fifo_out_ready;                                                                  // m2_ddr2_memory_avl_agent:rf_sink_ready -> m2_ddr2_memory_avl_agent_rsp_fifo:out_ready
	wire          m2_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket;                                                          // m2_ddr2_memory_avl_agent_rsp_fifo:out_startofpacket -> m2_ddr2_memory_avl_agent:rf_sink_startofpacket
	wire          m2_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket;                                                            // m2_ddr2_memory_avl_agent_rsp_fifo:out_endofpacket -> m2_ddr2_memory_avl_agent:rf_sink_endofpacket
	wire          m2_ddr2_memory_avl_agent_rdata_fifo_src_valid;                                                                // m2_ddr2_memory_avl_agent:rdata_fifo_src_valid -> m2_ddr2_memory_avl_agent_rdata_fifo:in_valid
	wire  [257:0] m2_ddr2_memory_avl_agent_rdata_fifo_src_data;                                                                 // m2_ddr2_memory_avl_agent:rdata_fifo_src_data -> m2_ddr2_memory_avl_agent_rdata_fifo:in_data
	wire          m2_ddr2_memory_avl_agent_rdata_fifo_src_ready;                                                                // m2_ddr2_memory_avl_agent_rdata_fifo:in_ready -> m2_ddr2_memory_avl_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                                            // cmd_mux:src_valid -> m2_ddr2_memory_avl_agent:cp_valid
	wire  [401:0] cmd_mux_src_data;                                                                                             // cmd_mux:src_data -> m2_ddr2_memory_avl_agent:cp_data
	wire          cmd_mux_src_ready;                                                                                            // m2_ddr2_memory_avl_agent:cp_ready -> cmd_mux:src_ready
	wire   [12:0] cmd_mux_src_channel;                                                                                          // cmd_mux:src_channel -> m2_ddr2_memory_avl_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                                    // cmd_mux:src_startofpacket -> m2_ddr2_memory_avl_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                                      // cmd_mux:src_endofpacket -> m2_ddr2_memory_avl_agent:cp_endofpacket
	wire  [255:0] m1_clock_bridge_ftdi_s0_agent_m0_readdata;                                                                    // m1_clock_bridge_ftdi_s0_translator:uav_readdata -> m1_clock_bridge_ftdi_s0_agent:m0_readdata
	wire          m1_clock_bridge_ftdi_s0_agent_m0_waitrequest;                                                                 // m1_clock_bridge_ftdi_s0_translator:uav_waitrequest -> m1_clock_bridge_ftdi_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_ftdi_s0_agent_m0_debugaccess;                                                                 // m1_clock_bridge_ftdi_s0_agent:m0_debugaccess -> m1_clock_bridge_ftdi_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_ftdi_s0_agent_m0_address;                                                                     // m1_clock_bridge_ftdi_s0_agent:m0_address -> m1_clock_bridge_ftdi_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_ftdi_s0_agent_m0_byteenable;                                                                  // m1_clock_bridge_ftdi_s0_agent:m0_byteenable -> m1_clock_bridge_ftdi_s0_translator:uav_byteenable
	wire          m1_clock_bridge_ftdi_s0_agent_m0_read;                                                                        // m1_clock_bridge_ftdi_s0_agent:m0_read -> m1_clock_bridge_ftdi_s0_translator:uav_read
	wire          m1_clock_bridge_ftdi_s0_agent_m0_readdatavalid;                                                               // m1_clock_bridge_ftdi_s0_translator:uav_readdatavalid -> m1_clock_bridge_ftdi_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_ftdi_s0_agent_m0_lock;                                                                        // m1_clock_bridge_ftdi_s0_agent:m0_lock -> m1_clock_bridge_ftdi_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_ftdi_s0_agent_m0_writedata;                                                                   // m1_clock_bridge_ftdi_s0_agent:m0_writedata -> m1_clock_bridge_ftdi_s0_translator:uav_writedata
	wire          m1_clock_bridge_ftdi_s0_agent_m0_write;                                                                       // m1_clock_bridge_ftdi_s0_agent:m0_write -> m1_clock_bridge_ftdi_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_ftdi_s0_agent_m0_burstcount;                                                                  // m1_clock_bridge_ftdi_s0_agent:m0_burstcount -> m1_clock_bridge_ftdi_s0_translator:uav_burstcount
	wire          m1_clock_bridge_ftdi_s0_agent_rf_source_valid;                                                                // m1_clock_bridge_ftdi_s0_agent:rf_source_valid -> m1_clock_bridge_ftdi_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_ftdi_s0_agent_rf_source_data;                                                                 // m1_clock_bridge_ftdi_s0_agent:rf_source_data -> m1_clock_bridge_ftdi_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_ftdi_s0_agent_rf_source_ready;                                                                // m1_clock_bridge_ftdi_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_ftdi_s0_agent:rf_source_ready
	wire          m1_clock_bridge_ftdi_s0_agent_rf_source_startofpacket;                                                        // m1_clock_bridge_ftdi_s0_agent:rf_source_startofpacket -> m1_clock_bridge_ftdi_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_ftdi_s0_agent_rf_source_endofpacket;                                                          // m1_clock_bridge_ftdi_s0_agent:rf_source_endofpacket -> m1_clock_bridge_ftdi_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_valid;                                                             // m1_clock_bridge_ftdi_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_ftdi_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_data;                                                              // m1_clock_bridge_ftdi_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_ftdi_s0_agent:rf_sink_data
	wire          m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_ready;                                                             // m1_clock_bridge_ftdi_s0_agent:rf_sink_ready -> m1_clock_bridge_ftdi_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_startofpacket;                                                     // m1_clock_bridge_ftdi_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_ftdi_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_endofpacket;                                                       // m1_clock_bridge_ftdi_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_ftdi_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_ftdi_s0_agent_rdata_fifo_src_valid;                                                           // m1_clock_bridge_ftdi_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_ftdi_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_ftdi_s0_agent_rdata_fifo_src_data;                                                            // m1_clock_bridge_ftdi_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_ftdi_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_ftdi_s0_agent_rdata_fifo_src_ready;                                                           // m1_clock_bridge_ftdi_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_ftdi_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                                                        // cmd_mux_001:src_valid -> m1_clock_bridge_ftdi_s0_agent:cp_valid
	wire  [401:0] cmd_mux_001_src_data;                                                                                         // cmd_mux_001:src_data -> m1_clock_bridge_ftdi_s0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                                        // m1_clock_bridge_ftdi_s0_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [12:0] cmd_mux_001_src_channel;                                                                                      // cmd_mux_001:src_channel -> m1_clock_bridge_ftdi_s0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                                                // cmd_mux_001:src_startofpacket -> m1_clock_bridge_ftdi_s0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                                  // cmd_mux_001:src_endofpacket -> m1_clock_bridge_ftdi_s0_agent:cp_endofpacket
	wire  [255:0] m1_clock_bridge_general_s0_agent_m0_readdata;                                                                 // m1_clock_bridge_general_s0_translator:uav_readdata -> m1_clock_bridge_general_s0_agent:m0_readdata
	wire          m1_clock_bridge_general_s0_agent_m0_waitrequest;                                                              // m1_clock_bridge_general_s0_translator:uav_waitrequest -> m1_clock_bridge_general_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_general_s0_agent_m0_debugaccess;                                                              // m1_clock_bridge_general_s0_agent:m0_debugaccess -> m1_clock_bridge_general_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_general_s0_agent_m0_address;                                                                  // m1_clock_bridge_general_s0_agent:m0_address -> m1_clock_bridge_general_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_general_s0_agent_m0_byteenable;                                                               // m1_clock_bridge_general_s0_agent:m0_byteenable -> m1_clock_bridge_general_s0_translator:uav_byteenable
	wire          m1_clock_bridge_general_s0_agent_m0_read;                                                                     // m1_clock_bridge_general_s0_agent:m0_read -> m1_clock_bridge_general_s0_translator:uav_read
	wire          m1_clock_bridge_general_s0_agent_m0_readdatavalid;                                                            // m1_clock_bridge_general_s0_translator:uav_readdatavalid -> m1_clock_bridge_general_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_general_s0_agent_m0_lock;                                                                     // m1_clock_bridge_general_s0_agent:m0_lock -> m1_clock_bridge_general_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_general_s0_agent_m0_writedata;                                                                // m1_clock_bridge_general_s0_agent:m0_writedata -> m1_clock_bridge_general_s0_translator:uav_writedata
	wire          m1_clock_bridge_general_s0_agent_m0_write;                                                                    // m1_clock_bridge_general_s0_agent:m0_write -> m1_clock_bridge_general_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_general_s0_agent_m0_burstcount;                                                               // m1_clock_bridge_general_s0_agent:m0_burstcount -> m1_clock_bridge_general_s0_translator:uav_burstcount
	wire          m1_clock_bridge_general_s0_agent_rf_source_valid;                                                             // m1_clock_bridge_general_s0_agent:rf_source_valid -> m1_clock_bridge_general_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_general_s0_agent_rf_source_data;                                                              // m1_clock_bridge_general_s0_agent:rf_source_data -> m1_clock_bridge_general_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_general_s0_agent_rf_source_ready;                                                             // m1_clock_bridge_general_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_general_s0_agent:rf_source_ready
	wire          m1_clock_bridge_general_s0_agent_rf_source_startofpacket;                                                     // m1_clock_bridge_general_s0_agent:rf_source_startofpacket -> m1_clock_bridge_general_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_general_s0_agent_rf_source_endofpacket;                                                       // m1_clock_bridge_general_s0_agent:rf_source_endofpacket -> m1_clock_bridge_general_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_general_s0_agent_rsp_fifo_out_valid;                                                          // m1_clock_bridge_general_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_general_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_general_s0_agent_rsp_fifo_out_data;                                                           // m1_clock_bridge_general_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_general_s0_agent:rf_sink_data
	wire          m1_clock_bridge_general_s0_agent_rsp_fifo_out_ready;                                                          // m1_clock_bridge_general_s0_agent:rf_sink_ready -> m1_clock_bridge_general_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_general_s0_agent_rsp_fifo_out_startofpacket;                                                  // m1_clock_bridge_general_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_general_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_general_s0_agent_rsp_fifo_out_endofpacket;                                                    // m1_clock_bridge_general_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_general_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_general_s0_agent_rdata_fifo_src_valid;                                                        // m1_clock_bridge_general_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_general_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_general_s0_agent_rdata_fifo_src_data;                                                         // m1_clock_bridge_general_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_general_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_general_s0_agent_rdata_fifo_src_ready;                                                        // m1_clock_bridge_general_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_general_s0_agent:rdata_fifo_src_ready
	wire  [255:0] m1_clock_bridge_comm_3_right_s0_agent_m0_readdata;                                                            // m1_clock_bridge_comm_3_right_s0_translator:uav_readdata -> m1_clock_bridge_comm_3_right_s0_agent:m0_readdata
	wire          m1_clock_bridge_comm_3_right_s0_agent_m0_waitrequest;                                                         // m1_clock_bridge_comm_3_right_s0_translator:uav_waitrequest -> m1_clock_bridge_comm_3_right_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_comm_3_right_s0_agent_m0_debugaccess;                                                         // m1_clock_bridge_comm_3_right_s0_agent:m0_debugaccess -> m1_clock_bridge_comm_3_right_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_comm_3_right_s0_agent_m0_address;                                                             // m1_clock_bridge_comm_3_right_s0_agent:m0_address -> m1_clock_bridge_comm_3_right_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_comm_3_right_s0_agent_m0_byteenable;                                                          // m1_clock_bridge_comm_3_right_s0_agent:m0_byteenable -> m1_clock_bridge_comm_3_right_s0_translator:uav_byteenable
	wire          m1_clock_bridge_comm_3_right_s0_agent_m0_read;                                                                // m1_clock_bridge_comm_3_right_s0_agent:m0_read -> m1_clock_bridge_comm_3_right_s0_translator:uav_read
	wire          m1_clock_bridge_comm_3_right_s0_agent_m0_readdatavalid;                                                       // m1_clock_bridge_comm_3_right_s0_translator:uav_readdatavalid -> m1_clock_bridge_comm_3_right_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_comm_3_right_s0_agent_m0_lock;                                                                // m1_clock_bridge_comm_3_right_s0_agent:m0_lock -> m1_clock_bridge_comm_3_right_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_comm_3_right_s0_agent_m0_writedata;                                                           // m1_clock_bridge_comm_3_right_s0_agent:m0_writedata -> m1_clock_bridge_comm_3_right_s0_translator:uav_writedata
	wire          m1_clock_bridge_comm_3_right_s0_agent_m0_write;                                                               // m1_clock_bridge_comm_3_right_s0_agent:m0_write -> m1_clock_bridge_comm_3_right_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_comm_3_right_s0_agent_m0_burstcount;                                                          // m1_clock_bridge_comm_3_right_s0_agent:m0_burstcount -> m1_clock_bridge_comm_3_right_s0_translator:uav_burstcount
	wire          m1_clock_bridge_comm_3_right_s0_agent_rf_source_valid;                                                        // m1_clock_bridge_comm_3_right_s0_agent:rf_source_valid -> m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_comm_3_right_s0_agent_rf_source_data;                                                         // m1_clock_bridge_comm_3_right_s0_agent:rf_source_data -> m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_comm_3_right_s0_agent_rf_source_ready;                                                        // m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_comm_3_right_s0_agent:rf_source_ready
	wire          m1_clock_bridge_comm_3_right_s0_agent_rf_source_startofpacket;                                                // m1_clock_bridge_comm_3_right_s0_agent:rf_source_startofpacket -> m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_comm_3_right_s0_agent_rf_source_endofpacket;                                                  // m1_clock_bridge_comm_3_right_s0_agent:rf_source_endofpacket -> m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_valid;                                                     // m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_comm_3_right_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_data;                                                      // m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_comm_3_right_s0_agent:rf_sink_data
	wire          m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_ready;                                                     // m1_clock_bridge_comm_3_right_s0_agent:rf_sink_ready -> m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_startofpacket;                                             // m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_comm_3_right_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_endofpacket;                                               // m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_comm_3_right_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_src_valid;                                                   // m1_clock_bridge_comm_3_right_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_src_data;                                                    // m1_clock_bridge_comm_3_right_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_src_ready;                                                   // m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_comm_3_right_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                                                        // cmd_mux_003:src_valid -> m1_clock_bridge_comm_3_right_s0_agent:cp_valid
	wire  [401:0] cmd_mux_003_src_data;                                                                                         // cmd_mux_003:src_data -> m1_clock_bridge_comm_3_right_s0_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                                        // m1_clock_bridge_comm_3_right_s0_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [12:0] cmd_mux_003_src_channel;                                                                                      // cmd_mux_003:src_channel -> m1_clock_bridge_comm_3_right_s0_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                                // cmd_mux_003:src_startofpacket -> m1_clock_bridge_comm_3_right_s0_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                                  // cmd_mux_003:src_endofpacket -> m1_clock_bridge_comm_3_right_s0_agent:cp_endofpacket
	wire  [255:0] m1_clock_bridge_comm_4_right_s0_agent_m0_readdata;                                                            // m1_clock_bridge_comm_4_right_s0_translator:uav_readdata -> m1_clock_bridge_comm_4_right_s0_agent:m0_readdata
	wire          m1_clock_bridge_comm_4_right_s0_agent_m0_waitrequest;                                                         // m1_clock_bridge_comm_4_right_s0_translator:uav_waitrequest -> m1_clock_bridge_comm_4_right_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_comm_4_right_s0_agent_m0_debugaccess;                                                         // m1_clock_bridge_comm_4_right_s0_agent:m0_debugaccess -> m1_clock_bridge_comm_4_right_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_comm_4_right_s0_agent_m0_address;                                                             // m1_clock_bridge_comm_4_right_s0_agent:m0_address -> m1_clock_bridge_comm_4_right_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_comm_4_right_s0_agent_m0_byteenable;                                                          // m1_clock_bridge_comm_4_right_s0_agent:m0_byteenable -> m1_clock_bridge_comm_4_right_s0_translator:uav_byteenable
	wire          m1_clock_bridge_comm_4_right_s0_agent_m0_read;                                                                // m1_clock_bridge_comm_4_right_s0_agent:m0_read -> m1_clock_bridge_comm_4_right_s0_translator:uav_read
	wire          m1_clock_bridge_comm_4_right_s0_agent_m0_readdatavalid;                                                       // m1_clock_bridge_comm_4_right_s0_translator:uav_readdatavalid -> m1_clock_bridge_comm_4_right_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_comm_4_right_s0_agent_m0_lock;                                                                // m1_clock_bridge_comm_4_right_s0_agent:m0_lock -> m1_clock_bridge_comm_4_right_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_comm_4_right_s0_agent_m0_writedata;                                                           // m1_clock_bridge_comm_4_right_s0_agent:m0_writedata -> m1_clock_bridge_comm_4_right_s0_translator:uav_writedata
	wire          m1_clock_bridge_comm_4_right_s0_agent_m0_write;                                                               // m1_clock_bridge_comm_4_right_s0_agent:m0_write -> m1_clock_bridge_comm_4_right_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_comm_4_right_s0_agent_m0_burstcount;                                                          // m1_clock_bridge_comm_4_right_s0_agent:m0_burstcount -> m1_clock_bridge_comm_4_right_s0_translator:uav_burstcount
	wire          m1_clock_bridge_comm_4_right_s0_agent_rf_source_valid;                                                        // m1_clock_bridge_comm_4_right_s0_agent:rf_source_valid -> m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_comm_4_right_s0_agent_rf_source_data;                                                         // m1_clock_bridge_comm_4_right_s0_agent:rf_source_data -> m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_comm_4_right_s0_agent_rf_source_ready;                                                        // m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_comm_4_right_s0_agent:rf_source_ready
	wire          m1_clock_bridge_comm_4_right_s0_agent_rf_source_startofpacket;                                                // m1_clock_bridge_comm_4_right_s0_agent:rf_source_startofpacket -> m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_comm_4_right_s0_agent_rf_source_endofpacket;                                                  // m1_clock_bridge_comm_4_right_s0_agent:rf_source_endofpacket -> m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_valid;                                                     // m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_comm_4_right_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_data;                                                      // m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_comm_4_right_s0_agent:rf_sink_data
	wire          m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_ready;                                                     // m1_clock_bridge_comm_4_right_s0_agent:rf_sink_ready -> m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_startofpacket;                                             // m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_comm_4_right_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_endofpacket;                                               // m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_comm_4_right_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_src_valid;                                                   // m1_clock_bridge_comm_4_right_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_src_data;                                                    // m1_clock_bridge_comm_4_right_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_src_ready;                                                   // m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_comm_4_right_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                                                        // cmd_mux_004:src_valid -> m1_clock_bridge_comm_4_right_s0_agent:cp_valid
	wire  [401:0] cmd_mux_004_src_data;                                                                                         // cmd_mux_004:src_data -> m1_clock_bridge_comm_4_right_s0_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                                        // m1_clock_bridge_comm_4_right_s0_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [12:0] cmd_mux_004_src_channel;                                                                                      // cmd_mux_004:src_channel -> m1_clock_bridge_comm_4_right_s0_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                                // cmd_mux_004:src_startofpacket -> m1_clock_bridge_comm_4_right_s0_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                                  // cmd_mux_004:src_endofpacket -> m1_clock_bridge_comm_4_right_s0_agent:cp_endofpacket
	wire  [255:0] m1_clock_bridge_comm_2_right_s0_agent_m0_readdata;                                                            // m1_clock_bridge_comm_2_right_s0_translator:uav_readdata -> m1_clock_bridge_comm_2_right_s0_agent:m0_readdata
	wire          m1_clock_bridge_comm_2_right_s0_agent_m0_waitrequest;                                                         // m1_clock_bridge_comm_2_right_s0_translator:uav_waitrequest -> m1_clock_bridge_comm_2_right_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_comm_2_right_s0_agent_m0_debugaccess;                                                         // m1_clock_bridge_comm_2_right_s0_agent:m0_debugaccess -> m1_clock_bridge_comm_2_right_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_comm_2_right_s0_agent_m0_address;                                                             // m1_clock_bridge_comm_2_right_s0_agent:m0_address -> m1_clock_bridge_comm_2_right_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_comm_2_right_s0_agent_m0_byteenable;                                                          // m1_clock_bridge_comm_2_right_s0_agent:m0_byteenable -> m1_clock_bridge_comm_2_right_s0_translator:uav_byteenable
	wire          m1_clock_bridge_comm_2_right_s0_agent_m0_read;                                                                // m1_clock_bridge_comm_2_right_s0_agent:m0_read -> m1_clock_bridge_comm_2_right_s0_translator:uav_read
	wire          m1_clock_bridge_comm_2_right_s0_agent_m0_readdatavalid;                                                       // m1_clock_bridge_comm_2_right_s0_translator:uav_readdatavalid -> m1_clock_bridge_comm_2_right_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_comm_2_right_s0_agent_m0_lock;                                                                // m1_clock_bridge_comm_2_right_s0_agent:m0_lock -> m1_clock_bridge_comm_2_right_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_comm_2_right_s0_agent_m0_writedata;                                                           // m1_clock_bridge_comm_2_right_s0_agent:m0_writedata -> m1_clock_bridge_comm_2_right_s0_translator:uav_writedata
	wire          m1_clock_bridge_comm_2_right_s0_agent_m0_write;                                                               // m1_clock_bridge_comm_2_right_s0_agent:m0_write -> m1_clock_bridge_comm_2_right_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_comm_2_right_s0_agent_m0_burstcount;                                                          // m1_clock_bridge_comm_2_right_s0_agent:m0_burstcount -> m1_clock_bridge_comm_2_right_s0_translator:uav_burstcount
	wire          m1_clock_bridge_comm_2_right_s0_agent_rf_source_valid;                                                        // m1_clock_bridge_comm_2_right_s0_agent:rf_source_valid -> m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_comm_2_right_s0_agent_rf_source_data;                                                         // m1_clock_bridge_comm_2_right_s0_agent:rf_source_data -> m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_comm_2_right_s0_agent_rf_source_ready;                                                        // m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_comm_2_right_s0_agent:rf_source_ready
	wire          m1_clock_bridge_comm_2_right_s0_agent_rf_source_startofpacket;                                                // m1_clock_bridge_comm_2_right_s0_agent:rf_source_startofpacket -> m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_comm_2_right_s0_agent_rf_source_endofpacket;                                                  // m1_clock_bridge_comm_2_right_s0_agent:rf_source_endofpacket -> m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_valid;                                                     // m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_comm_2_right_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_data;                                                      // m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_comm_2_right_s0_agent:rf_sink_data
	wire          m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_ready;                                                     // m1_clock_bridge_comm_2_right_s0_agent:rf_sink_ready -> m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_startofpacket;                                             // m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_comm_2_right_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_endofpacket;                                               // m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_comm_2_right_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_src_valid;                                                   // m1_clock_bridge_comm_2_right_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_src_data;                                                    // m1_clock_bridge_comm_2_right_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_src_ready;                                                   // m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_comm_2_right_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                                                        // cmd_mux_005:src_valid -> m1_clock_bridge_comm_2_right_s0_agent:cp_valid
	wire  [401:0] cmd_mux_005_src_data;                                                                                         // cmd_mux_005:src_data -> m1_clock_bridge_comm_2_right_s0_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                                        // m1_clock_bridge_comm_2_right_s0_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [12:0] cmd_mux_005_src_channel;                                                                                      // cmd_mux_005:src_channel -> m1_clock_bridge_comm_2_right_s0_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                                // cmd_mux_005:src_startofpacket -> m1_clock_bridge_comm_2_right_s0_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                                  // cmd_mux_005:src_endofpacket -> m1_clock_bridge_comm_2_right_s0_agent:cp_endofpacket
	wire  [255:0] m1_clock_bridge_comm_1_right_s0_agent_m0_readdata;                                                            // m1_clock_bridge_comm_1_right_s0_translator:uav_readdata -> m1_clock_bridge_comm_1_right_s0_agent:m0_readdata
	wire          m1_clock_bridge_comm_1_right_s0_agent_m0_waitrequest;                                                         // m1_clock_bridge_comm_1_right_s0_translator:uav_waitrequest -> m1_clock_bridge_comm_1_right_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_comm_1_right_s0_agent_m0_debugaccess;                                                         // m1_clock_bridge_comm_1_right_s0_agent:m0_debugaccess -> m1_clock_bridge_comm_1_right_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_comm_1_right_s0_agent_m0_address;                                                             // m1_clock_bridge_comm_1_right_s0_agent:m0_address -> m1_clock_bridge_comm_1_right_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_comm_1_right_s0_agent_m0_byteenable;                                                          // m1_clock_bridge_comm_1_right_s0_agent:m0_byteenable -> m1_clock_bridge_comm_1_right_s0_translator:uav_byteenable
	wire          m1_clock_bridge_comm_1_right_s0_agent_m0_read;                                                                // m1_clock_bridge_comm_1_right_s0_agent:m0_read -> m1_clock_bridge_comm_1_right_s0_translator:uav_read
	wire          m1_clock_bridge_comm_1_right_s0_agent_m0_readdatavalid;                                                       // m1_clock_bridge_comm_1_right_s0_translator:uav_readdatavalid -> m1_clock_bridge_comm_1_right_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_comm_1_right_s0_agent_m0_lock;                                                                // m1_clock_bridge_comm_1_right_s0_agent:m0_lock -> m1_clock_bridge_comm_1_right_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_comm_1_right_s0_agent_m0_writedata;                                                           // m1_clock_bridge_comm_1_right_s0_agent:m0_writedata -> m1_clock_bridge_comm_1_right_s0_translator:uav_writedata
	wire          m1_clock_bridge_comm_1_right_s0_agent_m0_write;                                                               // m1_clock_bridge_comm_1_right_s0_agent:m0_write -> m1_clock_bridge_comm_1_right_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_comm_1_right_s0_agent_m0_burstcount;                                                          // m1_clock_bridge_comm_1_right_s0_agent:m0_burstcount -> m1_clock_bridge_comm_1_right_s0_translator:uav_burstcount
	wire          m1_clock_bridge_comm_1_right_s0_agent_rf_source_valid;                                                        // m1_clock_bridge_comm_1_right_s0_agent:rf_source_valid -> m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_comm_1_right_s0_agent_rf_source_data;                                                         // m1_clock_bridge_comm_1_right_s0_agent:rf_source_data -> m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_comm_1_right_s0_agent_rf_source_ready;                                                        // m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_comm_1_right_s0_agent:rf_source_ready
	wire          m1_clock_bridge_comm_1_right_s0_agent_rf_source_startofpacket;                                                // m1_clock_bridge_comm_1_right_s0_agent:rf_source_startofpacket -> m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_comm_1_right_s0_agent_rf_source_endofpacket;                                                  // m1_clock_bridge_comm_1_right_s0_agent:rf_source_endofpacket -> m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_valid;                                                     // m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_comm_1_right_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_data;                                                      // m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_comm_1_right_s0_agent:rf_sink_data
	wire          m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_ready;                                                     // m1_clock_bridge_comm_1_right_s0_agent:rf_sink_ready -> m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_startofpacket;                                             // m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_comm_1_right_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_endofpacket;                                               // m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_comm_1_right_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_src_valid;                                                   // m1_clock_bridge_comm_1_right_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_src_data;                                                    // m1_clock_bridge_comm_1_right_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_src_ready;                                                   // m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_comm_1_right_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                                                        // cmd_mux_006:src_valid -> m1_clock_bridge_comm_1_right_s0_agent:cp_valid
	wire  [401:0] cmd_mux_006_src_data;                                                                                         // cmd_mux_006:src_data -> m1_clock_bridge_comm_1_right_s0_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                                        // m1_clock_bridge_comm_1_right_s0_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [12:0] cmd_mux_006_src_channel;                                                                                      // cmd_mux_006:src_channel -> m1_clock_bridge_comm_1_right_s0_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                                // cmd_mux_006:src_startofpacket -> m1_clock_bridge_comm_1_right_s0_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                                  // cmd_mux_006:src_endofpacket -> m1_clock_bridge_comm_1_right_s0_agent:cp_endofpacket
	wire  [255:0] m1_clock_bridge_comm_3_left_s0_agent_m0_readdata;                                                             // m1_clock_bridge_comm_3_left_s0_translator:uav_readdata -> m1_clock_bridge_comm_3_left_s0_agent:m0_readdata
	wire          m1_clock_bridge_comm_3_left_s0_agent_m0_waitrequest;                                                          // m1_clock_bridge_comm_3_left_s0_translator:uav_waitrequest -> m1_clock_bridge_comm_3_left_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_comm_3_left_s0_agent_m0_debugaccess;                                                          // m1_clock_bridge_comm_3_left_s0_agent:m0_debugaccess -> m1_clock_bridge_comm_3_left_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_comm_3_left_s0_agent_m0_address;                                                              // m1_clock_bridge_comm_3_left_s0_agent:m0_address -> m1_clock_bridge_comm_3_left_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_comm_3_left_s0_agent_m0_byteenable;                                                           // m1_clock_bridge_comm_3_left_s0_agent:m0_byteenable -> m1_clock_bridge_comm_3_left_s0_translator:uav_byteenable
	wire          m1_clock_bridge_comm_3_left_s0_agent_m0_read;                                                                 // m1_clock_bridge_comm_3_left_s0_agent:m0_read -> m1_clock_bridge_comm_3_left_s0_translator:uav_read
	wire          m1_clock_bridge_comm_3_left_s0_agent_m0_readdatavalid;                                                        // m1_clock_bridge_comm_3_left_s0_translator:uav_readdatavalid -> m1_clock_bridge_comm_3_left_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_comm_3_left_s0_agent_m0_lock;                                                                 // m1_clock_bridge_comm_3_left_s0_agent:m0_lock -> m1_clock_bridge_comm_3_left_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_comm_3_left_s0_agent_m0_writedata;                                                            // m1_clock_bridge_comm_3_left_s0_agent:m0_writedata -> m1_clock_bridge_comm_3_left_s0_translator:uav_writedata
	wire          m1_clock_bridge_comm_3_left_s0_agent_m0_write;                                                                // m1_clock_bridge_comm_3_left_s0_agent:m0_write -> m1_clock_bridge_comm_3_left_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_comm_3_left_s0_agent_m0_burstcount;                                                           // m1_clock_bridge_comm_3_left_s0_agent:m0_burstcount -> m1_clock_bridge_comm_3_left_s0_translator:uav_burstcount
	wire          m1_clock_bridge_comm_3_left_s0_agent_rf_source_valid;                                                         // m1_clock_bridge_comm_3_left_s0_agent:rf_source_valid -> m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_comm_3_left_s0_agent_rf_source_data;                                                          // m1_clock_bridge_comm_3_left_s0_agent:rf_source_data -> m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_comm_3_left_s0_agent_rf_source_ready;                                                         // m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_comm_3_left_s0_agent:rf_source_ready
	wire          m1_clock_bridge_comm_3_left_s0_agent_rf_source_startofpacket;                                                 // m1_clock_bridge_comm_3_left_s0_agent:rf_source_startofpacket -> m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_comm_3_left_s0_agent_rf_source_endofpacket;                                                   // m1_clock_bridge_comm_3_left_s0_agent:rf_source_endofpacket -> m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_valid;                                                      // m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_comm_3_left_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_data;                                                       // m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_comm_3_left_s0_agent:rf_sink_data
	wire          m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_ready;                                                      // m1_clock_bridge_comm_3_left_s0_agent:rf_sink_ready -> m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_startofpacket;                                              // m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_comm_3_left_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_endofpacket;                                                // m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_comm_3_left_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_src_valid;                                                    // m1_clock_bridge_comm_3_left_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_src_data;                                                     // m1_clock_bridge_comm_3_left_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_src_ready;                                                    // m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_comm_3_left_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                                                        // cmd_mux_007:src_valid -> m1_clock_bridge_comm_3_left_s0_agent:cp_valid
	wire  [401:0] cmd_mux_007_src_data;                                                                                         // cmd_mux_007:src_data -> m1_clock_bridge_comm_3_left_s0_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                                        // m1_clock_bridge_comm_3_left_s0_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [12:0] cmd_mux_007_src_channel;                                                                                      // cmd_mux_007:src_channel -> m1_clock_bridge_comm_3_left_s0_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                                // cmd_mux_007:src_startofpacket -> m1_clock_bridge_comm_3_left_s0_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                                  // cmd_mux_007:src_endofpacket -> m1_clock_bridge_comm_3_left_s0_agent:cp_endofpacket
	wire  [255:0] m1_clock_bridge_comm_4_left_s0_agent_m0_readdata;                                                             // m1_clock_bridge_comm_4_left_s0_translator:uav_readdata -> m1_clock_bridge_comm_4_left_s0_agent:m0_readdata
	wire          m1_clock_bridge_comm_4_left_s0_agent_m0_waitrequest;                                                          // m1_clock_bridge_comm_4_left_s0_translator:uav_waitrequest -> m1_clock_bridge_comm_4_left_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_comm_4_left_s0_agent_m0_debugaccess;                                                          // m1_clock_bridge_comm_4_left_s0_agent:m0_debugaccess -> m1_clock_bridge_comm_4_left_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_comm_4_left_s0_agent_m0_address;                                                              // m1_clock_bridge_comm_4_left_s0_agent:m0_address -> m1_clock_bridge_comm_4_left_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_comm_4_left_s0_agent_m0_byteenable;                                                           // m1_clock_bridge_comm_4_left_s0_agent:m0_byteenable -> m1_clock_bridge_comm_4_left_s0_translator:uav_byteenable
	wire          m1_clock_bridge_comm_4_left_s0_agent_m0_read;                                                                 // m1_clock_bridge_comm_4_left_s0_agent:m0_read -> m1_clock_bridge_comm_4_left_s0_translator:uav_read
	wire          m1_clock_bridge_comm_4_left_s0_agent_m0_readdatavalid;                                                        // m1_clock_bridge_comm_4_left_s0_translator:uav_readdatavalid -> m1_clock_bridge_comm_4_left_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_comm_4_left_s0_agent_m0_lock;                                                                 // m1_clock_bridge_comm_4_left_s0_agent:m0_lock -> m1_clock_bridge_comm_4_left_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_comm_4_left_s0_agent_m0_writedata;                                                            // m1_clock_bridge_comm_4_left_s0_agent:m0_writedata -> m1_clock_bridge_comm_4_left_s0_translator:uav_writedata
	wire          m1_clock_bridge_comm_4_left_s0_agent_m0_write;                                                                // m1_clock_bridge_comm_4_left_s0_agent:m0_write -> m1_clock_bridge_comm_4_left_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_comm_4_left_s0_agent_m0_burstcount;                                                           // m1_clock_bridge_comm_4_left_s0_agent:m0_burstcount -> m1_clock_bridge_comm_4_left_s0_translator:uav_burstcount
	wire          m1_clock_bridge_comm_4_left_s0_agent_rf_source_valid;                                                         // m1_clock_bridge_comm_4_left_s0_agent:rf_source_valid -> m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_comm_4_left_s0_agent_rf_source_data;                                                          // m1_clock_bridge_comm_4_left_s0_agent:rf_source_data -> m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_comm_4_left_s0_agent_rf_source_ready;                                                         // m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_comm_4_left_s0_agent:rf_source_ready
	wire          m1_clock_bridge_comm_4_left_s0_agent_rf_source_startofpacket;                                                 // m1_clock_bridge_comm_4_left_s0_agent:rf_source_startofpacket -> m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_comm_4_left_s0_agent_rf_source_endofpacket;                                                   // m1_clock_bridge_comm_4_left_s0_agent:rf_source_endofpacket -> m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_valid;                                                      // m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_comm_4_left_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_data;                                                       // m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_comm_4_left_s0_agent:rf_sink_data
	wire          m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_ready;                                                      // m1_clock_bridge_comm_4_left_s0_agent:rf_sink_ready -> m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_startofpacket;                                              // m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_comm_4_left_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_endofpacket;                                                // m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_comm_4_left_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_src_valid;                                                    // m1_clock_bridge_comm_4_left_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_src_data;                                                     // m1_clock_bridge_comm_4_left_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_src_ready;                                                    // m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_comm_4_left_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                                                                        // cmd_mux_008:src_valid -> m1_clock_bridge_comm_4_left_s0_agent:cp_valid
	wire  [401:0] cmd_mux_008_src_data;                                                                                         // cmd_mux_008:src_data -> m1_clock_bridge_comm_4_left_s0_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                                        // m1_clock_bridge_comm_4_left_s0_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [12:0] cmd_mux_008_src_channel;                                                                                      // cmd_mux_008:src_channel -> m1_clock_bridge_comm_4_left_s0_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                                                // cmd_mux_008:src_startofpacket -> m1_clock_bridge_comm_4_left_s0_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                                  // cmd_mux_008:src_endofpacket -> m1_clock_bridge_comm_4_left_s0_agent:cp_endofpacket
	wire  [255:0] m1_clock_bridge_comm_2_left_s0_agent_m0_readdata;                                                             // m1_clock_bridge_comm_2_left_s0_translator:uav_readdata -> m1_clock_bridge_comm_2_left_s0_agent:m0_readdata
	wire          m1_clock_bridge_comm_2_left_s0_agent_m0_waitrequest;                                                          // m1_clock_bridge_comm_2_left_s0_translator:uav_waitrequest -> m1_clock_bridge_comm_2_left_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_comm_2_left_s0_agent_m0_debugaccess;                                                          // m1_clock_bridge_comm_2_left_s0_agent:m0_debugaccess -> m1_clock_bridge_comm_2_left_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_comm_2_left_s0_agent_m0_address;                                                              // m1_clock_bridge_comm_2_left_s0_agent:m0_address -> m1_clock_bridge_comm_2_left_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_comm_2_left_s0_agent_m0_byteenable;                                                           // m1_clock_bridge_comm_2_left_s0_agent:m0_byteenable -> m1_clock_bridge_comm_2_left_s0_translator:uav_byteenable
	wire          m1_clock_bridge_comm_2_left_s0_agent_m0_read;                                                                 // m1_clock_bridge_comm_2_left_s0_agent:m0_read -> m1_clock_bridge_comm_2_left_s0_translator:uav_read
	wire          m1_clock_bridge_comm_2_left_s0_agent_m0_readdatavalid;                                                        // m1_clock_bridge_comm_2_left_s0_translator:uav_readdatavalid -> m1_clock_bridge_comm_2_left_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_comm_2_left_s0_agent_m0_lock;                                                                 // m1_clock_bridge_comm_2_left_s0_agent:m0_lock -> m1_clock_bridge_comm_2_left_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_comm_2_left_s0_agent_m0_writedata;                                                            // m1_clock_bridge_comm_2_left_s0_agent:m0_writedata -> m1_clock_bridge_comm_2_left_s0_translator:uav_writedata
	wire          m1_clock_bridge_comm_2_left_s0_agent_m0_write;                                                                // m1_clock_bridge_comm_2_left_s0_agent:m0_write -> m1_clock_bridge_comm_2_left_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_comm_2_left_s0_agent_m0_burstcount;                                                           // m1_clock_bridge_comm_2_left_s0_agent:m0_burstcount -> m1_clock_bridge_comm_2_left_s0_translator:uav_burstcount
	wire          m1_clock_bridge_comm_2_left_s0_agent_rf_source_valid;                                                         // m1_clock_bridge_comm_2_left_s0_agent:rf_source_valid -> m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_comm_2_left_s0_agent_rf_source_data;                                                          // m1_clock_bridge_comm_2_left_s0_agent:rf_source_data -> m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_comm_2_left_s0_agent_rf_source_ready;                                                         // m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_comm_2_left_s0_agent:rf_source_ready
	wire          m1_clock_bridge_comm_2_left_s0_agent_rf_source_startofpacket;                                                 // m1_clock_bridge_comm_2_left_s0_agent:rf_source_startofpacket -> m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_comm_2_left_s0_agent_rf_source_endofpacket;                                                   // m1_clock_bridge_comm_2_left_s0_agent:rf_source_endofpacket -> m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_valid;                                                      // m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_comm_2_left_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_data;                                                       // m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_comm_2_left_s0_agent:rf_sink_data
	wire          m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_ready;                                                      // m1_clock_bridge_comm_2_left_s0_agent:rf_sink_ready -> m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_startofpacket;                                              // m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_comm_2_left_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_endofpacket;                                                // m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_comm_2_left_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_src_valid;                                                    // m1_clock_bridge_comm_2_left_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_src_data;                                                     // m1_clock_bridge_comm_2_left_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_src_ready;                                                    // m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_comm_2_left_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                                                        // cmd_mux_009:src_valid -> m1_clock_bridge_comm_2_left_s0_agent:cp_valid
	wire  [401:0] cmd_mux_009_src_data;                                                                                         // cmd_mux_009:src_data -> m1_clock_bridge_comm_2_left_s0_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                                        // m1_clock_bridge_comm_2_left_s0_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [12:0] cmd_mux_009_src_channel;                                                                                      // cmd_mux_009:src_channel -> m1_clock_bridge_comm_2_left_s0_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                                                // cmd_mux_009:src_startofpacket -> m1_clock_bridge_comm_2_left_s0_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                                  // cmd_mux_009:src_endofpacket -> m1_clock_bridge_comm_2_left_s0_agent:cp_endofpacket
	wire  [255:0] m1_clock_bridge_comm_1_left_s0_agent_m0_readdata;                                                             // m1_clock_bridge_comm_1_left_s0_translator:uav_readdata -> m1_clock_bridge_comm_1_left_s0_agent:m0_readdata
	wire          m1_clock_bridge_comm_1_left_s0_agent_m0_waitrequest;                                                          // m1_clock_bridge_comm_1_left_s0_translator:uav_waitrequest -> m1_clock_bridge_comm_1_left_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_comm_1_left_s0_agent_m0_debugaccess;                                                          // m1_clock_bridge_comm_1_left_s0_agent:m0_debugaccess -> m1_clock_bridge_comm_1_left_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_comm_1_left_s0_agent_m0_address;                                                              // m1_clock_bridge_comm_1_left_s0_agent:m0_address -> m1_clock_bridge_comm_1_left_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_comm_1_left_s0_agent_m0_byteenable;                                                           // m1_clock_bridge_comm_1_left_s0_agent:m0_byteenable -> m1_clock_bridge_comm_1_left_s0_translator:uav_byteenable
	wire          m1_clock_bridge_comm_1_left_s0_agent_m0_read;                                                                 // m1_clock_bridge_comm_1_left_s0_agent:m0_read -> m1_clock_bridge_comm_1_left_s0_translator:uav_read
	wire          m1_clock_bridge_comm_1_left_s0_agent_m0_readdatavalid;                                                        // m1_clock_bridge_comm_1_left_s0_translator:uav_readdatavalid -> m1_clock_bridge_comm_1_left_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_comm_1_left_s0_agent_m0_lock;                                                                 // m1_clock_bridge_comm_1_left_s0_agent:m0_lock -> m1_clock_bridge_comm_1_left_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_comm_1_left_s0_agent_m0_writedata;                                                            // m1_clock_bridge_comm_1_left_s0_agent:m0_writedata -> m1_clock_bridge_comm_1_left_s0_translator:uav_writedata
	wire          m1_clock_bridge_comm_1_left_s0_agent_m0_write;                                                                // m1_clock_bridge_comm_1_left_s0_agent:m0_write -> m1_clock_bridge_comm_1_left_s0_translator:uav_write
	wire    [5:0] m1_clock_bridge_comm_1_left_s0_agent_m0_burstcount;                                                           // m1_clock_bridge_comm_1_left_s0_agent:m0_burstcount -> m1_clock_bridge_comm_1_left_s0_translator:uav_burstcount
	wire          m1_clock_bridge_comm_1_left_s0_agent_rf_source_valid;                                                         // m1_clock_bridge_comm_1_left_s0_agent:rf_source_valid -> m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:in_valid
	wire  [402:0] m1_clock_bridge_comm_1_left_s0_agent_rf_source_data;                                                          // m1_clock_bridge_comm_1_left_s0_agent:rf_source_data -> m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_comm_1_left_s0_agent_rf_source_ready;                                                         // m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_comm_1_left_s0_agent:rf_source_ready
	wire          m1_clock_bridge_comm_1_left_s0_agent_rf_source_startofpacket;                                                 // m1_clock_bridge_comm_1_left_s0_agent:rf_source_startofpacket -> m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_comm_1_left_s0_agent_rf_source_endofpacket;                                                   // m1_clock_bridge_comm_1_left_s0_agent:rf_source_endofpacket -> m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_valid;                                                      // m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_comm_1_left_s0_agent:rf_sink_valid
	wire  [402:0] m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_data;                                                       // m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_comm_1_left_s0_agent:rf_sink_data
	wire          m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_ready;                                                      // m1_clock_bridge_comm_1_left_s0_agent:rf_sink_ready -> m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_startofpacket;                                              // m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_comm_1_left_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_endofpacket;                                                // m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_comm_1_left_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_src_valid;                                                    // m1_clock_bridge_comm_1_left_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_src_data;                                                     // m1_clock_bridge_comm_1_left_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_src_ready;                                                    // m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_comm_1_left_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_valid;                                                                                        // cmd_mux_010:src_valid -> m1_clock_bridge_comm_1_left_s0_agent:cp_valid
	wire  [401:0] cmd_mux_010_src_data;                                                                                         // cmd_mux_010:src_data -> m1_clock_bridge_comm_1_left_s0_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                                        // m1_clock_bridge_comm_1_left_s0_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [12:0] cmd_mux_010_src_channel;                                                                                      // cmd_mux_010:src_channel -> m1_clock_bridge_comm_1_left_s0_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                                                // cmd_mux_010:src_startofpacket -> m1_clock_bridge_comm_1_left_s0_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                                  // cmd_mux_010:src_endofpacket -> m1_clock_bridge_comm_1_left_s0_agent:cp_endofpacket
	wire          ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_valid;                                                  // FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:cp_valid -> router:sink_valid
	wire  [131:0] ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_data;                                                   // FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:cp_data -> router:sink_data
	wire          ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_ready;                                                  // router:sink_ready -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:cp_ready
	wire          ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_startofpacket;                                          // FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:cp_startofpacket -> router:sink_startofpacket
	wire          ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_endofpacket;                                            // FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:cp_endofpacket -> router:sink_endofpacket
	wire          ftdi_umft601a_module_avalon_master_data_agent_cp_valid;                                                       // FTDI_UMFT601A_Module_avalon_master_data_agent:cp_valid -> router_001:sink_valid
	wire  [401:0] ftdi_umft601a_module_avalon_master_data_agent_cp_data;                                                        // FTDI_UMFT601A_Module_avalon_master_data_agent:cp_data -> router_001:sink_data
	wire          ftdi_umft601a_module_avalon_master_data_agent_cp_ready;                                                       // router_001:sink_ready -> FTDI_UMFT601A_Module_avalon_master_data_agent:cp_ready
	wire          ftdi_umft601a_module_avalon_master_data_agent_cp_startofpacket;                                               // FTDI_UMFT601A_Module_avalon_master_data_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          ftdi_umft601a_module_avalon_master_data_agent_cp_endofpacket;                                                 // FTDI_UMFT601A_Module_avalon_master_data_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                                         // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [401:0] router_001_src_data;                                                                                          // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                                         // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [12:0] router_001_src_channel;                                                                                       // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                                                 // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                                   // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          memory_filler_avalon_master_data_agent_cp_valid;                                                              // Memory_Filler_avalon_master_data_agent:cp_valid -> router_002:sink_valid
	wire  [401:0] memory_filler_avalon_master_data_agent_cp_data;                                                               // Memory_Filler_avalon_master_data_agent:cp_data -> router_002:sink_data
	wire          memory_filler_avalon_master_data_agent_cp_ready;                                                              // router_002:sink_ready -> Memory_Filler_avalon_master_data_agent:cp_ready
	wire          memory_filler_avalon_master_data_agent_cp_startofpacket;                                                      // Memory_Filler_avalon_master_data_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          memory_filler_avalon_master_data_agent_cp_endofpacket;                                                        // Memory_Filler_avalon_master_data_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                                         // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [401:0] router_002_src_data;                                                                                          // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                                         // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [12:0] router_002_src_channel;                                                                                       // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                                                 // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                                   // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_valid;                                      // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:cp_valid -> router_003:sink_valid
	wire  [401:0] communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_data;                                       // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:cp_data -> router_003:sink_data
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_ready;                                      // router_003:sink_ready -> Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:cp_ready
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_startofpacket;                              // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_endofpacket;                                // Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                         // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [401:0] router_003_src_data;                                                                                          // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                                         // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [12:0] router_003_src_channel;                                                                                       // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                                                 // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                                   // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_valid;                                      // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:cp_valid -> router_004:sink_valid
	wire  [401:0] communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_data;                                       // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:cp_data -> router_004:sink_data
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_ready;                                      // router_004:sink_ready -> Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:cp_ready
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_startofpacket;                              // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_endofpacket;                                // Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                         // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [401:0] router_004_src_data;                                                                                          // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                                         // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [12:0] router_004_src_channel;                                                                                       // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                                                 // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                                   // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_valid;                                      // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:cp_valid -> router_005:sink_valid
	wire  [401:0] communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_data;                                       // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:cp_data -> router_005:sink_data
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_ready;                                      // router_005:sink_ready -> Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:cp_ready
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_startofpacket;                              // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_endofpacket;                                // Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                         // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [401:0] router_005_src_data;                                                                                          // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                                                         // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [12:0] router_005_src_channel;                                                                                       // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                                                 // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                                   // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_valid;                                      // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:cp_valid -> router_006:sink_valid
	wire  [401:0] communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_data;                                       // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:cp_data -> router_006:sink_data
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_ready;                                      // router_006:sink_ready -> Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:cp_ready
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_startofpacket;                              // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_endofpacket;                                // Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                         // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [401:0] router_006_src_data;                                                                                          // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                                                         // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [12:0] router_006_src_channel;                                                                                       // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                                                 // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                                   // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_valid;                                     // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:cp_valid -> router_007:sink_valid
	wire  [401:0] communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_data;                                      // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:cp_data -> router_007:sink_data
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_ready;                                     // router_007:sink_ready -> Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:cp_ready
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_startofpacket;                             // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_endofpacket;                               // Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                         // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [401:0] router_007_src_data;                                                                                          // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                                                         // cmd_demux_007:sink_ready -> router_007:src_ready
	wire   [12:0] router_007_src_channel;                                                                                       // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                                                 // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                                   // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_valid;                                     // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:cp_valid -> router_008:sink_valid
	wire  [401:0] communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_data;                                      // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:cp_data -> router_008:sink_data
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_ready;                                     // router_008:sink_ready -> Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:cp_ready
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_startofpacket;                             // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:cp_startofpacket -> router_008:sink_startofpacket
	wire          communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_endofpacket;                               // Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_agent:cp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                                         // router_008:src_valid -> cmd_demux_008:sink_valid
	wire  [401:0] router_008_src_data;                                                                                          // router_008:src_data -> cmd_demux_008:sink_data
	wire          router_008_src_ready;                                                                                         // cmd_demux_008:sink_ready -> router_008:src_ready
	wire   [12:0] router_008_src_channel;                                                                                       // router_008:src_channel -> cmd_demux_008:sink_channel
	wire          router_008_src_startofpacket;                                                                                 // router_008:src_startofpacket -> cmd_demux_008:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                                   // router_008:src_endofpacket -> cmd_demux_008:sink_endofpacket
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_valid;                                     // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:cp_valid -> router_009:sink_valid
	wire  [401:0] communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_data;                                      // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:cp_data -> router_009:sink_data
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_ready;                                     // router_009:sink_ready -> Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:cp_ready
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_startofpacket;                             // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:cp_startofpacket -> router_009:sink_startofpacket
	wire          communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_endofpacket;                               // Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_agent:cp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                                         // router_009:src_valid -> cmd_demux_009:sink_valid
	wire  [401:0] router_009_src_data;                                                                                          // router_009:src_data -> cmd_demux_009:sink_data
	wire          router_009_src_ready;                                                                                         // cmd_demux_009:sink_ready -> router_009:src_ready
	wire   [12:0] router_009_src_channel;                                                                                       // router_009:src_channel -> cmd_demux_009:sink_channel
	wire          router_009_src_startofpacket;                                                                                 // router_009:src_startofpacket -> cmd_demux_009:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                                   // router_009:src_endofpacket -> cmd_demux_009:sink_endofpacket
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_valid;                                     // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:cp_valid -> router_010:sink_valid
	wire  [401:0] communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_data;                                      // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:cp_data -> router_010:sink_data
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_ready;                                     // router_010:sink_ready -> Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:cp_ready
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_startofpacket;                             // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:cp_startofpacket -> router_010:sink_startofpacket
	wire          communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_endofpacket;                               // Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_agent:cp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                         // router_010:src_valid -> cmd_demux_010:sink_valid
	wire  [401:0] router_010_src_data;                                                                                          // router_010:src_data -> cmd_demux_010:sink_data
	wire          router_010_src_ready;                                                                                         // cmd_demux_010:sink_ready -> router_010:src_ready
	wire   [12:0] router_010_src_channel;                                                                                       // router_010:src_channel -> cmd_demux_010:sink_channel
	wire          router_010_src_startofpacket;                                                                                 // router_010:src_startofpacket -> cmd_demux_010:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                                   // router_010:src_endofpacket -> cmd_demux_010:sink_endofpacket
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_valid;                                                  // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:cp_valid -> router_011:sink_valid
	wire  [122:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_data;                                                   // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:cp_data -> router_011:sink_data
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_ready;                                                  // router_011:sink_ready -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:cp_ready
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_startofpacket;                                          // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:cp_startofpacket -> router_011:sink_startofpacket
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_endofpacket;                                            // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:cp_endofpacket -> router_011:sink_endofpacket
	wire          ddr2_address_span_extender_expanded_master_agent_cp_valid;                                                    // ddr2_address_span_extender_expanded_master_agent:cp_valid -> router_012:sink_valid
	wire  [149:0] ddr2_address_span_extender_expanded_master_agent_cp_data;                                                     // ddr2_address_span_extender_expanded_master_agent:cp_data -> router_012:sink_data
	wire          ddr2_address_span_extender_expanded_master_agent_cp_ready;                                                    // router_012:sink_ready -> ddr2_address_span_extender_expanded_master_agent:cp_ready
	wire          ddr2_address_span_extender_expanded_master_agent_cp_startofpacket;                                            // ddr2_address_span_extender_expanded_master_agent:cp_startofpacket -> router_012:sink_startofpacket
	wire          ddr2_address_span_extender_expanded_master_agent_cp_endofpacket;                                              // ddr2_address_span_extender_expanded_master_agent:cp_endofpacket -> router_012:sink_endofpacket
	wire          m2_ddr2_memory_avl_agent_rp_valid;                                                                            // m2_ddr2_memory_avl_agent:rp_valid -> router_013:sink_valid
	wire  [401:0] m2_ddr2_memory_avl_agent_rp_data;                                                                             // m2_ddr2_memory_avl_agent:rp_data -> router_013:sink_data
	wire          m2_ddr2_memory_avl_agent_rp_ready;                                                                            // router_013:sink_ready -> m2_ddr2_memory_avl_agent:rp_ready
	wire          m2_ddr2_memory_avl_agent_rp_startofpacket;                                                                    // m2_ddr2_memory_avl_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          m2_ddr2_memory_avl_agent_rp_endofpacket;                                                                      // m2_ddr2_memory_avl_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                                         // router_013:src_valid -> rsp_demux:sink_valid
	wire  [401:0] router_013_src_data;                                                                                          // router_013:src_data -> rsp_demux:sink_data
	wire          router_013_src_ready;                                                                                         // rsp_demux:sink_ready -> router_013:src_ready
	wire   [12:0] router_013_src_channel;                                                                                       // router_013:src_channel -> rsp_demux:sink_channel
	wire          router_013_src_startofpacket;                                                                                 // router_013:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                                   // router_013:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          m1_clock_bridge_ftdi_s0_agent_rp_valid;                                                                       // m1_clock_bridge_ftdi_s0_agent:rp_valid -> router_014:sink_valid
	wire  [401:0] m1_clock_bridge_ftdi_s0_agent_rp_data;                                                                        // m1_clock_bridge_ftdi_s0_agent:rp_data -> router_014:sink_data
	wire          m1_clock_bridge_ftdi_s0_agent_rp_ready;                                                                       // router_014:sink_ready -> m1_clock_bridge_ftdi_s0_agent:rp_ready
	wire          m1_clock_bridge_ftdi_s0_agent_rp_startofpacket;                                                               // m1_clock_bridge_ftdi_s0_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          m1_clock_bridge_ftdi_s0_agent_rp_endofpacket;                                                                 // m1_clock_bridge_ftdi_s0_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                                         // router_014:src_valid -> rsp_demux_001:sink_valid
	wire  [401:0] router_014_src_data;                                                                                          // router_014:src_data -> rsp_demux_001:sink_data
	wire          router_014_src_ready;                                                                                         // rsp_demux_001:sink_ready -> router_014:src_ready
	wire   [12:0] router_014_src_channel;                                                                                       // router_014:src_channel -> rsp_demux_001:sink_channel
	wire          router_014_src_startofpacket;                                                                                 // router_014:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                                   // router_014:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          m1_clock_bridge_general_s0_agent_rp_valid;                                                                    // m1_clock_bridge_general_s0_agent:rp_valid -> router_015:sink_valid
	wire  [401:0] m1_clock_bridge_general_s0_agent_rp_data;                                                                     // m1_clock_bridge_general_s0_agent:rp_data -> router_015:sink_data
	wire          m1_clock_bridge_general_s0_agent_rp_ready;                                                                    // router_015:sink_ready -> m1_clock_bridge_general_s0_agent:rp_ready
	wire          m1_clock_bridge_general_s0_agent_rp_startofpacket;                                                            // m1_clock_bridge_general_s0_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          m1_clock_bridge_general_s0_agent_rp_endofpacket;                                                              // m1_clock_bridge_general_s0_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                                         // router_015:src_valid -> rsp_demux_002:sink_valid
	wire  [401:0] router_015_src_data;                                                                                          // router_015:src_data -> rsp_demux_002:sink_data
	wire          router_015_src_ready;                                                                                         // rsp_demux_002:sink_ready -> router_015:src_ready
	wire   [12:0] router_015_src_channel;                                                                                       // router_015:src_channel -> rsp_demux_002:sink_channel
	wire          router_015_src_startofpacket;                                                                                 // router_015:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                                   // router_015:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          m1_clock_bridge_comm_3_right_s0_agent_rp_valid;                                                               // m1_clock_bridge_comm_3_right_s0_agent:rp_valid -> router_016:sink_valid
	wire  [401:0] m1_clock_bridge_comm_3_right_s0_agent_rp_data;                                                                // m1_clock_bridge_comm_3_right_s0_agent:rp_data -> router_016:sink_data
	wire          m1_clock_bridge_comm_3_right_s0_agent_rp_ready;                                                               // router_016:sink_ready -> m1_clock_bridge_comm_3_right_s0_agent:rp_ready
	wire          m1_clock_bridge_comm_3_right_s0_agent_rp_startofpacket;                                                       // m1_clock_bridge_comm_3_right_s0_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          m1_clock_bridge_comm_3_right_s0_agent_rp_endofpacket;                                                         // m1_clock_bridge_comm_3_right_s0_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                                         // router_016:src_valid -> rsp_demux_003:sink_valid
	wire  [401:0] router_016_src_data;                                                                                          // router_016:src_data -> rsp_demux_003:sink_data
	wire          router_016_src_ready;                                                                                         // rsp_demux_003:sink_ready -> router_016:src_ready
	wire   [12:0] router_016_src_channel;                                                                                       // router_016:src_channel -> rsp_demux_003:sink_channel
	wire          router_016_src_startofpacket;                                                                                 // router_016:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                                   // router_016:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          m1_clock_bridge_comm_4_right_s0_agent_rp_valid;                                                               // m1_clock_bridge_comm_4_right_s0_agent:rp_valid -> router_017:sink_valid
	wire  [401:0] m1_clock_bridge_comm_4_right_s0_agent_rp_data;                                                                // m1_clock_bridge_comm_4_right_s0_agent:rp_data -> router_017:sink_data
	wire          m1_clock_bridge_comm_4_right_s0_agent_rp_ready;                                                               // router_017:sink_ready -> m1_clock_bridge_comm_4_right_s0_agent:rp_ready
	wire          m1_clock_bridge_comm_4_right_s0_agent_rp_startofpacket;                                                       // m1_clock_bridge_comm_4_right_s0_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          m1_clock_bridge_comm_4_right_s0_agent_rp_endofpacket;                                                         // m1_clock_bridge_comm_4_right_s0_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                                         // router_017:src_valid -> rsp_demux_004:sink_valid
	wire  [401:0] router_017_src_data;                                                                                          // router_017:src_data -> rsp_demux_004:sink_data
	wire          router_017_src_ready;                                                                                         // rsp_demux_004:sink_ready -> router_017:src_ready
	wire   [12:0] router_017_src_channel;                                                                                       // router_017:src_channel -> rsp_demux_004:sink_channel
	wire          router_017_src_startofpacket;                                                                                 // router_017:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                                   // router_017:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          m1_clock_bridge_comm_2_right_s0_agent_rp_valid;                                                               // m1_clock_bridge_comm_2_right_s0_agent:rp_valid -> router_018:sink_valid
	wire  [401:0] m1_clock_bridge_comm_2_right_s0_agent_rp_data;                                                                // m1_clock_bridge_comm_2_right_s0_agent:rp_data -> router_018:sink_data
	wire          m1_clock_bridge_comm_2_right_s0_agent_rp_ready;                                                               // router_018:sink_ready -> m1_clock_bridge_comm_2_right_s0_agent:rp_ready
	wire          m1_clock_bridge_comm_2_right_s0_agent_rp_startofpacket;                                                       // m1_clock_bridge_comm_2_right_s0_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          m1_clock_bridge_comm_2_right_s0_agent_rp_endofpacket;                                                         // m1_clock_bridge_comm_2_right_s0_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                                         // router_018:src_valid -> rsp_demux_005:sink_valid
	wire  [401:0] router_018_src_data;                                                                                          // router_018:src_data -> rsp_demux_005:sink_data
	wire          router_018_src_ready;                                                                                         // rsp_demux_005:sink_ready -> router_018:src_ready
	wire   [12:0] router_018_src_channel;                                                                                       // router_018:src_channel -> rsp_demux_005:sink_channel
	wire          router_018_src_startofpacket;                                                                                 // router_018:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                                   // router_018:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          m1_clock_bridge_comm_1_right_s0_agent_rp_valid;                                                               // m1_clock_bridge_comm_1_right_s0_agent:rp_valid -> router_019:sink_valid
	wire  [401:0] m1_clock_bridge_comm_1_right_s0_agent_rp_data;                                                                // m1_clock_bridge_comm_1_right_s0_agent:rp_data -> router_019:sink_data
	wire          m1_clock_bridge_comm_1_right_s0_agent_rp_ready;                                                               // router_019:sink_ready -> m1_clock_bridge_comm_1_right_s0_agent:rp_ready
	wire          m1_clock_bridge_comm_1_right_s0_agent_rp_startofpacket;                                                       // m1_clock_bridge_comm_1_right_s0_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          m1_clock_bridge_comm_1_right_s0_agent_rp_endofpacket;                                                         // m1_clock_bridge_comm_1_right_s0_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                                         // router_019:src_valid -> rsp_demux_006:sink_valid
	wire  [401:0] router_019_src_data;                                                                                          // router_019:src_data -> rsp_demux_006:sink_data
	wire          router_019_src_ready;                                                                                         // rsp_demux_006:sink_ready -> router_019:src_ready
	wire   [12:0] router_019_src_channel;                                                                                       // router_019:src_channel -> rsp_demux_006:sink_channel
	wire          router_019_src_startofpacket;                                                                                 // router_019:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                                   // router_019:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          m1_clock_bridge_comm_3_left_s0_agent_rp_valid;                                                                // m1_clock_bridge_comm_3_left_s0_agent:rp_valid -> router_020:sink_valid
	wire  [401:0] m1_clock_bridge_comm_3_left_s0_agent_rp_data;                                                                 // m1_clock_bridge_comm_3_left_s0_agent:rp_data -> router_020:sink_data
	wire          m1_clock_bridge_comm_3_left_s0_agent_rp_ready;                                                                // router_020:sink_ready -> m1_clock_bridge_comm_3_left_s0_agent:rp_ready
	wire          m1_clock_bridge_comm_3_left_s0_agent_rp_startofpacket;                                                        // m1_clock_bridge_comm_3_left_s0_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          m1_clock_bridge_comm_3_left_s0_agent_rp_endofpacket;                                                          // m1_clock_bridge_comm_3_left_s0_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                                         // router_020:src_valid -> rsp_demux_007:sink_valid
	wire  [401:0] router_020_src_data;                                                                                          // router_020:src_data -> rsp_demux_007:sink_data
	wire          router_020_src_ready;                                                                                         // rsp_demux_007:sink_ready -> router_020:src_ready
	wire   [12:0] router_020_src_channel;                                                                                       // router_020:src_channel -> rsp_demux_007:sink_channel
	wire          router_020_src_startofpacket;                                                                                 // router_020:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                                   // router_020:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          m1_clock_bridge_comm_4_left_s0_agent_rp_valid;                                                                // m1_clock_bridge_comm_4_left_s0_agent:rp_valid -> router_021:sink_valid
	wire  [401:0] m1_clock_bridge_comm_4_left_s0_agent_rp_data;                                                                 // m1_clock_bridge_comm_4_left_s0_agent:rp_data -> router_021:sink_data
	wire          m1_clock_bridge_comm_4_left_s0_agent_rp_ready;                                                                // router_021:sink_ready -> m1_clock_bridge_comm_4_left_s0_agent:rp_ready
	wire          m1_clock_bridge_comm_4_left_s0_agent_rp_startofpacket;                                                        // m1_clock_bridge_comm_4_left_s0_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          m1_clock_bridge_comm_4_left_s0_agent_rp_endofpacket;                                                          // m1_clock_bridge_comm_4_left_s0_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                                         // router_021:src_valid -> rsp_demux_008:sink_valid
	wire  [401:0] router_021_src_data;                                                                                          // router_021:src_data -> rsp_demux_008:sink_data
	wire          router_021_src_ready;                                                                                         // rsp_demux_008:sink_ready -> router_021:src_ready
	wire   [12:0] router_021_src_channel;                                                                                       // router_021:src_channel -> rsp_demux_008:sink_channel
	wire          router_021_src_startofpacket;                                                                                 // router_021:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                                   // router_021:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          m1_clock_bridge_comm_2_left_s0_agent_rp_valid;                                                                // m1_clock_bridge_comm_2_left_s0_agent:rp_valid -> router_022:sink_valid
	wire  [401:0] m1_clock_bridge_comm_2_left_s0_agent_rp_data;                                                                 // m1_clock_bridge_comm_2_left_s0_agent:rp_data -> router_022:sink_data
	wire          m1_clock_bridge_comm_2_left_s0_agent_rp_ready;                                                                // router_022:sink_ready -> m1_clock_bridge_comm_2_left_s0_agent:rp_ready
	wire          m1_clock_bridge_comm_2_left_s0_agent_rp_startofpacket;                                                        // m1_clock_bridge_comm_2_left_s0_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          m1_clock_bridge_comm_2_left_s0_agent_rp_endofpacket;                                                          // m1_clock_bridge_comm_2_left_s0_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                                         // router_022:src_valid -> rsp_demux_009:sink_valid
	wire  [401:0] router_022_src_data;                                                                                          // router_022:src_data -> rsp_demux_009:sink_data
	wire          router_022_src_ready;                                                                                         // rsp_demux_009:sink_ready -> router_022:src_ready
	wire   [12:0] router_022_src_channel;                                                                                       // router_022:src_channel -> rsp_demux_009:sink_channel
	wire          router_022_src_startofpacket;                                                                                 // router_022:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                                   // router_022:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          m1_clock_bridge_comm_1_left_s0_agent_rp_valid;                                                                // m1_clock_bridge_comm_1_left_s0_agent:rp_valid -> router_023:sink_valid
	wire  [401:0] m1_clock_bridge_comm_1_left_s0_agent_rp_data;                                                                 // m1_clock_bridge_comm_1_left_s0_agent:rp_data -> router_023:sink_data
	wire          m1_clock_bridge_comm_1_left_s0_agent_rp_ready;                                                                // router_023:sink_ready -> m1_clock_bridge_comm_1_left_s0_agent:rp_ready
	wire          m1_clock_bridge_comm_1_left_s0_agent_rp_startofpacket;                                                        // m1_clock_bridge_comm_1_left_s0_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          m1_clock_bridge_comm_1_left_s0_agent_rp_endofpacket;                                                          // m1_clock_bridge_comm_1_left_s0_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                                         // router_023:src_valid -> rsp_demux_010:sink_valid
	wire  [401:0] router_023_src_data;                                                                                          // router_023:src_data -> rsp_demux_010:sink_data
	wire          router_023_src_ready;                                                                                         // rsp_demux_010:sink_ready -> router_023:src_ready
	wire   [12:0] router_023_src_channel;                                                                                       // router_023:src_channel -> rsp_demux_010:sink_channel
	wire          router_023_src_startofpacket;                                                                                 // router_023:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                                   // router_023:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_012_src_valid;                                                                                         // router_012:src_valid -> ddr2_address_span_extender_expanded_master_limiter:cmd_sink_valid
	wire  [149:0] router_012_src_data;                                                                                          // router_012:src_data -> ddr2_address_span_extender_expanded_master_limiter:cmd_sink_data
	wire          router_012_src_ready;                                                                                         // ddr2_address_span_extender_expanded_master_limiter:cmd_sink_ready -> router_012:src_ready
	wire   [12:0] router_012_src_channel;                                                                                       // router_012:src_channel -> ddr2_address_span_extender_expanded_master_limiter:cmd_sink_channel
	wire          router_012_src_startofpacket;                                                                                 // router_012:src_startofpacket -> ddr2_address_span_extender_expanded_master_limiter:cmd_sink_startofpacket
	wire          router_012_src_endofpacket;                                                                                   // router_012:src_endofpacket -> ddr2_address_span_extender_expanded_master_limiter:cmd_sink_endofpacket
	wire          ddr2_address_span_extender_expanded_master_limiter_rsp_src_valid;                                             // ddr2_address_span_extender_expanded_master_limiter:rsp_src_valid -> ddr2_address_span_extender_expanded_master_agent:rp_valid
	wire  [149:0] ddr2_address_span_extender_expanded_master_limiter_rsp_src_data;                                              // ddr2_address_span_extender_expanded_master_limiter:rsp_src_data -> ddr2_address_span_extender_expanded_master_agent:rp_data
	wire          ddr2_address_span_extender_expanded_master_limiter_rsp_src_ready;                                             // ddr2_address_span_extender_expanded_master_agent:rp_ready -> ddr2_address_span_extender_expanded_master_limiter:rsp_src_ready
	wire   [12:0] ddr2_address_span_extender_expanded_master_limiter_rsp_src_channel;                                           // ddr2_address_span_extender_expanded_master_limiter:rsp_src_channel -> ddr2_address_span_extender_expanded_master_agent:rp_channel
	wire          ddr2_address_span_extender_expanded_master_limiter_rsp_src_startofpacket;                                     // ddr2_address_span_extender_expanded_master_limiter:rsp_src_startofpacket -> ddr2_address_span_extender_expanded_master_agent:rp_startofpacket
	wire          ddr2_address_span_extender_expanded_master_limiter_rsp_src_endofpacket;                                       // ddr2_address_span_extender_expanded_master_limiter:rsp_src_endofpacket -> ddr2_address_span_extender_expanded_master_agent:rp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                        // cmd_mux_002:src_valid -> m1_clock_bridge_general_s0_burst_adapter:sink0_valid
	wire  [401:0] cmd_mux_002_src_data;                                                                                         // cmd_mux_002:src_data -> m1_clock_bridge_general_s0_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                                        // m1_clock_bridge_general_s0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [12:0] cmd_mux_002_src_channel;                                                                                      // cmd_mux_002:src_channel -> m1_clock_bridge_general_s0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                                                // cmd_mux_002:src_startofpacket -> m1_clock_bridge_general_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                                  // cmd_mux_002:src_endofpacket -> m1_clock_bridge_general_s0_burst_adapter:sink0_endofpacket
	wire          m1_clock_bridge_general_s0_burst_adapter_source0_valid;                                                       // m1_clock_bridge_general_s0_burst_adapter:source0_valid -> m1_clock_bridge_general_s0_agent:cp_valid
	wire  [401:0] m1_clock_bridge_general_s0_burst_adapter_source0_data;                                                        // m1_clock_bridge_general_s0_burst_adapter:source0_data -> m1_clock_bridge_general_s0_agent:cp_data
	wire          m1_clock_bridge_general_s0_burst_adapter_source0_ready;                                                       // m1_clock_bridge_general_s0_agent:cp_ready -> m1_clock_bridge_general_s0_burst_adapter:source0_ready
	wire   [12:0] m1_clock_bridge_general_s0_burst_adapter_source0_channel;                                                     // m1_clock_bridge_general_s0_burst_adapter:source0_channel -> m1_clock_bridge_general_s0_agent:cp_channel
	wire          m1_clock_bridge_general_s0_burst_adapter_source0_startofpacket;                                               // m1_clock_bridge_general_s0_burst_adapter:source0_startofpacket -> m1_clock_bridge_general_s0_agent:cp_startofpacket
	wire          m1_clock_bridge_general_s0_burst_adapter_source0_endofpacket;                                                 // m1_clock_bridge_general_s0_burst_adapter:source0_endofpacket -> m1_clock_bridge_general_s0_agent:cp_endofpacket
	wire          rsp_mux_src_valid;                                                                                            // rsp_mux:src_valid -> FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:in_valid
	wire  [401:0] rsp_mux_src_data;                                                                                             // rsp_mux:src_data -> FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                                                                            // FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire   [12:0] rsp_mux_src_channel;                                                                                          // rsp_mux:src_channel -> FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                                                                    // rsp_mux:src_startofpacket -> FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                                      // rsp_mux:src_endofpacket -> FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:in_endofpacket
	wire          ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_valid;                                     // FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:out_valid -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:rp_valid
	wire  [131:0] ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_data;                                      // FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:out_data -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:rp_data
	wire          ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_ready;                                     // FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:rp_ready -> FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:out_ready
	wire   [12:0] ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_channel;                                   // FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:out_channel -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:rp_channel
	wire          ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_startofpacket;                             // FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:out_startofpacket -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:rp_startofpacket
	wire          ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_endofpacket;                               // FTDI_UMFT601A_Module_avalon_imgt_master_data_rsp_width_adapter:out_endofpacket -> FTDI_UMFT601A_Module_avalon_imgt_master_data_agent:rp_endofpacket
	wire          rsp_mux_011_src_valid;                                                                                        // rsp_mux_011:src_valid -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:in_valid
	wire  [401:0] rsp_mux_011_src_data;                                                                                         // rsp_mux_011:src_data -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:in_data
	wire          rsp_mux_011_src_ready;                                                                                        // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:in_ready -> rsp_mux_011:src_ready
	wire   [12:0] rsp_mux_011_src_channel;                                                                                      // rsp_mux_011:src_channel -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:in_channel
	wire          rsp_mux_011_src_startofpacket;                                                                                // rsp_mux_011:src_startofpacket -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_011_src_endofpacket;                                                                                  // rsp_mux_011:src_endofpacket -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:in_endofpacket
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_valid;                                     // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:out_valid -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:rp_valid
	wire  [122:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_data;                                      // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:out_data -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:rp_data
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_ready;                                     // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:rp_ready -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:out_ready
	wire   [12:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_channel;                                   // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:out_channel -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:rp_channel
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_startofpacket;                             // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:out_startofpacket -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:rp_startofpacket
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_endofpacket;                               // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter:out_endofpacket -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent:rp_endofpacket
	wire          router_src_valid;                                                                                             // router:src_valid -> FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:in_valid
	wire  [131:0] router_src_data;                                                                                              // router:src_data -> FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:in_data
	wire          router_src_ready;                                                                                             // FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:in_ready -> router:src_ready
	wire   [12:0] router_src_channel;                                                                                           // router:src_channel -> FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:in_channel
	wire          router_src_startofpacket;                                                                                     // router:src_startofpacket -> FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:in_startofpacket
	wire          router_src_endofpacket;                                                                                       // router:src_endofpacket -> FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:in_endofpacket
	wire          ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_valid;                                     // FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [401:0] ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_data;                                      // FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_ready;                                     // cmd_demux:sink_ready -> FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:out_ready
	wire   [12:0] ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_channel;                                   // FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_startofpacket;                             // FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_endofpacket;                               // FTDI_UMFT601A_Module_avalon_imgt_master_data_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_011_src_valid;                                                                                         // router_011:src_valid -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:in_valid
	wire  [122:0] router_011_src_data;                                                                                          // router_011:src_data -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:in_data
	wire          router_011_src_ready;                                                                                         // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:in_ready -> router_011:src_ready
	wire   [12:0] router_011_src_channel;                                                                                       // router_011:src_channel -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:in_channel
	wire          router_011_src_startofpacket;                                                                                 // router_011:src_startofpacket -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:in_startofpacket
	wire          router_011_src_endofpacket;                                                                                   // router_011:src_endofpacket -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:in_endofpacket
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_valid;                                     // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:out_valid -> cmd_demux_011:sink_valid
	wire  [401:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_data;                                      // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:out_data -> cmd_demux_011:sink_data
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_ready;                                     // cmd_demux_011:sink_ready -> rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:out_ready
	wire   [12:0] rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_channel;                                   // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:out_channel -> cmd_demux_011:sink_channel
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_startofpacket;                             // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:out_startofpacket -> cmd_demux_011:sink_startofpacket
	wire          rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_endofpacket;                               // rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter:out_endofpacket -> cmd_demux_011:sink_endofpacket
	wire    [0:0] ddr2_address_span_extender_expanded_master_limiter_cmd_src_valid;                                             // ddr2_address_span_extender_expanded_master_limiter:cmd_src_valid -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_valid
	wire  [149:0] ddr2_address_span_extender_expanded_master_limiter_cmd_src_data;                                              // ddr2_address_span_extender_expanded_master_limiter:cmd_src_data -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_data
	wire          ddr2_address_span_extender_expanded_master_limiter_cmd_src_ready;                                             // ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_ready -> ddr2_address_span_extender_expanded_master_limiter:cmd_src_ready
	wire   [12:0] ddr2_address_span_extender_expanded_master_limiter_cmd_src_channel;                                           // ddr2_address_span_extender_expanded_master_limiter:cmd_src_channel -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_channel
	wire          ddr2_address_span_extender_expanded_master_limiter_cmd_src_startofpacket;                                     // ddr2_address_span_extender_expanded_master_limiter:cmd_src_startofpacket -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_startofpacket
	wire          ddr2_address_span_extender_expanded_master_limiter_cmd_src_endofpacket;                                       // ddr2_address_span_extender_expanded_master_limiter:cmd_src_endofpacket -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_endofpacket
	wire          ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_valid;                                       // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_valid -> cmd_demux_012:sink_valid
	wire  [401:0] ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_data;                                        // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_data -> cmd_demux_012:sink_data
	wire          ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_ready;                                       // cmd_demux_012:sink_ready -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_ready
	wire   [12:0] ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_channel;                                     // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_channel -> cmd_demux_012:sink_channel
	wire          ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_startofpacket;                               // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_startofpacket -> cmd_demux_012:sink_startofpacket
	wire          ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_endofpacket;                                 // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_endofpacket -> cmd_demux_012:sink_endofpacket
	wire          rsp_mux_012_src_valid;                                                                                        // rsp_mux_012:src_valid -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_valid
	wire  [401:0] rsp_mux_012_src_data;                                                                                         // rsp_mux_012:src_data -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_data
	wire          rsp_mux_012_src_ready;                                                                                        // ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_ready -> rsp_mux_012:src_ready
	wire   [12:0] rsp_mux_012_src_channel;                                                                                      // rsp_mux_012:src_channel -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_channel
	wire          rsp_mux_012_src_startofpacket;                                                                                // rsp_mux_012:src_startofpacket -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_012_src_endofpacket;                                                                                  // rsp_mux_012:src_endofpacket -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_endofpacket
	wire          ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_valid;                                       // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_valid -> ddr2_address_span_extender_expanded_master_limiter:rsp_sink_valid
	wire  [149:0] ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_data;                                        // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_data -> ddr2_address_span_extender_expanded_master_limiter:rsp_sink_data
	wire          ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_ready;                                       // ddr2_address_span_extender_expanded_master_limiter:rsp_sink_ready -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_ready
	wire   [12:0] ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_channel;                                     // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_channel -> ddr2_address_span_extender_expanded_master_limiter:rsp_sink_channel
	wire          ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_startofpacket;                               // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_startofpacket -> ddr2_address_span_extender_expanded_master_limiter:rsp_sink_startofpacket
	wire          ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_endofpacket;                                 // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_endofpacket -> ddr2_address_span_extender_expanded_master_limiter:rsp_sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                                         // cmd_demux:src0_valid -> crosser:in_valid
	wire  [401:0] cmd_demux_src0_data;                                                                                          // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                                         // crosser:in_ready -> cmd_demux:src0_ready
	wire   [12:0] cmd_demux_src0_channel;                                                                                       // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                                 // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                                   // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                                            // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [401:0] crosser_out_data;                                                                                             // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                                            // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [12:0] crosser_out_channel;                                                                                          // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                                    // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                                      // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                                         // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [401:0] cmd_demux_src1_data;                                                                                          // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                                                         // crosser_001:in_ready -> cmd_demux:src1_ready
	wire   [12:0] cmd_demux_src1_channel;                                                                                       // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                                 // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                                   // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                                        // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [401:0] crosser_001_out_data;                                                                                         // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                                                        // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [12:0] crosser_001_out_channel;                                                                                      // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                                                                // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                                  // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                                     // cmd_demux_001:src0_valid -> crosser_002:in_valid
	wire  [401:0] cmd_demux_001_src0_data;                                                                                      // cmd_demux_001:src0_data -> crosser_002:in_data
	wire          cmd_demux_001_src0_ready;                                                                                     // crosser_002:in_ready -> cmd_demux_001:src0_ready
	wire   [12:0] cmd_demux_001_src0_channel;                                                                                   // cmd_demux_001:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                             // cmd_demux_001:src0_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                               // cmd_demux_001:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                                        // crosser_002:out_valid -> cmd_mux:sink1_valid
	wire  [401:0] crosser_002_out_data;                                                                                         // crosser_002:out_data -> cmd_mux:sink1_data
	wire          crosser_002_out_ready;                                                                                        // cmd_mux:sink1_ready -> crosser_002:out_ready
	wire   [12:0] crosser_002_out_channel;                                                                                      // crosser_002:out_channel -> cmd_mux:sink1_channel
	wire          crosser_002_out_startofpacket;                                                                                // crosser_002:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                                                                  // crosser_002:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                                     // cmd_demux_001:src1_valid -> crosser_003:in_valid
	wire  [401:0] cmd_demux_001_src1_data;                                                                                      // cmd_demux_001:src1_data -> crosser_003:in_data
	wire          cmd_demux_001_src1_ready;                                                                                     // crosser_003:in_ready -> cmd_demux_001:src1_ready
	wire   [12:0] cmd_demux_001_src1_channel;                                                                                   // cmd_demux_001:src1_channel -> crosser_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                             // cmd_demux_001:src1_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                               // cmd_demux_001:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                                        // crosser_003:out_valid -> cmd_mux_001:sink1_valid
	wire  [401:0] crosser_003_out_data;                                                                                         // crosser_003:out_data -> cmd_mux_001:sink1_data
	wire          crosser_003_out_ready;                                                                                        // cmd_mux_001:sink1_ready -> crosser_003:out_ready
	wire   [12:0] crosser_003_out_channel;                                                                                      // crosser_003:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_003_out_startofpacket;                                                                                // crosser_003:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                                                                  // crosser_003:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                                     // cmd_demux_002:src0_valid -> crosser_004:in_valid
	wire  [401:0] cmd_demux_002_src0_data;                                                                                      // cmd_demux_002:src0_data -> crosser_004:in_data
	wire          cmd_demux_002_src0_ready;                                                                                     // crosser_004:in_ready -> cmd_demux_002:src0_ready
	wire   [12:0] cmd_demux_002_src0_channel;                                                                                   // cmd_demux_002:src0_channel -> crosser_004:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                             // cmd_demux_002:src0_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                               // cmd_demux_002:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                                        // crosser_004:out_valid -> cmd_mux:sink2_valid
	wire  [401:0] crosser_004_out_data;                                                                                         // crosser_004:out_data -> cmd_mux:sink2_data
	wire          crosser_004_out_ready;                                                                                        // cmd_mux:sink2_ready -> crosser_004:out_ready
	wire   [12:0] crosser_004_out_channel;                                                                                      // crosser_004:out_channel -> cmd_mux:sink2_channel
	wire          crosser_004_out_startofpacket;                                                                                // crosser_004:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_004_out_endofpacket;                                                                                  // crosser_004:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                                     // cmd_demux_002:src1_valid -> crosser_005:in_valid
	wire  [401:0] cmd_demux_002_src1_data;                                                                                      // cmd_demux_002:src1_data -> crosser_005:in_data
	wire          cmd_demux_002_src1_ready;                                                                                     // crosser_005:in_ready -> cmd_demux_002:src1_ready
	wire   [12:0] cmd_demux_002_src1_channel;                                                                                   // cmd_demux_002:src1_channel -> crosser_005:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                                                             // cmd_demux_002:src1_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                                               // cmd_demux_002:src1_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                                        // crosser_005:out_valid -> cmd_mux_002:sink0_valid
	wire  [401:0] crosser_005_out_data;                                                                                         // crosser_005:out_data -> cmd_mux_002:sink0_data
	wire          crosser_005_out_ready;                                                                                        // cmd_mux_002:sink0_ready -> crosser_005:out_ready
	wire   [12:0] crosser_005_out_channel;                                                                                      // crosser_005:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_005_out_startofpacket;                                                                                // crosser_005:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                                                  // crosser_005:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                                     // cmd_demux_003:src0_valid -> crosser_006:in_valid
	wire  [401:0] cmd_demux_003_src0_data;                                                                                      // cmd_demux_003:src0_data -> crosser_006:in_data
	wire          cmd_demux_003_src0_ready;                                                                                     // crosser_006:in_ready -> cmd_demux_003:src0_ready
	wire   [12:0] cmd_demux_003_src0_channel;                                                                                   // cmd_demux_003:src0_channel -> crosser_006:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                                                             // cmd_demux_003:src0_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                                               // cmd_demux_003:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                                        // crosser_006:out_valid -> cmd_mux:sink3_valid
	wire  [401:0] crosser_006_out_data;                                                                                         // crosser_006:out_data -> cmd_mux:sink3_data
	wire          crosser_006_out_ready;                                                                                        // cmd_mux:sink3_ready -> crosser_006:out_ready
	wire   [12:0] crosser_006_out_channel;                                                                                      // crosser_006:out_channel -> cmd_mux:sink3_channel
	wire          crosser_006_out_startofpacket;                                                                                // crosser_006:out_startofpacket -> cmd_mux:sink3_startofpacket
	wire          crosser_006_out_endofpacket;                                                                                  // crosser_006:out_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                                     // cmd_demux_003:src1_valid -> crosser_007:in_valid
	wire  [401:0] cmd_demux_003_src1_data;                                                                                      // cmd_demux_003:src1_data -> crosser_007:in_data
	wire          cmd_demux_003_src1_ready;                                                                                     // crosser_007:in_ready -> cmd_demux_003:src1_ready
	wire   [12:0] cmd_demux_003_src1_channel;                                                                                   // cmd_demux_003:src1_channel -> crosser_007:in_channel
	wire          cmd_demux_003_src1_startofpacket;                                                                             // cmd_demux_003:src1_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                                               // cmd_demux_003:src1_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                                        // crosser_007:out_valid -> cmd_mux_010:sink0_valid
	wire  [401:0] crosser_007_out_data;                                                                                         // crosser_007:out_data -> cmd_mux_010:sink0_data
	wire          crosser_007_out_ready;                                                                                        // cmd_mux_010:sink0_ready -> crosser_007:out_ready
	wire   [12:0] crosser_007_out_channel;                                                                                      // crosser_007:out_channel -> cmd_mux_010:sink0_channel
	wire          crosser_007_out_startofpacket;                                                                                // crosser_007:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                                                                  // crosser_007:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                                     // cmd_demux_004:src0_valid -> crosser_008:in_valid
	wire  [401:0] cmd_demux_004_src0_data;                                                                                      // cmd_demux_004:src0_data -> crosser_008:in_data
	wire          cmd_demux_004_src0_ready;                                                                                     // crosser_008:in_ready -> cmd_demux_004:src0_ready
	wire   [12:0] cmd_demux_004_src0_channel;                                                                                   // cmd_demux_004:src0_channel -> crosser_008:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                                                             // cmd_demux_004:src0_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                                               // cmd_demux_004:src0_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                                                        // crosser_008:out_valid -> cmd_mux:sink4_valid
	wire  [401:0] crosser_008_out_data;                                                                                         // crosser_008:out_data -> cmd_mux:sink4_data
	wire          crosser_008_out_ready;                                                                                        // cmd_mux:sink4_ready -> crosser_008:out_ready
	wire   [12:0] crosser_008_out_channel;                                                                                      // crosser_008:out_channel -> cmd_mux:sink4_channel
	wire          crosser_008_out_startofpacket;                                                                                // crosser_008:out_startofpacket -> cmd_mux:sink4_startofpacket
	wire          crosser_008_out_endofpacket;                                                                                  // crosser_008:out_endofpacket -> cmd_mux:sink4_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                                     // cmd_demux_004:src1_valid -> crosser_009:in_valid
	wire  [401:0] cmd_demux_004_src1_data;                                                                                      // cmd_demux_004:src1_data -> crosser_009:in_data
	wire          cmd_demux_004_src1_ready;                                                                                     // crosser_009:in_ready -> cmd_demux_004:src1_ready
	wire   [12:0] cmd_demux_004_src1_channel;                                                                                   // cmd_demux_004:src1_channel -> crosser_009:in_channel
	wire          cmd_demux_004_src1_startofpacket;                                                                             // cmd_demux_004:src1_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                                               // cmd_demux_004:src1_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                                                        // crosser_009:out_valid -> cmd_mux_009:sink0_valid
	wire  [401:0] crosser_009_out_data;                                                                                         // crosser_009:out_data -> cmd_mux_009:sink0_data
	wire          crosser_009_out_ready;                                                                                        // cmd_mux_009:sink0_ready -> crosser_009:out_ready
	wire   [12:0] crosser_009_out_channel;                                                                                      // crosser_009:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_009_out_startofpacket;                                                                                // crosser_009:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_009_out_endofpacket;                                                                                  // crosser_009:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                                     // cmd_demux_005:src0_valid -> crosser_010:in_valid
	wire  [401:0] cmd_demux_005_src0_data;                                                                                      // cmd_demux_005:src0_data -> crosser_010:in_data
	wire          cmd_demux_005_src0_ready;                                                                                     // crosser_010:in_ready -> cmd_demux_005:src0_ready
	wire   [12:0] cmd_demux_005_src0_channel;                                                                                   // cmd_demux_005:src0_channel -> crosser_010:in_channel
	wire          cmd_demux_005_src0_startofpacket;                                                                             // cmd_demux_005:src0_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                                               // cmd_demux_005:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                                                        // crosser_010:out_valid -> cmd_mux:sink5_valid
	wire  [401:0] crosser_010_out_data;                                                                                         // crosser_010:out_data -> cmd_mux:sink5_data
	wire          crosser_010_out_ready;                                                                                        // cmd_mux:sink5_ready -> crosser_010:out_ready
	wire   [12:0] crosser_010_out_channel;                                                                                      // crosser_010:out_channel -> cmd_mux:sink5_channel
	wire          crosser_010_out_startofpacket;                                                                                // crosser_010:out_startofpacket -> cmd_mux:sink5_startofpacket
	wire          crosser_010_out_endofpacket;                                                                                  // crosser_010:out_endofpacket -> cmd_mux:sink5_endofpacket
	wire          cmd_demux_005_src1_valid;                                                                                     // cmd_demux_005:src1_valid -> crosser_011:in_valid
	wire  [401:0] cmd_demux_005_src1_data;                                                                                      // cmd_demux_005:src1_data -> crosser_011:in_data
	wire          cmd_demux_005_src1_ready;                                                                                     // crosser_011:in_ready -> cmd_demux_005:src1_ready
	wire   [12:0] cmd_demux_005_src1_channel;                                                                                   // cmd_demux_005:src1_channel -> crosser_011:in_channel
	wire          cmd_demux_005_src1_startofpacket;                                                                             // cmd_demux_005:src1_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                                               // cmd_demux_005:src1_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                                                        // crosser_011:out_valid -> cmd_mux_008:sink0_valid
	wire  [401:0] crosser_011_out_data;                                                                                         // crosser_011:out_data -> cmd_mux_008:sink0_data
	wire          crosser_011_out_ready;                                                                                        // cmd_mux_008:sink0_ready -> crosser_011:out_ready
	wire   [12:0] crosser_011_out_channel;                                                                                      // crosser_011:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_011_out_startofpacket;                                                                                // crosser_011:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_011_out_endofpacket;                                                                                  // crosser_011:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                                     // cmd_demux_006:src0_valid -> crosser_012:in_valid
	wire  [401:0] cmd_demux_006_src0_data;                                                                                      // cmd_demux_006:src0_data -> crosser_012:in_data
	wire          cmd_demux_006_src0_ready;                                                                                     // crosser_012:in_ready -> cmd_demux_006:src0_ready
	wire   [12:0] cmd_demux_006_src0_channel;                                                                                   // cmd_demux_006:src0_channel -> crosser_012:in_channel
	wire          cmd_demux_006_src0_startofpacket;                                                                             // cmd_demux_006:src0_startofpacket -> crosser_012:in_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                                               // cmd_demux_006:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                                                        // crosser_012:out_valid -> cmd_mux:sink6_valid
	wire  [401:0] crosser_012_out_data;                                                                                         // crosser_012:out_data -> cmd_mux:sink6_data
	wire          crosser_012_out_ready;                                                                                        // cmd_mux:sink6_ready -> crosser_012:out_ready
	wire   [12:0] crosser_012_out_channel;                                                                                      // crosser_012:out_channel -> cmd_mux:sink6_channel
	wire          crosser_012_out_startofpacket;                                                                                // crosser_012:out_startofpacket -> cmd_mux:sink6_startofpacket
	wire          crosser_012_out_endofpacket;                                                                                  // crosser_012:out_endofpacket -> cmd_mux:sink6_endofpacket
	wire          cmd_demux_006_src1_valid;                                                                                     // cmd_demux_006:src1_valid -> crosser_013:in_valid
	wire  [401:0] cmd_demux_006_src1_data;                                                                                      // cmd_demux_006:src1_data -> crosser_013:in_data
	wire          cmd_demux_006_src1_ready;                                                                                     // crosser_013:in_ready -> cmd_demux_006:src1_ready
	wire   [12:0] cmd_demux_006_src1_channel;                                                                                   // cmd_demux_006:src1_channel -> crosser_013:in_channel
	wire          cmd_demux_006_src1_startofpacket;                                                                             // cmd_demux_006:src1_startofpacket -> crosser_013:in_startofpacket
	wire          cmd_demux_006_src1_endofpacket;                                                                               // cmd_demux_006:src1_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                                                        // crosser_013:out_valid -> cmd_mux_007:sink0_valid
	wire  [401:0] crosser_013_out_data;                                                                                         // crosser_013:out_data -> cmd_mux_007:sink0_data
	wire          crosser_013_out_ready;                                                                                        // cmd_mux_007:sink0_ready -> crosser_013:out_ready
	wire   [12:0] crosser_013_out_channel;                                                                                      // crosser_013:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_013_out_startofpacket;                                                                                // crosser_013:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                                                                  // crosser_013:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                                     // cmd_demux_007:src0_valid -> crosser_014:in_valid
	wire  [401:0] cmd_demux_007_src0_data;                                                                                      // cmd_demux_007:src0_data -> crosser_014:in_data
	wire          cmd_demux_007_src0_ready;                                                                                     // crosser_014:in_ready -> cmd_demux_007:src0_ready
	wire   [12:0] cmd_demux_007_src0_channel;                                                                                   // cmd_demux_007:src0_channel -> crosser_014:in_channel
	wire          cmd_demux_007_src0_startofpacket;                                                                             // cmd_demux_007:src0_startofpacket -> crosser_014:in_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                                               // cmd_demux_007:src0_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                                                        // crosser_014:out_valid -> cmd_mux:sink7_valid
	wire  [401:0] crosser_014_out_data;                                                                                         // crosser_014:out_data -> cmd_mux:sink7_data
	wire          crosser_014_out_ready;                                                                                        // cmd_mux:sink7_ready -> crosser_014:out_ready
	wire   [12:0] crosser_014_out_channel;                                                                                      // crosser_014:out_channel -> cmd_mux:sink7_channel
	wire          crosser_014_out_startofpacket;                                                                                // crosser_014:out_startofpacket -> cmd_mux:sink7_startofpacket
	wire          crosser_014_out_endofpacket;                                                                                  // crosser_014:out_endofpacket -> cmd_mux:sink7_endofpacket
	wire          cmd_demux_007_src1_valid;                                                                                     // cmd_demux_007:src1_valid -> crosser_015:in_valid
	wire  [401:0] cmd_demux_007_src1_data;                                                                                      // cmd_demux_007:src1_data -> crosser_015:in_data
	wire          cmd_demux_007_src1_ready;                                                                                     // crosser_015:in_ready -> cmd_demux_007:src1_ready
	wire   [12:0] cmd_demux_007_src1_channel;                                                                                   // cmd_demux_007:src1_channel -> crosser_015:in_channel
	wire          cmd_demux_007_src1_startofpacket;                                                                             // cmd_demux_007:src1_startofpacket -> crosser_015:in_startofpacket
	wire          cmd_demux_007_src1_endofpacket;                                                                               // cmd_demux_007:src1_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                                                        // crosser_015:out_valid -> cmd_mux_006:sink0_valid
	wire  [401:0] crosser_015_out_data;                                                                                         // crosser_015:out_data -> cmd_mux_006:sink0_data
	wire          crosser_015_out_ready;                                                                                        // cmd_mux_006:sink0_ready -> crosser_015:out_ready
	wire   [12:0] crosser_015_out_channel;                                                                                      // crosser_015:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_015_out_startofpacket;                                                                                // crosser_015:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_015_out_endofpacket;                                                                                  // crosser_015:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_008_src0_valid;                                                                                     // cmd_demux_008:src0_valid -> crosser_016:in_valid
	wire  [401:0] cmd_demux_008_src0_data;                                                                                      // cmd_demux_008:src0_data -> crosser_016:in_data
	wire          cmd_demux_008_src0_ready;                                                                                     // crosser_016:in_ready -> cmd_demux_008:src0_ready
	wire   [12:0] cmd_demux_008_src0_channel;                                                                                   // cmd_demux_008:src0_channel -> crosser_016:in_channel
	wire          cmd_demux_008_src0_startofpacket;                                                                             // cmd_demux_008:src0_startofpacket -> crosser_016:in_startofpacket
	wire          cmd_demux_008_src0_endofpacket;                                                                               // cmd_demux_008:src0_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                                                        // crosser_016:out_valid -> cmd_mux:sink8_valid
	wire  [401:0] crosser_016_out_data;                                                                                         // crosser_016:out_data -> cmd_mux:sink8_data
	wire          crosser_016_out_ready;                                                                                        // cmd_mux:sink8_ready -> crosser_016:out_ready
	wire   [12:0] crosser_016_out_channel;                                                                                      // crosser_016:out_channel -> cmd_mux:sink8_channel
	wire          crosser_016_out_startofpacket;                                                                                // crosser_016:out_startofpacket -> cmd_mux:sink8_startofpacket
	wire          crosser_016_out_endofpacket;                                                                                  // crosser_016:out_endofpacket -> cmd_mux:sink8_endofpacket
	wire          cmd_demux_008_src1_valid;                                                                                     // cmd_demux_008:src1_valid -> crosser_017:in_valid
	wire  [401:0] cmd_demux_008_src1_data;                                                                                      // cmd_demux_008:src1_data -> crosser_017:in_data
	wire          cmd_demux_008_src1_ready;                                                                                     // crosser_017:in_ready -> cmd_demux_008:src1_ready
	wire   [12:0] cmd_demux_008_src1_channel;                                                                                   // cmd_demux_008:src1_channel -> crosser_017:in_channel
	wire          cmd_demux_008_src1_startofpacket;                                                                             // cmd_demux_008:src1_startofpacket -> crosser_017:in_startofpacket
	wire          cmd_demux_008_src1_endofpacket;                                                                               // cmd_demux_008:src1_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                                                        // crosser_017:out_valid -> cmd_mux_005:sink0_valid
	wire  [401:0] crosser_017_out_data;                                                                                         // crosser_017:out_data -> cmd_mux_005:sink0_data
	wire          crosser_017_out_ready;                                                                                        // cmd_mux_005:sink0_ready -> crosser_017:out_ready
	wire   [12:0] crosser_017_out_channel;                                                                                      // crosser_017:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_017_out_startofpacket;                                                                                // crosser_017:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_017_out_endofpacket;                                                                                  // crosser_017:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_009_src0_valid;                                                                                     // cmd_demux_009:src0_valid -> crosser_018:in_valid
	wire  [401:0] cmd_demux_009_src0_data;                                                                                      // cmd_demux_009:src0_data -> crosser_018:in_data
	wire          cmd_demux_009_src0_ready;                                                                                     // crosser_018:in_ready -> cmd_demux_009:src0_ready
	wire   [12:0] cmd_demux_009_src0_channel;                                                                                   // cmd_demux_009:src0_channel -> crosser_018:in_channel
	wire          cmd_demux_009_src0_startofpacket;                                                                             // cmd_demux_009:src0_startofpacket -> crosser_018:in_startofpacket
	wire          cmd_demux_009_src0_endofpacket;                                                                               // cmd_demux_009:src0_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                                                        // crosser_018:out_valid -> cmd_mux:sink9_valid
	wire  [401:0] crosser_018_out_data;                                                                                         // crosser_018:out_data -> cmd_mux:sink9_data
	wire          crosser_018_out_ready;                                                                                        // cmd_mux:sink9_ready -> crosser_018:out_ready
	wire   [12:0] crosser_018_out_channel;                                                                                      // crosser_018:out_channel -> cmd_mux:sink9_channel
	wire          crosser_018_out_startofpacket;                                                                                // crosser_018:out_startofpacket -> cmd_mux:sink9_startofpacket
	wire          crosser_018_out_endofpacket;                                                                                  // crosser_018:out_endofpacket -> cmd_mux:sink9_endofpacket
	wire          cmd_demux_009_src1_valid;                                                                                     // cmd_demux_009:src1_valid -> crosser_019:in_valid
	wire  [401:0] cmd_demux_009_src1_data;                                                                                      // cmd_demux_009:src1_data -> crosser_019:in_data
	wire          cmd_demux_009_src1_ready;                                                                                     // crosser_019:in_ready -> cmd_demux_009:src1_ready
	wire   [12:0] cmd_demux_009_src1_channel;                                                                                   // cmd_demux_009:src1_channel -> crosser_019:in_channel
	wire          cmd_demux_009_src1_startofpacket;                                                                             // cmd_demux_009:src1_startofpacket -> crosser_019:in_startofpacket
	wire          cmd_demux_009_src1_endofpacket;                                                                               // cmd_demux_009:src1_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                                                        // crosser_019:out_valid -> cmd_mux_004:sink0_valid
	wire  [401:0] crosser_019_out_data;                                                                                         // crosser_019:out_data -> cmd_mux_004:sink0_data
	wire          crosser_019_out_ready;                                                                                        // cmd_mux_004:sink0_ready -> crosser_019:out_ready
	wire   [12:0] crosser_019_out_channel;                                                                                      // crosser_019:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_019_out_startofpacket;                                                                                // crosser_019:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_019_out_endofpacket;                                                                                  // crosser_019:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_010_src0_valid;                                                                                     // cmd_demux_010:src0_valid -> crosser_020:in_valid
	wire  [401:0] cmd_demux_010_src0_data;                                                                                      // cmd_demux_010:src0_data -> crosser_020:in_data
	wire          cmd_demux_010_src0_ready;                                                                                     // crosser_020:in_ready -> cmd_demux_010:src0_ready
	wire   [12:0] cmd_demux_010_src0_channel;                                                                                   // cmd_demux_010:src0_channel -> crosser_020:in_channel
	wire          cmd_demux_010_src0_startofpacket;                                                                             // cmd_demux_010:src0_startofpacket -> crosser_020:in_startofpacket
	wire          cmd_demux_010_src0_endofpacket;                                                                               // cmd_demux_010:src0_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                                                                        // crosser_020:out_valid -> cmd_mux:sink10_valid
	wire  [401:0] crosser_020_out_data;                                                                                         // crosser_020:out_data -> cmd_mux:sink10_data
	wire          crosser_020_out_ready;                                                                                        // cmd_mux:sink10_ready -> crosser_020:out_ready
	wire   [12:0] crosser_020_out_channel;                                                                                      // crosser_020:out_channel -> cmd_mux:sink10_channel
	wire          crosser_020_out_startofpacket;                                                                                // crosser_020:out_startofpacket -> cmd_mux:sink10_startofpacket
	wire          crosser_020_out_endofpacket;                                                                                  // crosser_020:out_endofpacket -> cmd_mux:sink10_endofpacket
	wire          cmd_demux_010_src1_valid;                                                                                     // cmd_demux_010:src1_valid -> crosser_021:in_valid
	wire  [401:0] cmd_demux_010_src1_data;                                                                                      // cmd_demux_010:src1_data -> crosser_021:in_data
	wire          cmd_demux_010_src1_ready;                                                                                     // crosser_021:in_ready -> cmd_demux_010:src1_ready
	wire   [12:0] cmd_demux_010_src1_channel;                                                                                   // cmd_demux_010:src1_channel -> crosser_021:in_channel
	wire          cmd_demux_010_src1_startofpacket;                                                                             // cmd_demux_010:src1_startofpacket -> crosser_021:in_startofpacket
	wire          cmd_demux_010_src1_endofpacket;                                                                               // cmd_demux_010:src1_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                                                                        // crosser_021:out_valid -> cmd_mux_003:sink0_valid
	wire  [401:0] crosser_021_out_data;                                                                                         // crosser_021:out_data -> cmd_mux_003:sink0_data
	wire          crosser_021_out_ready;                                                                                        // cmd_mux_003:sink0_ready -> crosser_021:out_ready
	wire   [12:0] crosser_021_out_channel;                                                                                      // crosser_021:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_021_out_startofpacket;                                                                                // crosser_021:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_021_out_endofpacket;                                                                                  // crosser_021:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_011_src0_valid;                                                                                     // cmd_demux_011:src0_valid -> crosser_022:in_valid
	wire  [401:0] cmd_demux_011_src0_data;                                                                                      // cmd_demux_011:src0_data -> crosser_022:in_data
	wire          cmd_demux_011_src0_ready;                                                                                     // crosser_022:in_ready -> cmd_demux_011:src0_ready
	wire   [12:0] cmd_demux_011_src0_channel;                                                                                   // cmd_demux_011:src0_channel -> crosser_022:in_channel
	wire          cmd_demux_011_src0_startofpacket;                                                                             // cmd_demux_011:src0_startofpacket -> crosser_022:in_startofpacket
	wire          cmd_demux_011_src0_endofpacket;                                                                               // cmd_demux_011:src0_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                                                                        // crosser_022:out_valid -> cmd_mux:sink11_valid
	wire  [401:0] crosser_022_out_data;                                                                                         // crosser_022:out_data -> cmd_mux:sink11_data
	wire          crosser_022_out_ready;                                                                                        // cmd_mux:sink11_ready -> crosser_022:out_ready
	wire   [12:0] crosser_022_out_channel;                                                                                      // crosser_022:out_channel -> cmd_mux:sink11_channel
	wire          crosser_022_out_startofpacket;                                                                                // crosser_022:out_startofpacket -> cmd_mux:sink11_startofpacket
	wire          crosser_022_out_endofpacket;                                                                                  // crosser_022:out_endofpacket -> cmd_mux:sink11_endofpacket
	wire          cmd_demux_011_src1_valid;                                                                                     // cmd_demux_011:src1_valid -> crosser_023:in_valid
	wire  [401:0] cmd_demux_011_src1_data;                                                                                      // cmd_demux_011:src1_data -> crosser_023:in_data
	wire          cmd_demux_011_src1_ready;                                                                                     // crosser_023:in_ready -> cmd_demux_011:src1_ready
	wire   [12:0] cmd_demux_011_src1_channel;                                                                                   // cmd_demux_011:src1_channel -> crosser_023:in_channel
	wire          cmd_demux_011_src1_startofpacket;                                                                             // cmd_demux_011:src1_startofpacket -> crosser_023:in_startofpacket
	wire          cmd_demux_011_src1_endofpacket;                                                                               // cmd_demux_011:src1_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                                                                        // crosser_023:out_valid -> cmd_mux_002:sink1_valid
	wire  [401:0] crosser_023_out_data;                                                                                         // crosser_023:out_data -> cmd_mux_002:sink1_data
	wire          crosser_023_out_ready;                                                                                        // cmd_mux_002:sink1_ready -> crosser_023:out_ready
	wire   [12:0] crosser_023_out_channel;                                                                                      // crosser_023:out_channel -> cmd_mux_002:sink1_channel
	wire          crosser_023_out_startofpacket;                                                                                // crosser_023:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          crosser_023_out_endofpacket;                                                                                  // crosser_023:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_012_src0_valid;                                                                                     // cmd_demux_012:src0_valid -> crosser_024:in_valid
	wire  [401:0] cmd_demux_012_src0_data;                                                                                      // cmd_demux_012:src0_data -> crosser_024:in_data
	wire          cmd_demux_012_src0_ready;                                                                                     // crosser_024:in_ready -> cmd_demux_012:src0_ready
	wire   [12:0] cmd_demux_012_src0_channel;                                                                                   // cmd_demux_012:src0_channel -> crosser_024:in_channel
	wire          cmd_demux_012_src0_startofpacket;                                                                             // cmd_demux_012:src0_startofpacket -> crosser_024:in_startofpacket
	wire          cmd_demux_012_src0_endofpacket;                                                                               // cmd_demux_012:src0_endofpacket -> crosser_024:in_endofpacket
	wire          crosser_024_out_valid;                                                                                        // crosser_024:out_valid -> cmd_mux:sink12_valid
	wire  [401:0] crosser_024_out_data;                                                                                         // crosser_024:out_data -> cmd_mux:sink12_data
	wire          crosser_024_out_ready;                                                                                        // cmd_mux:sink12_ready -> crosser_024:out_ready
	wire   [12:0] crosser_024_out_channel;                                                                                      // crosser_024:out_channel -> cmd_mux:sink12_channel
	wire          crosser_024_out_startofpacket;                                                                                // crosser_024:out_startofpacket -> cmd_mux:sink12_startofpacket
	wire          crosser_024_out_endofpacket;                                                                                  // crosser_024:out_endofpacket -> cmd_mux:sink12_endofpacket
	wire          cmd_demux_012_src1_valid;                                                                                     // cmd_demux_012:src1_valid -> crosser_025:in_valid
	wire  [401:0] cmd_demux_012_src1_data;                                                                                      // cmd_demux_012:src1_data -> crosser_025:in_data
	wire          cmd_demux_012_src1_ready;                                                                                     // crosser_025:in_ready -> cmd_demux_012:src1_ready
	wire   [12:0] cmd_demux_012_src1_channel;                                                                                   // cmd_demux_012:src1_channel -> crosser_025:in_channel
	wire          cmd_demux_012_src1_startofpacket;                                                                             // cmd_demux_012:src1_startofpacket -> crosser_025:in_startofpacket
	wire          cmd_demux_012_src1_endofpacket;                                                                               // cmd_demux_012:src1_endofpacket -> crosser_025:in_endofpacket
	wire          crosser_025_out_valid;                                                                                        // crosser_025:out_valid -> cmd_mux_002:sink2_valid
	wire  [401:0] crosser_025_out_data;                                                                                         // crosser_025:out_data -> cmd_mux_002:sink2_data
	wire          crosser_025_out_ready;                                                                                        // cmd_mux_002:sink2_ready -> crosser_025:out_ready
	wire   [12:0] crosser_025_out_channel;                                                                                      // crosser_025:out_channel -> cmd_mux_002:sink2_channel
	wire          crosser_025_out_startofpacket;                                                                                // crosser_025:out_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          crosser_025_out_endofpacket;                                                                                  // crosser_025:out_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                                                         // rsp_demux:src0_valid -> crosser_026:in_valid
	wire  [401:0] rsp_demux_src0_data;                                                                                          // rsp_demux:src0_data -> crosser_026:in_data
	wire          rsp_demux_src0_ready;                                                                                         // crosser_026:in_ready -> rsp_demux:src0_ready
	wire   [12:0] rsp_demux_src0_channel;                                                                                       // rsp_demux:src0_channel -> crosser_026:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                                 // rsp_demux:src0_startofpacket -> crosser_026:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                                   // rsp_demux:src0_endofpacket -> crosser_026:in_endofpacket
	wire          crosser_026_out_valid;                                                                                        // crosser_026:out_valid -> rsp_mux:sink0_valid
	wire  [401:0] crosser_026_out_data;                                                                                         // crosser_026:out_data -> rsp_mux:sink0_data
	wire          crosser_026_out_ready;                                                                                        // rsp_mux:sink0_ready -> crosser_026:out_ready
	wire   [12:0] crosser_026_out_channel;                                                                                      // crosser_026:out_channel -> rsp_mux:sink0_channel
	wire          crosser_026_out_startofpacket;                                                                                // crosser_026:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_026_out_endofpacket;                                                                                  // crosser_026:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                                         // rsp_demux:src1_valid -> crosser_027:in_valid
	wire  [401:0] rsp_demux_src1_data;                                                                                          // rsp_demux:src1_data -> crosser_027:in_data
	wire          rsp_demux_src1_ready;                                                                                         // crosser_027:in_ready -> rsp_demux:src1_ready
	wire   [12:0] rsp_demux_src1_channel;                                                                                       // rsp_demux:src1_channel -> crosser_027:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                                 // rsp_demux:src1_startofpacket -> crosser_027:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                                   // rsp_demux:src1_endofpacket -> crosser_027:in_endofpacket
	wire          crosser_027_out_valid;                                                                                        // crosser_027:out_valid -> rsp_mux_001:sink0_valid
	wire  [401:0] crosser_027_out_data;                                                                                         // crosser_027:out_data -> rsp_mux_001:sink0_data
	wire          crosser_027_out_ready;                                                                                        // rsp_mux_001:sink0_ready -> crosser_027:out_ready
	wire   [12:0] crosser_027_out_channel;                                                                                      // crosser_027:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_027_out_startofpacket;                                                                                // crosser_027:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_027_out_endofpacket;                                                                                  // crosser_027:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                                         // rsp_demux:src2_valid -> crosser_028:in_valid
	wire  [401:0] rsp_demux_src2_data;                                                                                          // rsp_demux:src2_data -> crosser_028:in_data
	wire          rsp_demux_src2_ready;                                                                                         // crosser_028:in_ready -> rsp_demux:src2_ready
	wire   [12:0] rsp_demux_src2_channel;                                                                                       // rsp_demux:src2_channel -> crosser_028:in_channel
	wire          rsp_demux_src2_startofpacket;                                                                                 // rsp_demux:src2_startofpacket -> crosser_028:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                                   // rsp_demux:src2_endofpacket -> crosser_028:in_endofpacket
	wire          crosser_028_out_valid;                                                                                        // crosser_028:out_valid -> rsp_mux_002:sink0_valid
	wire  [401:0] crosser_028_out_data;                                                                                         // crosser_028:out_data -> rsp_mux_002:sink0_data
	wire          crosser_028_out_ready;                                                                                        // rsp_mux_002:sink0_ready -> crosser_028:out_ready
	wire   [12:0] crosser_028_out_channel;                                                                                      // crosser_028:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_028_out_startofpacket;                                                                                // crosser_028:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_028_out_endofpacket;                                                                                  // crosser_028:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                                         // rsp_demux:src3_valid -> crosser_029:in_valid
	wire  [401:0] rsp_demux_src3_data;                                                                                          // rsp_demux:src3_data -> crosser_029:in_data
	wire          rsp_demux_src3_ready;                                                                                         // crosser_029:in_ready -> rsp_demux:src3_ready
	wire   [12:0] rsp_demux_src3_channel;                                                                                       // rsp_demux:src3_channel -> crosser_029:in_channel
	wire          rsp_demux_src3_startofpacket;                                                                                 // rsp_demux:src3_startofpacket -> crosser_029:in_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                                                   // rsp_demux:src3_endofpacket -> crosser_029:in_endofpacket
	wire          crosser_029_out_valid;                                                                                        // crosser_029:out_valid -> rsp_mux_003:sink0_valid
	wire  [401:0] crosser_029_out_data;                                                                                         // crosser_029:out_data -> rsp_mux_003:sink0_data
	wire          crosser_029_out_ready;                                                                                        // rsp_mux_003:sink0_ready -> crosser_029:out_ready
	wire   [12:0] crosser_029_out_channel;                                                                                      // crosser_029:out_channel -> rsp_mux_003:sink0_channel
	wire          crosser_029_out_startofpacket;                                                                                // crosser_029:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          crosser_029_out_endofpacket;                                                                                  // crosser_029:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src4_valid;                                                                                         // rsp_demux:src4_valid -> crosser_030:in_valid
	wire  [401:0] rsp_demux_src4_data;                                                                                          // rsp_demux:src4_data -> crosser_030:in_data
	wire          rsp_demux_src4_ready;                                                                                         // crosser_030:in_ready -> rsp_demux:src4_ready
	wire   [12:0] rsp_demux_src4_channel;                                                                                       // rsp_demux:src4_channel -> crosser_030:in_channel
	wire          rsp_demux_src4_startofpacket;                                                                                 // rsp_demux:src4_startofpacket -> crosser_030:in_startofpacket
	wire          rsp_demux_src4_endofpacket;                                                                                   // rsp_demux:src4_endofpacket -> crosser_030:in_endofpacket
	wire          crosser_030_out_valid;                                                                                        // crosser_030:out_valid -> rsp_mux_004:sink0_valid
	wire  [401:0] crosser_030_out_data;                                                                                         // crosser_030:out_data -> rsp_mux_004:sink0_data
	wire          crosser_030_out_ready;                                                                                        // rsp_mux_004:sink0_ready -> crosser_030:out_ready
	wire   [12:0] crosser_030_out_channel;                                                                                      // crosser_030:out_channel -> rsp_mux_004:sink0_channel
	wire          crosser_030_out_startofpacket;                                                                                // crosser_030:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          crosser_030_out_endofpacket;                                                                                  // crosser_030:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_src5_valid;                                                                                         // rsp_demux:src5_valid -> crosser_031:in_valid
	wire  [401:0] rsp_demux_src5_data;                                                                                          // rsp_demux:src5_data -> crosser_031:in_data
	wire          rsp_demux_src5_ready;                                                                                         // crosser_031:in_ready -> rsp_demux:src5_ready
	wire   [12:0] rsp_demux_src5_channel;                                                                                       // rsp_demux:src5_channel -> crosser_031:in_channel
	wire          rsp_demux_src5_startofpacket;                                                                                 // rsp_demux:src5_startofpacket -> crosser_031:in_startofpacket
	wire          rsp_demux_src5_endofpacket;                                                                                   // rsp_demux:src5_endofpacket -> crosser_031:in_endofpacket
	wire          crosser_031_out_valid;                                                                                        // crosser_031:out_valid -> rsp_mux_005:sink0_valid
	wire  [401:0] crosser_031_out_data;                                                                                         // crosser_031:out_data -> rsp_mux_005:sink0_data
	wire          crosser_031_out_ready;                                                                                        // rsp_mux_005:sink0_ready -> crosser_031:out_ready
	wire   [12:0] crosser_031_out_channel;                                                                                      // crosser_031:out_channel -> rsp_mux_005:sink0_channel
	wire          crosser_031_out_startofpacket;                                                                                // crosser_031:out_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          crosser_031_out_endofpacket;                                                                                  // crosser_031:out_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_src6_valid;                                                                                         // rsp_demux:src6_valid -> crosser_032:in_valid
	wire  [401:0] rsp_demux_src6_data;                                                                                          // rsp_demux:src6_data -> crosser_032:in_data
	wire          rsp_demux_src6_ready;                                                                                         // crosser_032:in_ready -> rsp_demux:src6_ready
	wire   [12:0] rsp_demux_src6_channel;                                                                                       // rsp_demux:src6_channel -> crosser_032:in_channel
	wire          rsp_demux_src6_startofpacket;                                                                                 // rsp_demux:src6_startofpacket -> crosser_032:in_startofpacket
	wire          rsp_demux_src6_endofpacket;                                                                                   // rsp_demux:src6_endofpacket -> crosser_032:in_endofpacket
	wire          crosser_032_out_valid;                                                                                        // crosser_032:out_valid -> rsp_mux_006:sink0_valid
	wire  [401:0] crosser_032_out_data;                                                                                         // crosser_032:out_data -> rsp_mux_006:sink0_data
	wire          crosser_032_out_ready;                                                                                        // rsp_mux_006:sink0_ready -> crosser_032:out_ready
	wire   [12:0] crosser_032_out_channel;                                                                                      // crosser_032:out_channel -> rsp_mux_006:sink0_channel
	wire          crosser_032_out_startofpacket;                                                                                // crosser_032:out_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          crosser_032_out_endofpacket;                                                                                  // crosser_032:out_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_src7_valid;                                                                                         // rsp_demux:src7_valid -> crosser_033:in_valid
	wire  [401:0] rsp_demux_src7_data;                                                                                          // rsp_demux:src7_data -> crosser_033:in_data
	wire          rsp_demux_src7_ready;                                                                                         // crosser_033:in_ready -> rsp_demux:src7_ready
	wire   [12:0] rsp_demux_src7_channel;                                                                                       // rsp_demux:src7_channel -> crosser_033:in_channel
	wire          rsp_demux_src7_startofpacket;                                                                                 // rsp_demux:src7_startofpacket -> crosser_033:in_startofpacket
	wire          rsp_demux_src7_endofpacket;                                                                                   // rsp_demux:src7_endofpacket -> crosser_033:in_endofpacket
	wire          crosser_033_out_valid;                                                                                        // crosser_033:out_valid -> rsp_mux_007:sink0_valid
	wire  [401:0] crosser_033_out_data;                                                                                         // crosser_033:out_data -> rsp_mux_007:sink0_data
	wire          crosser_033_out_ready;                                                                                        // rsp_mux_007:sink0_ready -> crosser_033:out_ready
	wire   [12:0] crosser_033_out_channel;                                                                                      // crosser_033:out_channel -> rsp_mux_007:sink0_channel
	wire          crosser_033_out_startofpacket;                                                                                // crosser_033:out_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          crosser_033_out_endofpacket;                                                                                  // crosser_033:out_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_src8_valid;                                                                                         // rsp_demux:src8_valid -> crosser_034:in_valid
	wire  [401:0] rsp_demux_src8_data;                                                                                          // rsp_demux:src8_data -> crosser_034:in_data
	wire          rsp_demux_src8_ready;                                                                                         // crosser_034:in_ready -> rsp_demux:src8_ready
	wire   [12:0] rsp_demux_src8_channel;                                                                                       // rsp_demux:src8_channel -> crosser_034:in_channel
	wire          rsp_demux_src8_startofpacket;                                                                                 // rsp_demux:src8_startofpacket -> crosser_034:in_startofpacket
	wire          rsp_demux_src8_endofpacket;                                                                                   // rsp_demux:src8_endofpacket -> crosser_034:in_endofpacket
	wire          crosser_034_out_valid;                                                                                        // crosser_034:out_valid -> rsp_mux_008:sink0_valid
	wire  [401:0] crosser_034_out_data;                                                                                         // crosser_034:out_data -> rsp_mux_008:sink0_data
	wire          crosser_034_out_ready;                                                                                        // rsp_mux_008:sink0_ready -> crosser_034:out_ready
	wire   [12:0] crosser_034_out_channel;                                                                                      // crosser_034:out_channel -> rsp_mux_008:sink0_channel
	wire          crosser_034_out_startofpacket;                                                                                // crosser_034:out_startofpacket -> rsp_mux_008:sink0_startofpacket
	wire          crosser_034_out_endofpacket;                                                                                  // crosser_034:out_endofpacket -> rsp_mux_008:sink0_endofpacket
	wire          rsp_demux_src9_valid;                                                                                         // rsp_demux:src9_valid -> crosser_035:in_valid
	wire  [401:0] rsp_demux_src9_data;                                                                                          // rsp_demux:src9_data -> crosser_035:in_data
	wire          rsp_demux_src9_ready;                                                                                         // crosser_035:in_ready -> rsp_demux:src9_ready
	wire   [12:0] rsp_demux_src9_channel;                                                                                       // rsp_demux:src9_channel -> crosser_035:in_channel
	wire          rsp_demux_src9_startofpacket;                                                                                 // rsp_demux:src9_startofpacket -> crosser_035:in_startofpacket
	wire          rsp_demux_src9_endofpacket;                                                                                   // rsp_demux:src9_endofpacket -> crosser_035:in_endofpacket
	wire          crosser_035_out_valid;                                                                                        // crosser_035:out_valid -> rsp_mux_009:sink0_valid
	wire  [401:0] crosser_035_out_data;                                                                                         // crosser_035:out_data -> rsp_mux_009:sink0_data
	wire          crosser_035_out_ready;                                                                                        // rsp_mux_009:sink0_ready -> crosser_035:out_ready
	wire   [12:0] crosser_035_out_channel;                                                                                      // crosser_035:out_channel -> rsp_mux_009:sink0_channel
	wire          crosser_035_out_startofpacket;                                                                                // crosser_035:out_startofpacket -> rsp_mux_009:sink0_startofpacket
	wire          crosser_035_out_endofpacket;                                                                                  // crosser_035:out_endofpacket -> rsp_mux_009:sink0_endofpacket
	wire          rsp_demux_src10_valid;                                                                                        // rsp_demux:src10_valid -> crosser_036:in_valid
	wire  [401:0] rsp_demux_src10_data;                                                                                         // rsp_demux:src10_data -> crosser_036:in_data
	wire          rsp_demux_src10_ready;                                                                                        // crosser_036:in_ready -> rsp_demux:src10_ready
	wire   [12:0] rsp_demux_src10_channel;                                                                                      // rsp_demux:src10_channel -> crosser_036:in_channel
	wire          rsp_demux_src10_startofpacket;                                                                                // rsp_demux:src10_startofpacket -> crosser_036:in_startofpacket
	wire          rsp_demux_src10_endofpacket;                                                                                  // rsp_demux:src10_endofpacket -> crosser_036:in_endofpacket
	wire          crosser_036_out_valid;                                                                                        // crosser_036:out_valid -> rsp_mux_010:sink0_valid
	wire  [401:0] crosser_036_out_data;                                                                                         // crosser_036:out_data -> rsp_mux_010:sink0_data
	wire          crosser_036_out_ready;                                                                                        // rsp_mux_010:sink0_ready -> crosser_036:out_ready
	wire   [12:0] crosser_036_out_channel;                                                                                      // crosser_036:out_channel -> rsp_mux_010:sink0_channel
	wire          crosser_036_out_startofpacket;                                                                                // crosser_036:out_startofpacket -> rsp_mux_010:sink0_startofpacket
	wire          crosser_036_out_endofpacket;                                                                                  // crosser_036:out_endofpacket -> rsp_mux_010:sink0_endofpacket
	wire          rsp_demux_src11_valid;                                                                                        // rsp_demux:src11_valid -> crosser_037:in_valid
	wire  [401:0] rsp_demux_src11_data;                                                                                         // rsp_demux:src11_data -> crosser_037:in_data
	wire          rsp_demux_src11_ready;                                                                                        // crosser_037:in_ready -> rsp_demux:src11_ready
	wire   [12:0] rsp_demux_src11_channel;                                                                                      // rsp_demux:src11_channel -> crosser_037:in_channel
	wire          rsp_demux_src11_startofpacket;                                                                                // rsp_demux:src11_startofpacket -> crosser_037:in_startofpacket
	wire          rsp_demux_src11_endofpacket;                                                                                  // rsp_demux:src11_endofpacket -> crosser_037:in_endofpacket
	wire          crosser_037_out_valid;                                                                                        // crosser_037:out_valid -> rsp_mux_011:sink0_valid
	wire  [401:0] crosser_037_out_data;                                                                                         // crosser_037:out_data -> rsp_mux_011:sink0_data
	wire          crosser_037_out_ready;                                                                                        // rsp_mux_011:sink0_ready -> crosser_037:out_ready
	wire   [12:0] crosser_037_out_channel;                                                                                      // crosser_037:out_channel -> rsp_mux_011:sink0_channel
	wire          crosser_037_out_startofpacket;                                                                                // crosser_037:out_startofpacket -> rsp_mux_011:sink0_startofpacket
	wire          crosser_037_out_endofpacket;                                                                                  // crosser_037:out_endofpacket -> rsp_mux_011:sink0_endofpacket
	wire          rsp_demux_src12_valid;                                                                                        // rsp_demux:src12_valid -> crosser_038:in_valid
	wire  [401:0] rsp_demux_src12_data;                                                                                         // rsp_demux:src12_data -> crosser_038:in_data
	wire          rsp_demux_src12_ready;                                                                                        // crosser_038:in_ready -> rsp_demux:src12_ready
	wire   [12:0] rsp_demux_src12_channel;                                                                                      // rsp_demux:src12_channel -> crosser_038:in_channel
	wire          rsp_demux_src12_startofpacket;                                                                                // rsp_demux:src12_startofpacket -> crosser_038:in_startofpacket
	wire          rsp_demux_src12_endofpacket;                                                                                  // rsp_demux:src12_endofpacket -> crosser_038:in_endofpacket
	wire          crosser_038_out_valid;                                                                                        // crosser_038:out_valid -> rsp_mux_012:sink0_valid
	wire  [401:0] crosser_038_out_data;                                                                                         // crosser_038:out_data -> rsp_mux_012:sink0_data
	wire          crosser_038_out_ready;                                                                                        // rsp_mux_012:sink0_ready -> crosser_038:out_ready
	wire   [12:0] crosser_038_out_channel;                                                                                      // crosser_038:out_channel -> rsp_mux_012:sink0_channel
	wire          crosser_038_out_startofpacket;                                                                                // crosser_038:out_startofpacket -> rsp_mux_012:sink0_startofpacket
	wire          crosser_038_out_endofpacket;                                                                                  // crosser_038:out_endofpacket -> rsp_mux_012:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                                     // rsp_demux_001:src0_valid -> crosser_039:in_valid
	wire  [401:0] rsp_demux_001_src0_data;                                                                                      // rsp_demux_001:src0_data -> crosser_039:in_data
	wire          rsp_demux_001_src0_ready;                                                                                     // crosser_039:in_ready -> rsp_demux_001:src0_ready
	wire   [12:0] rsp_demux_001_src0_channel;                                                                                   // rsp_demux_001:src0_channel -> crosser_039:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                             // rsp_demux_001:src0_startofpacket -> crosser_039:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                               // rsp_demux_001:src0_endofpacket -> crosser_039:in_endofpacket
	wire          crosser_039_out_valid;                                                                                        // crosser_039:out_valid -> rsp_mux:sink1_valid
	wire  [401:0] crosser_039_out_data;                                                                                         // crosser_039:out_data -> rsp_mux:sink1_data
	wire          crosser_039_out_ready;                                                                                        // rsp_mux:sink1_ready -> crosser_039:out_ready
	wire   [12:0] crosser_039_out_channel;                                                                                      // crosser_039:out_channel -> rsp_mux:sink1_channel
	wire          crosser_039_out_startofpacket;                                                                                // crosser_039:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_039_out_endofpacket;                                                                                  // crosser_039:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                                     // rsp_demux_001:src1_valid -> crosser_040:in_valid
	wire  [401:0] rsp_demux_001_src1_data;                                                                                      // rsp_demux_001:src1_data -> crosser_040:in_data
	wire          rsp_demux_001_src1_ready;                                                                                     // crosser_040:in_ready -> rsp_demux_001:src1_ready
	wire   [12:0] rsp_demux_001_src1_channel;                                                                                   // rsp_demux_001:src1_channel -> crosser_040:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                                             // rsp_demux_001:src1_startofpacket -> crosser_040:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                               // rsp_demux_001:src1_endofpacket -> crosser_040:in_endofpacket
	wire          crosser_040_out_valid;                                                                                        // crosser_040:out_valid -> rsp_mux_001:sink1_valid
	wire  [401:0] crosser_040_out_data;                                                                                         // crosser_040:out_data -> rsp_mux_001:sink1_data
	wire          crosser_040_out_ready;                                                                                        // rsp_mux_001:sink1_ready -> crosser_040:out_ready
	wire   [12:0] crosser_040_out_channel;                                                                                      // crosser_040:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_040_out_startofpacket;                                                                                // crosser_040:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_040_out_endofpacket;                                                                                  // crosser_040:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                                     // rsp_demux_002:src0_valid -> crosser_041:in_valid
	wire  [401:0] rsp_demux_002_src0_data;                                                                                      // rsp_demux_002:src0_data -> crosser_041:in_data
	wire          rsp_demux_002_src0_ready;                                                                                     // crosser_041:in_ready -> rsp_demux_002:src0_ready
	wire   [12:0] rsp_demux_002_src0_channel;                                                                                   // rsp_demux_002:src0_channel -> crosser_041:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                             // rsp_demux_002:src0_startofpacket -> crosser_041:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                               // rsp_demux_002:src0_endofpacket -> crosser_041:in_endofpacket
	wire          crosser_041_out_valid;                                                                                        // crosser_041:out_valid -> rsp_mux_002:sink1_valid
	wire  [401:0] crosser_041_out_data;                                                                                         // crosser_041:out_data -> rsp_mux_002:sink1_data
	wire          crosser_041_out_ready;                                                                                        // rsp_mux_002:sink1_ready -> crosser_041:out_ready
	wire   [12:0] crosser_041_out_channel;                                                                                      // crosser_041:out_channel -> rsp_mux_002:sink1_channel
	wire          crosser_041_out_startofpacket;                                                                                // crosser_041:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          crosser_041_out_endofpacket;                                                                                  // crosser_041:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                                     // rsp_demux_002:src1_valid -> crosser_042:in_valid
	wire  [401:0] rsp_demux_002_src1_data;                                                                                      // rsp_demux_002:src1_data -> crosser_042:in_data
	wire          rsp_demux_002_src1_ready;                                                                                     // crosser_042:in_ready -> rsp_demux_002:src1_ready
	wire   [12:0] rsp_demux_002_src1_channel;                                                                                   // rsp_demux_002:src1_channel -> crosser_042:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                                                             // rsp_demux_002:src1_startofpacket -> crosser_042:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                                               // rsp_demux_002:src1_endofpacket -> crosser_042:in_endofpacket
	wire          crosser_042_out_valid;                                                                                        // crosser_042:out_valid -> rsp_mux_011:sink1_valid
	wire  [401:0] crosser_042_out_data;                                                                                         // crosser_042:out_data -> rsp_mux_011:sink1_data
	wire          crosser_042_out_ready;                                                                                        // rsp_mux_011:sink1_ready -> crosser_042:out_ready
	wire   [12:0] crosser_042_out_channel;                                                                                      // crosser_042:out_channel -> rsp_mux_011:sink1_channel
	wire          crosser_042_out_startofpacket;                                                                                // crosser_042:out_startofpacket -> rsp_mux_011:sink1_startofpacket
	wire          crosser_042_out_endofpacket;                                                                                  // crosser_042:out_endofpacket -> rsp_mux_011:sink1_endofpacket
	wire          rsp_demux_002_src2_valid;                                                                                     // rsp_demux_002:src2_valid -> crosser_043:in_valid
	wire  [401:0] rsp_demux_002_src2_data;                                                                                      // rsp_demux_002:src2_data -> crosser_043:in_data
	wire          rsp_demux_002_src2_ready;                                                                                     // crosser_043:in_ready -> rsp_demux_002:src2_ready
	wire   [12:0] rsp_demux_002_src2_channel;                                                                                   // rsp_demux_002:src2_channel -> crosser_043:in_channel
	wire          rsp_demux_002_src2_startofpacket;                                                                             // rsp_demux_002:src2_startofpacket -> crosser_043:in_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                                               // rsp_demux_002:src2_endofpacket -> crosser_043:in_endofpacket
	wire          crosser_043_out_valid;                                                                                        // crosser_043:out_valid -> rsp_mux_012:sink1_valid
	wire  [401:0] crosser_043_out_data;                                                                                         // crosser_043:out_data -> rsp_mux_012:sink1_data
	wire          crosser_043_out_ready;                                                                                        // rsp_mux_012:sink1_ready -> crosser_043:out_ready
	wire   [12:0] crosser_043_out_channel;                                                                                      // crosser_043:out_channel -> rsp_mux_012:sink1_channel
	wire          crosser_043_out_startofpacket;                                                                                // crosser_043:out_startofpacket -> rsp_mux_012:sink1_startofpacket
	wire          crosser_043_out_endofpacket;                                                                                  // crosser_043:out_endofpacket -> rsp_mux_012:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                                     // rsp_demux_003:src0_valid -> crosser_044:in_valid
	wire  [401:0] rsp_demux_003_src0_data;                                                                                      // rsp_demux_003:src0_data -> crosser_044:in_data
	wire          rsp_demux_003_src0_ready;                                                                                     // crosser_044:in_ready -> rsp_demux_003:src0_ready
	wire   [12:0] rsp_demux_003_src0_channel;                                                                                   // rsp_demux_003:src0_channel -> crosser_044:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                             // rsp_demux_003:src0_startofpacket -> crosser_044:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                               // rsp_demux_003:src0_endofpacket -> crosser_044:in_endofpacket
	wire          crosser_044_out_valid;                                                                                        // crosser_044:out_valid -> rsp_mux_010:sink1_valid
	wire  [401:0] crosser_044_out_data;                                                                                         // crosser_044:out_data -> rsp_mux_010:sink1_data
	wire          crosser_044_out_ready;                                                                                        // rsp_mux_010:sink1_ready -> crosser_044:out_ready
	wire   [12:0] crosser_044_out_channel;                                                                                      // crosser_044:out_channel -> rsp_mux_010:sink1_channel
	wire          crosser_044_out_startofpacket;                                                                                // crosser_044:out_startofpacket -> rsp_mux_010:sink1_startofpacket
	wire          crosser_044_out_endofpacket;                                                                                  // crosser_044:out_endofpacket -> rsp_mux_010:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                                     // rsp_demux_004:src0_valid -> crosser_045:in_valid
	wire  [401:0] rsp_demux_004_src0_data;                                                                                      // rsp_demux_004:src0_data -> crosser_045:in_data
	wire          rsp_demux_004_src0_ready;                                                                                     // crosser_045:in_ready -> rsp_demux_004:src0_ready
	wire   [12:0] rsp_demux_004_src0_channel;                                                                                   // rsp_demux_004:src0_channel -> crosser_045:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                             // rsp_demux_004:src0_startofpacket -> crosser_045:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                               // rsp_demux_004:src0_endofpacket -> crosser_045:in_endofpacket
	wire          crosser_045_out_valid;                                                                                        // crosser_045:out_valid -> rsp_mux_009:sink1_valid
	wire  [401:0] crosser_045_out_data;                                                                                         // crosser_045:out_data -> rsp_mux_009:sink1_data
	wire          crosser_045_out_ready;                                                                                        // rsp_mux_009:sink1_ready -> crosser_045:out_ready
	wire   [12:0] crosser_045_out_channel;                                                                                      // crosser_045:out_channel -> rsp_mux_009:sink1_channel
	wire          crosser_045_out_startofpacket;                                                                                // crosser_045:out_startofpacket -> rsp_mux_009:sink1_startofpacket
	wire          crosser_045_out_endofpacket;                                                                                  // crosser_045:out_endofpacket -> rsp_mux_009:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                                     // rsp_demux_005:src0_valid -> crosser_046:in_valid
	wire  [401:0] rsp_demux_005_src0_data;                                                                                      // rsp_demux_005:src0_data -> crosser_046:in_data
	wire          rsp_demux_005_src0_ready;                                                                                     // crosser_046:in_ready -> rsp_demux_005:src0_ready
	wire   [12:0] rsp_demux_005_src0_channel;                                                                                   // rsp_demux_005:src0_channel -> crosser_046:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                             // rsp_demux_005:src0_startofpacket -> crosser_046:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                               // rsp_demux_005:src0_endofpacket -> crosser_046:in_endofpacket
	wire          crosser_046_out_valid;                                                                                        // crosser_046:out_valid -> rsp_mux_008:sink1_valid
	wire  [401:0] crosser_046_out_data;                                                                                         // crosser_046:out_data -> rsp_mux_008:sink1_data
	wire          crosser_046_out_ready;                                                                                        // rsp_mux_008:sink1_ready -> crosser_046:out_ready
	wire   [12:0] crosser_046_out_channel;                                                                                      // crosser_046:out_channel -> rsp_mux_008:sink1_channel
	wire          crosser_046_out_startofpacket;                                                                                // crosser_046:out_startofpacket -> rsp_mux_008:sink1_startofpacket
	wire          crosser_046_out_endofpacket;                                                                                  // crosser_046:out_endofpacket -> rsp_mux_008:sink1_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                                     // rsp_demux_006:src0_valid -> crosser_047:in_valid
	wire  [401:0] rsp_demux_006_src0_data;                                                                                      // rsp_demux_006:src0_data -> crosser_047:in_data
	wire          rsp_demux_006_src0_ready;                                                                                     // crosser_047:in_ready -> rsp_demux_006:src0_ready
	wire   [12:0] rsp_demux_006_src0_channel;                                                                                   // rsp_demux_006:src0_channel -> crosser_047:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                             // rsp_demux_006:src0_startofpacket -> crosser_047:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                               // rsp_demux_006:src0_endofpacket -> crosser_047:in_endofpacket
	wire          crosser_047_out_valid;                                                                                        // crosser_047:out_valid -> rsp_mux_007:sink1_valid
	wire  [401:0] crosser_047_out_data;                                                                                         // crosser_047:out_data -> rsp_mux_007:sink1_data
	wire          crosser_047_out_ready;                                                                                        // rsp_mux_007:sink1_ready -> crosser_047:out_ready
	wire   [12:0] crosser_047_out_channel;                                                                                      // crosser_047:out_channel -> rsp_mux_007:sink1_channel
	wire          crosser_047_out_startofpacket;                                                                                // crosser_047:out_startofpacket -> rsp_mux_007:sink1_startofpacket
	wire          crosser_047_out_endofpacket;                                                                                  // crosser_047:out_endofpacket -> rsp_mux_007:sink1_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                                     // rsp_demux_007:src0_valid -> crosser_048:in_valid
	wire  [401:0] rsp_demux_007_src0_data;                                                                                      // rsp_demux_007:src0_data -> crosser_048:in_data
	wire          rsp_demux_007_src0_ready;                                                                                     // crosser_048:in_ready -> rsp_demux_007:src0_ready
	wire   [12:0] rsp_demux_007_src0_channel;                                                                                   // rsp_demux_007:src0_channel -> crosser_048:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                             // rsp_demux_007:src0_startofpacket -> crosser_048:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                               // rsp_demux_007:src0_endofpacket -> crosser_048:in_endofpacket
	wire          crosser_048_out_valid;                                                                                        // crosser_048:out_valid -> rsp_mux_006:sink1_valid
	wire  [401:0] crosser_048_out_data;                                                                                         // crosser_048:out_data -> rsp_mux_006:sink1_data
	wire          crosser_048_out_ready;                                                                                        // rsp_mux_006:sink1_ready -> crosser_048:out_ready
	wire   [12:0] crosser_048_out_channel;                                                                                      // crosser_048:out_channel -> rsp_mux_006:sink1_channel
	wire          crosser_048_out_startofpacket;                                                                                // crosser_048:out_startofpacket -> rsp_mux_006:sink1_startofpacket
	wire          crosser_048_out_endofpacket;                                                                                  // crosser_048:out_endofpacket -> rsp_mux_006:sink1_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                                     // rsp_demux_008:src0_valid -> crosser_049:in_valid
	wire  [401:0] rsp_demux_008_src0_data;                                                                                      // rsp_demux_008:src0_data -> crosser_049:in_data
	wire          rsp_demux_008_src0_ready;                                                                                     // crosser_049:in_ready -> rsp_demux_008:src0_ready
	wire   [12:0] rsp_demux_008_src0_channel;                                                                                   // rsp_demux_008:src0_channel -> crosser_049:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                             // rsp_demux_008:src0_startofpacket -> crosser_049:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                               // rsp_demux_008:src0_endofpacket -> crosser_049:in_endofpacket
	wire          crosser_049_out_valid;                                                                                        // crosser_049:out_valid -> rsp_mux_005:sink1_valid
	wire  [401:0] crosser_049_out_data;                                                                                         // crosser_049:out_data -> rsp_mux_005:sink1_data
	wire          crosser_049_out_ready;                                                                                        // rsp_mux_005:sink1_ready -> crosser_049:out_ready
	wire   [12:0] crosser_049_out_channel;                                                                                      // crosser_049:out_channel -> rsp_mux_005:sink1_channel
	wire          crosser_049_out_startofpacket;                                                                                // crosser_049:out_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          crosser_049_out_endofpacket;                                                                                  // crosser_049:out_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                                     // rsp_demux_009:src0_valid -> crosser_050:in_valid
	wire  [401:0] rsp_demux_009_src0_data;                                                                                      // rsp_demux_009:src0_data -> crosser_050:in_data
	wire          rsp_demux_009_src0_ready;                                                                                     // crosser_050:in_ready -> rsp_demux_009:src0_ready
	wire   [12:0] rsp_demux_009_src0_channel;                                                                                   // rsp_demux_009:src0_channel -> crosser_050:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                                             // rsp_demux_009:src0_startofpacket -> crosser_050:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                               // rsp_demux_009:src0_endofpacket -> crosser_050:in_endofpacket
	wire          crosser_050_out_valid;                                                                                        // crosser_050:out_valid -> rsp_mux_004:sink1_valid
	wire  [401:0] crosser_050_out_data;                                                                                         // crosser_050:out_data -> rsp_mux_004:sink1_data
	wire          crosser_050_out_ready;                                                                                        // rsp_mux_004:sink1_ready -> crosser_050:out_ready
	wire   [12:0] crosser_050_out_channel;                                                                                      // crosser_050:out_channel -> rsp_mux_004:sink1_channel
	wire          crosser_050_out_startofpacket;                                                                                // crosser_050:out_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          crosser_050_out_endofpacket;                                                                                  // crosser_050:out_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                                     // rsp_demux_010:src0_valid -> crosser_051:in_valid
	wire  [401:0] rsp_demux_010_src0_data;                                                                                      // rsp_demux_010:src0_data -> crosser_051:in_data
	wire          rsp_demux_010_src0_ready;                                                                                     // crosser_051:in_ready -> rsp_demux_010:src0_ready
	wire   [12:0] rsp_demux_010_src0_channel;                                                                                   // rsp_demux_010:src0_channel -> crosser_051:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                                                             // rsp_demux_010:src0_startofpacket -> crosser_051:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                               // rsp_demux_010:src0_endofpacket -> crosser_051:in_endofpacket
	wire          crosser_051_out_valid;                                                                                        // crosser_051:out_valid -> rsp_mux_003:sink1_valid
	wire  [401:0] crosser_051_out_data;                                                                                         // crosser_051:out_data -> rsp_mux_003:sink1_data
	wire          crosser_051_out_ready;                                                                                        // rsp_mux_003:sink1_ready -> crosser_051:out_ready
	wire   [12:0] crosser_051_out_channel;                                                                                      // crosser_051:out_channel -> rsp_mux_003:sink1_channel
	wire          crosser_051_out_startofpacket;                                                                                // crosser_051:out_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          crosser_051_out_endofpacket;                                                                                  // crosser_051:out_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          m2_ddr2_memory_avl_agent_rdata_fifo_out_valid;                                                                // m2_ddr2_memory_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] m2_ddr2_memory_avl_agent_rdata_fifo_out_data;                                                                 // m2_ddr2_memory_avl_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          m2_ddr2_memory_avl_agent_rdata_fifo_out_ready;                                                                // avalon_st_adapter:in_0_ready -> m2_ddr2_memory_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                                // avalon_st_adapter:out_0_valid -> m2_ddr2_memory_avl_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                                                                 // avalon_st_adapter:out_0_data -> m2_ddr2_memory_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                                // m2_ddr2_memory_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                                // avalon_st_adapter:out_0_error -> m2_ddr2_memory_avl_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_ftdi_s0_agent_rdata_fifo_out_valid;                                                           // m1_clock_bridge_ftdi_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire  [257:0] m1_clock_bridge_ftdi_s0_agent_rdata_fifo_out_data;                                                            // m1_clock_bridge_ftdi_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          m1_clock_bridge_ftdi_s0_agent_rdata_fifo_out_ready;                                                           // avalon_st_adapter_001:in_0_ready -> m1_clock_bridge_ftdi_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                            // avalon_st_adapter_001:out_0_valid -> m1_clock_bridge_ftdi_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_001_out_0_data;                                                                             // avalon_st_adapter_001:out_0_data -> m1_clock_bridge_ftdi_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                            // m1_clock_bridge_ftdi_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                            // avalon_st_adapter_001:out_0_error -> m1_clock_bridge_ftdi_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_general_s0_agent_rdata_fifo_out_valid;                                                        // m1_clock_bridge_general_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire  [257:0] m1_clock_bridge_general_s0_agent_rdata_fifo_out_data;                                                         // m1_clock_bridge_general_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          m1_clock_bridge_general_s0_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_002:in_0_ready -> m1_clock_bridge_general_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                            // avalon_st_adapter_002:out_0_valid -> m1_clock_bridge_general_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_002_out_0_data;                                                                             // avalon_st_adapter_002:out_0_data -> m1_clock_bridge_general_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                            // m1_clock_bridge_general_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                            // avalon_st_adapter_002:out_0_error -> m1_clock_bridge_general_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_out_valid;                                                   // m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire  [257:0] m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_out_data;                                                    // m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter_003:in_0_ready -> m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                            // avalon_st_adapter_003:out_0_valid -> m1_clock_bridge_comm_3_right_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_003_out_0_data;                                                                             // avalon_st_adapter_003:out_0_data -> m1_clock_bridge_comm_3_right_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                            // m1_clock_bridge_comm_3_right_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                            // avalon_st_adapter_003:out_0_error -> m1_clock_bridge_comm_3_right_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_out_valid;                                                   // m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire  [257:0] m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_out_data;                                                    // m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter_004:in_0_ready -> m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                            // avalon_st_adapter_004:out_0_valid -> m1_clock_bridge_comm_4_right_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_004_out_0_data;                                                                             // avalon_st_adapter_004:out_0_data -> m1_clock_bridge_comm_4_right_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                            // m1_clock_bridge_comm_4_right_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                            // avalon_st_adapter_004:out_0_error -> m1_clock_bridge_comm_4_right_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_out_valid;                                                   // m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire  [257:0] m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_out_data;                                                    // m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter_005:in_0_ready -> m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                                            // avalon_st_adapter_005:out_0_valid -> m1_clock_bridge_comm_2_right_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_005_out_0_data;                                                                             // avalon_st_adapter_005:out_0_data -> m1_clock_bridge_comm_2_right_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                                            // m1_clock_bridge_comm_2_right_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                                            // avalon_st_adapter_005:out_0_error -> m1_clock_bridge_comm_2_right_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_out_valid;                                                   // m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire  [257:0] m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_out_data;                                                    // m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter_006:in_0_ready -> m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                                            // avalon_st_adapter_006:out_0_valid -> m1_clock_bridge_comm_1_right_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_006_out_0_data;                                                                             // avalon_st_adapter_006:out_0_data -> m1_clock_bridge_comm_1_right_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                                            // m1_clock_bridge_comm_1_right_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                                            // avalon_st_adapter_006:out_0_error -> m1_clock_bridge_comm_1_right_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_out_valid;                                                    // m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire  [257:0] m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_out_data;                                                     // m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_out_ready;                                                    // avalon_st_adapter_007:in_0_ready -> m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                                            // avalon_st_adapter_007:out_0_valid -> m1_clock_bridge_comm_3_left_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_007_out_0_data;                                                                             // avalon_st_adapter_007:out_0_data -> m1_clock_bridge_comm_3_left_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                                            // m1_clock_bridge_comm_3_left_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                                            // avalon_st_adapter_007:out_0_error -> m1_clock_bridge_comm_3_left_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_out_valid;                                                    // m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire  [257:0] m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_out_data;                                                     // m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_out_ready;                                                    // avalon_st_adapter_008:in_0_ready -> m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                                            // avalon_st_adapter_008:out_0_valid -> m1_clock_bridge_comm_4_left_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_008_out_0_data;                                                                             // avalon_st_adapter_008:out_0_data -> m1_clock_bridge_comm_4_left_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                                            // m1_clock_bridge_comm_4_left_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                                            // avalon_st_adapter_008:out_0_error -> m1_clock_bridge_comm_4_left_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_out_valid;                                                    // m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire  [257:0] m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_out_data;                                                     // m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_out_ready;                                                    // avalon_st_adapter_009:in_0_ready -> m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                                            // avalon_st_adapter_009:out_0_valid -> m1_clock_bridge_comm_2_left_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_009_out_0_data;                                                                             // avalon_st_adapter_009:out_0_data -> m1_clock_bridge_comm_2_left_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                                            // m1_clock_bridge_comm_2_left_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                                            // avalon_st_adapter_009:out_0_error -> m1_clock_bridge_comm_2_left_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_out_valid;                                                    // m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire  [257:0] m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_out_data;                                                     // m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_out_ready;                                                    // avalon_st_adapter_010:in_0_ready -> m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                                            // avalon_st_adapter_010:out_0_valid -> m1_clock_bridge_comm_1_left_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_010_out_0_data;                                                                             // avalon_st_adapter_010:out_0_data -> m1_clock_bridge_comm_1_left_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                                            // m1_clock_bridge_comm_1_left_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                                            // avalon_st_adapter_010:out_0_error -> m1_clock_bridge_comm_1_left_s0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ftdi_umft601a_module_avalon_imgt_master_data_translator (
		.clk                    (clk_100_clk_clk),                                                                                 //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (FTDI_UMFT601A_Module_avalon_imgt_master_data_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (FTDI_UMFT601A_Module_avalon_imgt_master_data_waitrequest),                                        //                          .waitrequest
		.av_write               (FTDI_UMFT601A_Module_avalon_imgt_master_data_write),                                              //                          .write
		.av_writedata           (FTDI_UMFT601A_Module_avalon_imgt_master_data_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                            //               (terminated)
		.av_byteenable          (2'b11),                                                                                           //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                                            //               (terminated)
		.av_read                (1'b0),                                                                                            //               (terminated)
		.av_readdata            (),                                                                                                //               (terminated)
		.av_readdatavalid       (),                                                                                                //               (terminated)
		.av_lock                (1'b0),                                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                                            //               (terminated)
		.uav_clken              (),                                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                                           //               (terminated)
		.av_response            (),                                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ftdi_umft601a_module_avalon_master_data_translator (
		.clk                    (clk_100_clk_clk),                                                                            //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (FTDI_UMFT601A_Module_avalon_master_data_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (FTDI_UMFT601A_Module_avalon_master_data_waitrequest),                                        //                          .waitrequest
		.av_read                (FTDI_UMFT601A_Module_avalon_master_data_read),                                               //                          .read
		.av_readdata            (FTDI_UMFT601A_Module_avalon_master_data_readdata),                                           //                          .readdata
		.av_write               (FTDI_UMFT601A_Module_avalon_master_data_write),                                              //                          .write
		.av_writedata           (FTDI_UMFT601A_Module_avalon_master_data_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                       //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                                       //               (terminated)
		.av_readdatavalid       (),                                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                                       //               (terminated)
		.uav_clken              (),                                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                                      //               (terminated)
		.av_response            (),                                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) memory_filler_avalon_master_data_translator (
		.clk                    (clk_100_clk_clk),                                                                     //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (memory_filler_avalon_master_data_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (memory_filler_avalon_master_data_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (memory_filler_avalon_master_data_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (memory_filler_avalon_master_data_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (memory_filler_avalon_master_data_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (memory_filler_avalon_master_data_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (memory_filler_avalon_master_data_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (memory_filler_avalon_master_data_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (memory_filler_avalon_master_data_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Memory_Filler_avalon_master_data_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Memory_Filler_avalon_master_data_waitrequest),                                        //                          .waitrequest
		.av_write               (Memory_Filler_avalon_master_data_write),                                              //                          .write
		.av_writedata           (Memory_Filler_avalon_master_data_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                                //               (terminated)
		.av_read                (1'b0),                                                                                //               (terminated)
		.av_readdata            (),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                                //               (terminated)
		.uav_clken              (),                                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                                //               (terminated)
		.uav_response           (2'b00),                                                                               //               (terminated)
		.av_response            (),                                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) communication_module_v2_ch1_avalon_mm_left_buffer_master_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                           //                     reset.reset
		.uav_address            (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address),                                                                                                                                                                 // avalon_universal_master_0.address
		.uav_burstcount         (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                              //                          .burstcount
		.uav_read               (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read),                                                                                                                                                                    //                          .read
		.uav_write              (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write),                                                                                                                                                                   //                          .write
		.uav_waitrequest        (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                             //                          .waitrequest
		.uav_readdatavalid      (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                           //                          .readdatavalid
		.uav_byteenable         (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                              //                          .byteenable
		.uav_readdata           (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                                //                          .readdata
		.uav_writedata          (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                               //                          .writedata
		.uav_lock               (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                    //                          .lock
		.uav_debugaccess        (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                             //                          .debugaccess
		.av_address             (Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_address),                                                                                                                                                                                                      //      avalon_anti_master_0.address
		.av_waitrequest         (Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_waitrequest),                                                                                                                                                                                                  //                          .waitrequest
		.av_read                (Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_read),                                                                                                                                                                                                         //                          .read
		.av_readdata            (Communication_Module_v2_Ch1_avalon_mm_left_buffer_master_readdata),                                                                                                                                                                                                     //                          .readdata
		.av_burstcount          (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) communication_module_v2_ch2_avalon_mm_left_buffer_master_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                           //                     reset.reset
		.uav_address            (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address),                                                                                                                                                                 // avalon_universal_master_0.address
		.uav_burstcount         (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                              //                          .burstcount
		.uav_read               (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read),                                                                                                                                                                    //                          .read
		.uav_write              (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write),                                                                                                                                                                   //                          .write
		.uav_waitrequest        (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                             //                          .waitrequest
		.uav_readdatavalid      (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                           //                          .readdatavalid
		.uav_byteenable         (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                              //                          .byteenable
		.uav_readdata           (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                                //                          .readdata
		.uav_writedata          (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                               //                          .writedata
		.uav_lock               (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                    //                          .lock
		.uav_debugaccess        (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                             //                          .debugaccess
		.av_address             (Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_address),                                                                                                                                                                                                      //      avalon_anti_master_0.address
		.av_waitrequest         (Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_waitrequest),                                                                                                                                                                                                  //                          .waitrequest
		.av_read                (Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_read),                                                                                                                                                                                                         //                          .read
		.av_readdata            (Communication_Module_v2_Ch2_avalon_mm_left_buffer_master_readdata),                                                                                                                                                                                                     //                          .readdata
		.av_burstcount          (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) communication_module_v2_ch4_avalon_mm_left_buffer_master_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                           //                     reset.reset
		.uav_address            (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address),                                                                                                                                                                 // avalon_universal_master_0.address
		.uav_burstcount         (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                              //                          .burstcount
		.uav_read               (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read),                                                                                                                                                                    //                          .read
		.uav_write              (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write),                                                                                                                                                                   //                          .write
		.uav_waitrequest        (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                             //                          .waitrequest
		.uav_readdatavalid      (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                           //                          .readdatavalid
		.uav_byteenable         (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                              //                          .byteenable
		.uav_readdata           (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                                //                          .readdata
		.uav_writedata          (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                               //                          .writedata
		.uav_lock               (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                    //                          .lock
		.uav_debugaccess        (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                             //                          .debugaccess
		.av_address             (Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_address),                                                                                                                                                                                                      //      avalon_anti_master_0.address
		.av_waitrequest         (Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_waitrequest),                                                                                                                                                                                                  //                          .waitrequest
		.av_read                (Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_read),                                                                                                                                                                                                         //                          .read
		.av_readdata            (Communication_Module_v2_Ch4_avalon_mm_left_buffer_master_readdata),                                                                                                                                                                                                     //                          .readdata
		.av_burstcount          (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) communication_module_v2_ch3_avalon_mm_left_buffer_master_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                           //                     reset.reset
		.uav_address            (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address),                                                                                                                                                                 // avalon_universal_master_0.address
		.uav_burstcount         (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                              //                          .burstcount
		.uav_read               (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read),                                                                                                                                                                    //                          .read
		.uav_write              (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write),                                                                                                                                                                   //                          .write
		.uav_waitrequest        (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                             //                          .waitrequest
		.uav_readdatavalid      (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                           //                          .readdatavalid
		.uav_byteenable         (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                              //                          .byteenable
		.uav_readdata           (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                                //                          .readdata
		.uav_writedata          (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                               //                          .writedata
		.uav_lock               (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                    //                          .lock
		.uav_debugaccess        (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                             //                          .debugaccess
		.av_address             (Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_address),                                                                                                                                                                                                      //      avalon_anti_master_0.address
		.av_waitrequest         (Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_waitrequest),                                                                                                                                                                                                  //                          .waitrequest
		.av_read                (Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_read),                                                                                                                                                                                                         //                          .read
		.av_readdata            (Communication_Module_v2_Ch3_avalon_mm_left_buffer_master_readdata),                                                                                                                                                                                                     //                          .readdata
		.av_burstcount          (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) communication_module_v2_ch1_avalon_mm_right_buffer_master_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                           //                     reset.reset
		.uav_address            (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address),                                                                                                                                                                // avalon_universal_master_0.address
		.uav_burstcount         (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                             //                          .burstcount
		.uav_read               (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read),                                                                                                                                                                   //                          .read
		.uav_write              (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write),                                                                                                                                                                  //                          .write
		.uav_waitrequest        (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                            //                          .waitrequest
		.uav_readdatavalid      (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                          //                          .readdatavalid
		.uav_byteenable         (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                             //                          .byteenable
		.uav_readdata           (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                               //                          .readdata
		.uav_writedata          (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                              //                          .writedata
		.uav_lock               (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                   //                          .lock
		.uav_debugaccess        (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                            //                          .debugaccess
		.av_address             (Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_address),                                                                                                                                                                                                     //      avalon_anti_master_0.address
		.av_waitrequest         (Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_waitrequest),                                                                                                                                                                                                 //                          .waitrequest
		.av_read                (Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_read),                                                                                                                                                                                                        //                          .read
		.av_readdata            (Communication_Module_v2_Ch1_avalon_mm_right_buffer_master_readdata),                                                                                                                                                                                                    //                          .readdata
		.av_burstcount          (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) communication_module_v2_ch2_avalon_mm_right_buffer_master_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                           //                     reset.reset
		.uav_address            (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address),                                                                                                                                                                // avalon_universal_master_0.address
		.uav_burstcount         (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                             //                          .burstcount
		.uav_read               (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read),                                                                                                                                                                   //                          .read
		.uav_write              (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write),                                                                                                                                                                  //                          .write
		.uav_waitrequest        (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                            //                          .waitrequest
		.uav_readdatavalid      (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                          //                          .readdatavalid
		.uav_byteenable         (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                             //                          .byteenable
		.uav_readdata           (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                               //                          .readdata
		.uav_writedata          (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                              //                          .writedata
		.uav_lock               (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                   //                          .lock
		.uav_debugaccess        (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                            //                          .debugaccess
		.av_address             (Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_address),                                                                                                                                                                                                     //      avalon_anti_master_0.address
		.av_waitrequest         (Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_waitrequest),                                                                                                                                                                                                 //                          .waitrequest
		.av_read                (Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_read),                                                                                                                                                                                                        //                          .read
		.av_readdata            (Communication_Module_v2_Ch2_avalon_mm_right_buffer_master_readdata),                                                                                                                                                                                                    //                          .readdata
		.av_burstcount          (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) communication_module_v2_ch4_avalon_mm_right_buffer_master_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                           //                     reset.reset
		.uav_address            (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address),                                                                                                                                                                // avalon_universal_master_0.address
		.uav_burstcount         (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                             //                          .burstcount
		.uav_read               (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read),                                                                                                                                                                   //                          .read
		.uav_write              (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write),                                                                                                                                                                  //                          .write
		.uav_waitrequest        (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                            //                          .waitrequest
		.uav_readdatavalid      (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                          //                          .readdatavalid
		.uav_byteenable         (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                             //                          .byteenable
		.uav_readdata           (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                               //                          .readdata
		.uav_writedata          (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                              //                          .writedata
		.uav_lock               (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                   //                          .lock
		.uav_debugaccess        (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                            //                          .debugaccess
		.av_address             (Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_address),                                                                                                                                                                                                     //      avalon_anti_master_0.address
		.av_waitrequest         (Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_waitrequest),                                                                                                                                                                                                 //                          .waitrequest
		.av_read                (Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_read),                                                                                                                                                                                                        //                          .read
		.av_readdata            (Communication_Module_v2_Ch4_avalon_mm_right_buffer_master_readdata),                                                                                                                                                                                                    //                          .readdata
		.av_burstcount          (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) communication_module_v2_ch3_avalon_mm_right_buffer_master_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                           //                     reset.reset
		.uav_address            (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address),                                                                                                                                                                // avalon_universal_master_0.address
		.uav_burstcount         (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                             //                          .burstcount
		.uav_read               (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read),                                                                                                                                                                   //                          .read
		.uav_write              (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write),                                                                                                                                                                  //                          .write
		.uav_waitrequest        (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                            //                          .waitrequest
		.uav_readdatavalid      (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                          //                          .readdatavalid
		.uav_byteenable         (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                             //                          .byteenable
		.uav_readdata           (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                               //                          .readdata
		.uav_writedata          (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                              //                          .writedata
		.uav_lock               (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                   //                          .lock
		.uav_debugaccess        (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                            //                          .debugaccess
		.av_address             (Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_address),                                                                                                                                                                                                     //      avalon_anti_master_0.address
		.av_waitrequest         (Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_waitrequest),                                                                                                                                                                                                 //                          .waitrequest
		.av_read                (Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_read),                                                                                                                                                                                                        //                          .read
		.av_readdata            (Communication_Module_v2_Ch3_avalon_mm_right_buffer_master_readdata),                                                                                                                                                                                                    //                          .readdata
		.av_burstcount          (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator (
		.clk                    (clk_100_clk_clk),                                                                                 //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_waitrequest),                                        //                          .waitrequest
		.av_read                (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_read),                                               //                          .read
		.av_readdata            (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_readdata),                                           //                          .readdata
		.av_write               (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_write),                                              //                          .write
		.av_writedata           (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                            //               (terminated)
		.av_byteenable          (1'b1),                                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                                            //               (terminated)
		.av_readdatavalid       (),                                                                                                //               (terminated)
		.av_lock                (1'b0),                                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                                            //               (terminated)
		.uav_clken              (),                                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                                           //               (terminated)
		.av_response            (),                                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ddr2_address_span_extender_expanded_master_translator (
		.clk                    (clk_100_clk_clk),                                                                               //                       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (ddr2_address_span_extender_expanded_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (ddr2_address_span_extender_expanded_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (ddr2_address_span_extender_expanded_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (ddr2_address_span_extender_expanded_master_byteenable),                                         //                          .byteenable
		.av_read                (ddr2_address_span_extender_expanded_master_read),                                               //                          .read
		.av_readdata            (ddr2_address_span_extender_expanded_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (ddr2_address_span_extender_expanded_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (ddr2_address_span_extender_expanded_master_write),                                              //                          .write
		.av_writedata           (ddr2_address_span_extender_expanded_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                                          //               (terminated)
		.uav_clken              (),                                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                                         //               (terminated)
		.av_response            (),                                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                                               //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m2_ddr2_memory_avl_translator (
		.clk                    (m2_ddr2_memory_afi_clk_clk),                                      //                      clk.clk
		.reset                  (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m2_ddr2_memory_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (m2_ddr2_memory_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (m2_ddr2_memory_avl_agent_m0_read),                                //                         .read
		.uav_write              (m2_ddr2_memory_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (m2_ddr2_memory_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (m2_ddr2_memory_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (m2_ddr2_memory_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (m2_ddr2_memory_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (m2_ddr2_memory_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (m2_ddr2_memory_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (m2_ddr2_memory_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (m2_ddr2_memory_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (m2_ddr2_memory_avl_write),                                        //                         .write
		.av_read                (m2_ddr2_memory_avl_read),                                         //                         .read
		.av_readdata            (m2_ddr2_memory_avl_readdata),                                     //                         .readdata
		.av_writedata           (m2_ddr2_memory_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (m2_ddr2_memory_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (m2_ddr2_memory_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (m2_ddr2_memory_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (m2_ddr2_memory_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (m2_ddr2_memory_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_ftdi_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_ftdi_s0_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_ftdi_s0_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (m1_clock_bridge_ftdi_s0_agent_m0_read),                     //                         .read
		.uav_write              (m1_clock_bridge_ftdi_s0_agent_m0_write),                    //                         .write
		.uav_waitrequest        (m1_clock_bridge_ftdi_s0_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ftdi_s0_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ftdi_s0_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (m1_clock_bridge_ftdi_s0_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (m1_clock_bridge_ftdi_s0_agent_m0_writedata),                //                         .writedata
		.uav_lock               (m1_clock_bridge_ftdi_s0_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (m1_clock_bridge_ftdi_s0_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (m1_clock_bridge_ftdi_s0_address),                           //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_ftdi_s0_write),                             //                         .write
		.av_read                (m1_clock_bridge_ftdi_s0_read),                              //                         .read
		.av_readdata            (m1_clock_bridge_ftdi_s0_readdata),                          //                         .readdata
		.av_writedata           (m1_clock_bridge_ftdi_s0_writedata),                         //                         .writedata
		.av_burstcount          (m1_clock_bridge_ftdi_s0_burstcount),                        //                         .burstcount
		.av_byteenable          (m1_clock_bridge_ftdi_s0_byteenable),                        //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_ftdi_s0_readdatavalid),                     //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_ftdi_s0_waitrequest),                       //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_ftdi_s0_debugaccess),                       //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_general_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_general_s0_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_general_s0_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (m1_clock_bridge_general_s0_agent_m0_read),                  //                         .read
		.uav_write              (m1_clock_bridge_general_s0_agent_m0_write),                 //                         .write
		.uav_waitrequest        (m1_clock_bridge_general_s0_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_general_s0_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_general_s0_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (m1_clock_bridge_general_s0_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (m1_clock_bridge_general_s0_agent_m0_writedata),             //                         .writedata
		.uav_lock               (m1_clock_bridge_general_s0_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (m1_clock_bridge_general_s0_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (m1_clock_bridge_general_s0_address),                        //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_general_s0_write),                          //                         .write
		.av_read                (m1_clock_bridge_general_s0_read),                           //                         .read
		.av_readdata            (m1_clock_bridge_general_s0_readdata),                       //                         .readdata
		.av_writedata           (m1_clock_bridge_general_s0_writedata),                      //                         .writedata
		.av_burstcount          (m1_clock_bridge_general_s0_burstcount),                     //                         .burstcount
		.av_byteenable          (m1_clock_bridge_general_s0_byteenable),                     //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_general_s0_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_general_s0_waitrequest),                    //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_general_s0_debugaccess),                    //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_comm_3_right_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_comm_3_right_s0_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_comm_3_right_s0_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (m1_clock_bridge_comm_3_right_s0_agent_m0_read),             //                         .read
		.uav_write              (m1_clock_bridge_comm_3_right_s0_agent_m0_write),            //                         .write
		.uav_waitrequest        (m1_clock_bridge_comm_3_right_s0_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_comm_3_right_s0_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_comm_3_right_s0_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (m1_clock_bridge_comm_3_right_s0_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (m1_clock_bridge_comm_3_right_s0_agent_m0_writedata),        //                         .writedata
		.uav_lock               (m1_clock_bridge_comm_3_right_s0_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (m1_clock_bridge_comm_3_right_s0_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (m1_clock_bridge_comm_3_right_s0_address),                   //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_comm_3_right_s0_write),                     //                         .write
		.av_read                (m1_clock_bridge_comm_3_right_s0_read),                      //                         .read
		.av_readdata            (m1_clock_bridge_comm_3_right_s0_readdata),                  //                         .readdata
		.av_writedata           (m1_clock_bridge_comm_3_right_s0_writedata),                 //                         .writedata
		.av_burstcount          (m1_clock_bridge_comm_3_right_s0_burstcount),                //                         .burstcount
		.av_byteenable          (m1_clock_bridge_comm_3_right_s0_byteenable),                //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_comm_3_right_s0_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_comm_3_right_s0_waitrequest),               //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_comm_3_right_s0_debugaccess),               //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_comm_4_right_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_comm_4_right_s0_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_comm_4_right_s0_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (m1_clock_bridge_comm_4_right_s0_agent_m0_read),             //                         .read
		.uav_write              (m1_clock_bridge_comm_4_right_s0_agent_m0_write),            //                         .write
		.uav_waitrequest        (m1_clock_bridge_comm_4_right_s0_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_comm_4_right_s0_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_comm_4_right_s0_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (m1_clock_bridge_comm_4_right_s0_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (m1_clock_bridge_comm_4_right_s0_agent_m0_writedata),        //                         .writedata
		.uav_lock               (m1_clock_bridge_comm_4_right_s0_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (m1_clock_bridge_comm_4_right_s0_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (m1_clock_bridge_comm_4_right_s0_address),                   //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_comm_4_right_s0_write),                     //                         .write
		.av_read                (m1_clock_bridge_comm_4_right_s0_read),                      //                         .read
		.av_readdata            (m1_clock_bridge_comm_4_right_s0_readdata),                  //                         .readdata
		.av_writedata           (m1_clock_bridge_comm_4_right_s0_writedata),                 //                         .writedata
		.av_burstcount          (m1_clock_bridge_comm_4_right_s0_burstcount),                //                         .burstcount
		.av_byteenable          (m1_clock_bridge_comm_4_right_s0_byteenable),                //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_comm_4_right_s0_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_comm_4_right_s0_waitrequest),               //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_comm_4_right_s0_debugaccess),               //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_comm_2_right_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_comm_2_right_s0_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_comm_2_right_s0_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (m1_clock_bridge_comm_2_right_s0_agent_m0_read),             //                         .read
		.uav_write              (m1_clock_bridge_comm_2_right_s0_agent_m0_write),            //                         .write
		.uav_waitrequest        (m1_clock_bridge_comm_2_right_s0_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_comm_2_right_s0_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_comm_2_right_s0_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (m1_clock_bridge_comm_2_right_s0_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (m1_clock_bridge_comm_2_right_s0_agent_m0_writedata),        //                         .writedata
		.uav_lock               (m1_clock_bridge_comm_2_right_s0_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (m1_clock_bridge_comm_2_right_s0_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (m1_clock_bridge_comm_2_right_s0_address),                   //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_comm_2_right_s0_write),                     //                         .write
		.av_read                (m1_clock_bridge_comm_2_right_s0_read),                      //                         .read
		.av_readdata            (m1_clock_bridge_comm_2_right_s0_readdata),                  //                         .readdata
		.av_writedata           (m1_clock_bridge_comm_2_right_s0_writedata),                 //                         .writedata
		.av_burstcount          (m1_clock_bridge_comm_2_right_s0_burstcount),                //                         .burstcount
		.av_byteenable          (m1_clock_bridge_comm_2_right_s0_byteenable),                //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_comm_2_right_s0_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_comm_2_right_s0_waitrequest),               //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_comm_2_right_s0_debugaccess),               //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_comm_1_right_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_comm_1_right_s0_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_comm_1_right_s0_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (m1_clock_bridge_comm_1_right_s0_agent_m0_read),             //                         .read
		.uav_write              (m1_clock_bridge_comm_1_right_s0_agent_m0_write),            //                         .write
		.uav_waitrequest        (m1_clock_bridge_comm_1_right_s0_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_comm_1_right_s0_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_comm_1_right_s0_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (m1_clock_bridge_comm_1_right_s0_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (m1_clock_bridge_comm_1_right_s0_agent_m0_writedata),        //                         .writedata
		.uav_lock               (m1_clock_bridge_comm_1_right_s0_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (m1_clock_bridge_comm_1_right_s0_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (m1_clock_bridge_comm_1_right_s0_address),                   //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_comm_1_right_s0_write),                     //                         .write
		.av_read                (m1_clock_bridge_comm_1_right_s0_read),                      //                         .read
		.av_readdata            (m1_clock_bridge_comm_1_right_s0_readdata),                  //                         .readdata
		.av_writedata           (m1_clock_bridge_comm_1_right_s0_writedata),                 //                         .writedata
		.av_burstcount          (m1_clock_bridge_comm_1_right_s0_burstcount),                //                         .burstcount
		.av_byteenable          (m1_clock_bridge_comm_1_right_s0_byteenable),                //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_comm_1_right_s0_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_comm_1_right_s0_waitrequest),               //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_comm_1_right_s0_debugaccess),               //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_comm_3_left_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_comm_3_left_s0_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_comm_3_left_s0_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (m1_clock_bridge_comm_3_left_s0_agent_m0_read),              //                         .read
		.uav_write              (m1_clock_bridge_comm_3_left_s0_agent_m0_write),             //                         .write
		.uav_waitrequest        (m1_clock_bridge_comm_3_left_s0_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_comm_3_left_s0_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_comm_3_left_s0_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (m1_clock_bridge_comm_3_left_s0_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (m1_clock_bridge_comm_3_left_s0_agent_m0_writedata),         //                         .writedata
		.uav_lock               (m1_clock_bridge_comm_3_left_s0_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (m1_clock_bridge_comm_3_left_s0_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (m1_clock_bridge_comm_3_left_s0_address),                    //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_comm_3_left_s0_write),                      //                         .write
		.av_read                (m1_clock_bridge_comm_3_left_s0_read),                       //                         .read
		.av_readdata            (m1_clock_bridge_comm_3_left_s0_readdata),                   //                         .readdata
		.av_writedata           (m1_clock_bridge_comm_3_left_s0_writedata),                  //                         .writedata
		.av_burstcount          (m1_clock_bridge_comm_3_left_s0_burstcount),                 //                         .burstcount
		.av_byteenable          (m1_clock_bridge_comm_3_left_s0_byteenable),                 //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_comm_3_left_s0_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_comm_3_left_s0_waitrequest),                //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_comm_3_left_s0_debugaccess),                //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_comm_4_left_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_comm_4_left_s0_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_comm_4_left_s0_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (m1_clock_bridge_comm_4_left_s0_agent_m0_read),              //                         .read
		.uav_write              (m1_clock_bridge_comm_4_left_s0_agent_m0_write),             //                         .write
		.uav_waitrequest        (m1_clock_bridge_comm_4_left_s0_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_comm_4_left_s0_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_comm_4_left_s0_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (m1_clock_bridge_comm_4_left_s0_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (m1_clock_bridge_comm_4_left_s0_agent_m0_writedata),         //                         .writedata
		.uav_lock               (m1_clock_bridge_comm_4_left_s0_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (m1_clock_bridge_comm_4_left_s0_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (m1_clock_bridge_comm_4_left_s0_address),                    //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_comm_4_left_s0_write),                      //                         .write
		.av_read                (m1_clock_bridge_comm_4_left_s0_read),                       //                         .read
		.av_readdata            (m1_clock_bridge_comm_4_left_s0_readdata),                   //                         .readdata
		.av_writedata           (m1_clock_bridge_comm_4_left_s0_writedata),                  //                         .writedata
		.av_burstcount          (m1_clock_bridge_comm_4_left_s0_burstcount),                 //                         .burstcount
		.av_byteenable          (m1_clock_bridge_comm_4_left_s0_byteenable),                 //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_comm_4_left_s0_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_comm_4_left_s0_waitrequest),                //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_comm_4_left_s0_debugaccess),                //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_comm_2_left_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_comm_2_left_s0_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_comm_2_left_s0_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (m1_clock_bridge_comm_2_left_s0_agent_m0_read),              //                         .read
		.uav_write              (m1_clock_bridge_comm_2_left_s0_agent_m0_write),             //                         .write
		.uav_waitrequest        (m1_clock_bridge_comm_2_left_s0_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_comm_2_left_s0_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_comm_2_left_s0_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (m1_clock_bridge_comm_2_left_s0_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (m1_clock_bridge_comm_2_left_s0_agent_m0_writedata),         //                         .writedata
		.uav_lock               (m1_clock_bridge_comm_2_left_s0_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (m1_clock_bridge_comm_2_left_s0_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (m1_clock_bridge_comm_2_left_s0_address),                    //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_comm_2_left_s0_write),                      //                         .write
		.av_read                (m1_clock_bridge_comm_2_left_s0_read),                       //                         .read
		.av_readdata            (m1_clock_bridge_comm_2_left_s0_readdata),                   //                         .readdata
		.av_writedata           (m1_clock_bridge_comm_2_left_s0_writedata),                  //                         .writedata
		.av_burstcount          (m1_clock_bridge_comm_2_left_s0_burstcount),                 //                         .burstcount
		.av_byteenable          (m1_clock_bridge_comm_2_left_s0_byteenable),                 //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_comm_2_left_s0_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_comm_2_left_s0_waitrequest),                //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_comm_2_left_s0_debugaccess),                //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_comm_1_left_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_comm_1_left_s0_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_comm_1_left_s0_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (m1_clock_bridge_comm_1_left_s0_agent_m0_read),              //                         .read
		.uav_write              (m1_clock_bridge_comm_1_left_s0_agent_m0_write),             //                         .write
		.uav_waitrequest        (m1_clock_bridge_comm_1_left_s0_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_comm_1_left_s0_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_comm_1_left_s0_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (m1_clock_bridge_comm_1_left_s0_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (m1_clock_bridge_comm_1_left_s0_agent_m0_writedata),         //                         .writedata
		.uav_lock               (m1_clock_bridge_comm_1_left_s0_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (m1_clock_bridge_comm_1_left_s0_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (m1_clock_bridge_comm_1_left_s0_address),                    //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_comm_1_left_s0_write),                      //                         .write
		.av_read                (m1_clock_bridge_comm_1_left_s0_read),                       //                         .read
		.av_readdata            (m1_clock_bridge_comm_1_left_s0_readdata),                   //                         .readdata
		.av_writedata           (m1_clock_bridge_comm_1_left_s0_writedata),                  //                         .writedata
		.av_burstcount          (m1_clock_bridge_comm_1_left_s0_burstcount),                 //                         .burstcount
		.av_byteenable          (m1_clock_bridge_comm_1_left_s0_byteenable),                 //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_comm_1_left_s0_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_comm_1_left_s0_waitrequest),                //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_comm_1_left_s0_debugaccess),                //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (131),
		.PKT_ORI_BURST_SIZE_L      (129),
		.PKT_RESPONSE_STATUS_H     (128),
		.PKT_RESPONSE_STATUS_L     (127),
		.PKT_QOS_H                 (110),
		.PKT_QOS_L                 (110),
		.PKT_DATA_SIDEBAND_H       (108),
		.PKT_DATA_SIDEBAND_L       (108),
		.PKT_ADDR_SIDEBAND_H       (107),
		.PKT_ADDR_SIDEBAND_L       (107),
		.PKT_BURST_TYPE_H          (106),
		.PKT_BURST_TYPE_L          (105),
		.PKT_CACHE_H               (126),
		.PKT_CACHE_L               (123),
		.PKT_THREAD_ID_H           (119),
		.PKT_THREAD_ID_L           (119),
		.PKT_BURST_SIZE_H          (104),
		.PKT_BURST_SIZE_L          (102),
		.PKT_TRANS_EXCLUSIVE       (87),
		.PKT_TRANS_LOCK            (86),
		.PKT_BEGIN_BURST           (109),
		.PKT_PROTECTION_H          (122),
		.PKT_PROTECTION_L          (120),
		.PKT_BURSTWRAP_H           (101),
		.PKT_BURSTWRAP_L           (101),
		.PKT_BYTE_CNT_H            (100),
		.PKT_BYTE_CNT_L            (88),
		.PKT_ADDR_H                (81),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (82),
		.PKT_TRANS_POSTED          (83),
		.PKT_TRANS_WRITE           (84),
		.PKT_TRANS_READ            (85),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (114),
		.PKT_SRC_ID_L              (111),
		.PKT_DEST_ID_H             (118),
		.PKT_DEST_ID_L             (115),
		.ST_DATA_W                 (132),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (8),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ftdi_umft601a_module_avalon_imgt_master_data_agent (
		.clk                   (clk_100_clk_clk),                                                                                 //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ftdi_umft601a_module_avalon_imgt_master_data_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_ready),                                     //          .ready
		.rp_valid              (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (9),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ftdi_umft601a_module_avalon_master_data_agent (
		.clk                   (clk_100_clk_clk),                                                                            //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ftdi_umft601a_module_avalon_master_data_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ftdi_umft601a_module_avalon_master_data_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ftdi_umft601a_module_avalon_master_data_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ftdi_umft601a_module_avalon_master_data_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ftdi_umft601a_module_avalon_master_data_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ftdi_umft601a_module_avalon_master_data_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                      //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                       //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                                    //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                                //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                      //          .ready
		.av_response           (),                                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (10),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) memory_filler_avalon_master_data_agent (
		.clk                   (clk_100_clk_clk),                                                                     //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (memory_filler_avalon_master_data_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (memory_filler_avalon_master_data_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (memory_filler_avalon_master_data_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (memory_filler_avalon_master_data_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (memory_filler_avalon_master_data_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (memory_filler_avalon_master_data_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (memory_filler_avalon_master_data_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (memory_filler_avalon_master_data_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (memory_filler_avalon_master_data_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (memory_filler_avalon_master_data_agent_cp_valid),                                     //        cp.valid
		.cp_data               (memory_filler_avalon_master_data_agent_cp_data),                                      //          .data
		.cp_startofpacket      (memory_filler_avalon_master_data_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (memory_filler_avalon_master_data_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (memory_filler_avalon_master_data_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                               //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                                //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                             //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                         //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                               //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) communication_module_v2_ch1_avalon_mm_left_buffer_master_agent (
		.clk                   (clk_100_clk_clk),                                                                                             //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.av_address            (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (communication_module_v2_ch1_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                                                       //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                                                        //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                                                     //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                                                 //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                                                       //          .ready
		.av_response           (),                                                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) communication_module_v2_ch2_avalon_mm_left_buffer_master_agent (
		.clk                   (clk_100_clk_clk),                                                                                             //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.av_address            (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (communication_module_v2_ch2_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                                                       //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                                                        //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                                                     //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                                                 //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                                                       //          .ready
		.av_response           (),                                                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) communication_module_v2_ch4_avalon_mm_left_buffer_master_agent (
		.clk                   (clk_100_clk_clk),                                                                                             //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.av_address            (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (communication_module_v2_ch4_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                                                       //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                                                        //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                                                     //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                                                 //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                                                       //          .ready
		.av_response           (),                                                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) communication_module_v2_ch3_avalon_mm_left_buffer_master_agent (
		.clk                   (clk_100_clk_clk),                                                                                             //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.av_address            (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (communication_module_v2_ch3_avalon_mm_left_buffer_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                                                       //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                                                        //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                                                     //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                                                 //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                                                       //          .ready
		.av_response           (),                                                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) communication_module_v2_ch1_avalon_mm_right_buffer_master_agent (
		.clk                   (clk_100_clk_clk),                                                                                              //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.av_address            (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (communication_module_v2_ch1_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                                                        //        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                                                         //          .data
		.rp_channel            (rsp_mux_007_src_channel),                                                                                      //          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                                                                  //          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready),                                                                                        //          .ready
		.av_response           (),                                                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) communication_module_v2_ch2_avalon_mm_right_buffer_master_agent (
		.clk                   (clk_100_clk_clk),                                                                                              //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.av_address            (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (communication_module_v2_ch2_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_008_src_valid),                                                                                        //        rp.valid
		.rp_data               (rsp_mux_008_src_data),                                                                                         //          .data
		.rp_channel            (rsp_mux_008_src_channel),                                                                                      //          .channel
		.rp_startofpacket      (rsp_mux_008_src_startofpacket),                                                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_008_src_endofpacket),                                                                                  //          .endofpacket
		.rp_ready              (rsp_mux_008_src_ready),                                                                                        //          .ready
		.av_response           (),                                                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) communication_module_v2_ch4_avalon_mm_right_buffer_master_agent (
		.clk                   (clk_100_clk_clk),                                                                                              //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.av_address            (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (communication_module_v2_ch4_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_009_src_valid),                                                                                        //        rp.valid
		.rp_data               (rsp_mux_009_src_data),                                                                                         //          .data
		.rp_channel            (rsp_mux_009_src_channel),                                                                                      //          .channel
		.rp_startofpacket      (rsp_mux_009_src_startofpacket),                                                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_009_src_endofpacket),                                                                                  //          .endofpacket
		.rp_ready              (rsp_mux_009_src_ready),                                                                                        //          .ready
		.av_response           (),                                                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_QOS_H                 (380),
		.PKT_QOS_L                 (380),
		.PKT_DATA_SIDEBAND_H       (378),
		.PKT_DATA_SIDEBAND_L       (378),
		.PKT_ADDR_SIDEBAND_H       (377),
		.PKT_ADDR_SIDEBAND_L       (377),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_CACHE_H               (396),
		.PKT_CACHE_L               (393),
		.PKT_THREAD_ID_H           (389),
		.PKT_THREAD_ID_L           (389),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) communication_module_v2_ch3_avalon_mm_right_buffer_master_agent (
		.clk                   (clk_100_clk_clk),                                                                                              //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.av_address            (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (communication_module_v2_ch3_avalon_mm_right_buffer_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_010_src_valid),                                                                                        //        rp.valid
		.rp_data               (rsp_mux_010_src_data),                                                                                         //          .data
		.rp_channel            (rsp_mux_010_src_channel),                                                                                      //          .channel
		.rp_startofpacket      (rsp_mux_010_src_startofpacket),                                                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_010_src_endofpacket),                                                                                  //          .endofpacket
		.rp_ready              (rsp_mux_010_src_ready),                                                                                        //          .ready
		.av_response           (),                                                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_QOS_H                 (101),
		.PKT_QOS_L                 (101),
		.PKT_DATA_SIDEBAND_H       (99),
		.PKT_DATA_SIDEBAND_L       (99),
		.PKT_ADDR_SIDEBAND_H       (98),
		.PKT_ADDR_SIDEBAND_L       (98),
		.PKT_BURST_TYPE_H          (97),
		.PKT_BURST_TYPE_L          (96),
		.PKT_CACHE_H               (117),
		.PKT_CACHE_L               (114),
		.PKT_THREAD_ID_H           (110),
		.PKT_THREAD_ID_L           (110),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_EXCLUSIVE       (78),
		.PKT_TRANS_LOCK            (77),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (92),
		.PKT_BYTE_CNT_H            (91),
		.PKT_BYTE_CNT_L            (79),
		.PKT_ADDR_H                (72),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (73),
		.PKT_TRANS_POSTED          (74),
		.PKT_TRANS_WRITE           (75),
		.PKT_TRANS_READ            (76),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (106),
		.ST_DATA_W                 (123),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (12),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent (
		.clk                   (clk_100_clk_clk),                                                                                 //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (149),
		.PKT_ORI_BURST_SIZE_L      (147),
		.PKT_RESPONSE_STATUS_H     (146),
		.PKT_RESPONSE_STATUS_L     (145),
		.PKT_QOS_H                 (128),
		.PKT_QOS_L                 (128),
		.PKT_DATA_SIDEBAND_H       (126),
		.PKT_DATA_SIDEBAND_L       (126),
		.PKT_ADDR_SIDEBAND_H       (125),
		.PKT_ADDR_SIDEBAND_L       (125),
		.PKT_BURST_TYPE_H          (124),
		.PKT_BURST_TYPE_L          (123),
		.PKT_CACHE_H               (144),
		.PKT_CACHE_L               (141),
		.PKT_THREAD_ID_H           (137),
		.PKT_THREAD_ID_L           (137),
		.PKT_BURST_SIZE_H          (122),
		.PKT_BURST_SIZE_L          (120),
		.PKT_TRANS_EXCLUSIVE       (105),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (127),
		.PKT_PROTECTION_H          (140),
		.PKT_PROTECTION_L          (138),
		.PKT_BURSTWRAP_H           (119),
		.PKT_BURSTWRAP_L           (119),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (129),
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (133),
		.ST_DATA_W                 (150),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (11),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ddr2_address_span_extender_expanded_master_agent (
		.clk                   (clk_100_clk_clk),                                                                               //       clk.clk
		.reset                 (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ddr2_address_span_extender_expanded_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ddr2_address_span_extender_expanded_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ddr2_address_span_extender_expanded_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ddr2_address_span_extender_expanded_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ddr2_address_span_extender_expanded_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (ddr2_address_span_extender_expanded_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (ddr2_address_span_extender_expanded_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (ddr2_address_span_extender_expanded_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (ddr2_address_span_extender_expanded_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (ddr2_address_span_extender_expanded_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (ddr2_address_span_extender_expanded_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m2_ddr2_memory_avl_agent (
		.clk                     (m2_ddr2_memory_afi_clk_clk),                                      //             clk.clk
		.reset                   (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (m2_ddr2_memory_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (m2_ddr2_memory_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (m2_ddr2_memory_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (m2_ddr2_memory_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (m2_ddr2_memory_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (m2_ddr2_memory_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (m2_ddr2_memory_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (m2_ddr2_memory_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (m2_ddr2_memory_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (m2_ddr2_memory_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (m2_ddr2_memory_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (m2_ddr2_memory_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (m2_ddr2_memory_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (m2_ddr2_memory_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (m2_ddr2_memory_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (m2_ddr2_memory_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                             //                .channel
		.rf_sink_ready           (m2_ddr2_memory_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (m2_ddr2_memory_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (m2_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (m2_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (m2_ddr2_memory_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (m2_ddr2_memory_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (m2_ddr2_memory_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (m2_ddr2_memory_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (m2_ddr2_memory_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (m2_ddr2_memory_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (m2_ddr2_memory_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m2_ddr2_memory_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (m2_ddr2_memory_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m2_ddr2_memory_avl_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m2_ddr2_memory_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (m2_ddr2_memory_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (m2_ddr2_memory_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (m2_ddr2_memory_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (m2_ddr2_memory_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (m2_ddr2_memory_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (m2_ddr2_memory_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (m2_ddr2_memory_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (m2_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (m2_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (1024),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m2_ddr2_memory_avl_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m2_ddr2_memory_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (m2_ddr2_memory_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (m2_ddr2_memory_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (m2_ddr2_memory_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (m2_ddr2_memory_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (m2_ddr2_memory_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_ftdi_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                           //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (m1_clock_bridge_ftdi_s0_agent_m0_address),                  //              m0.address
		.m0_burstcount           (m1_clock_bridge_ftdi_s0_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (m1_clock_bridge_ftdi_s0_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_ftdi_s0_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (m1_clock_bridge_ftdi_s0_agent_m0_lock),                     //                .lock
		.m0_readdata             (m1_clock_bridge_ftdi_s0_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_ftdi_s0_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (m1_clock_bridge_ftdi_s0_agent_m0_read),                     //                .read
		.m0_waitrequest          (m1_clock_bridge_ftdi_s0_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (m1_clock_bridge_ftdi_s0_agent_m0_writedata),                //                .writedata
		.m0_write                (m1_clock_bridge_ftdi_s0_agent_m0_write),                    //                .write
		.rp_endofpacket          (m1_clock_bridge_ftdi_s0_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_ftdi_s0_agent_rp_ready),                    //                .ready
		.rp_valid                (m1_clock_bridge_ftdi_s0_agent_rp_valid),                    //                .valid
		.rp_data                 (m1_clock_bridge_ftdi_s0_agent_rp_data),                     //                .data
		.rp_startofpacket        (m1_clock_bridge_ftdi_s0_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                   //                .channel
		.rf_sink_ready           (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (m1_clock_bridge_ftdi_s0_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_ftdi_s0_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (m1_clock_bridge_ftdi_s0_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_ftdi_s0_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (m1_clock_bridge_ftdi_s0_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_ftdi_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_ftdi_s0_agent_rf_source_data),              //        in.data
		.in_valid          (m1_clock_bridge_ftdi_s0_agent_rf_source_valid),             //          .valid
		.in_ready          (m1_clock_bridge_ftdi_s0_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (m1_clock_bridge_ftdi_s0_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_ftdi_s0_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_ftdi_s0_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_ftdi_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_general_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                                //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (m1_clock_bridge_general_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (m1_clock_bridge_general_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (m1_clock_bridge_general_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_general_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (m1_clock_bridge_general_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (m1_clock_bridge_general_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_general_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (m1_clock_bridge_general_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (m1_clock_bridge_general_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (m1_clock_bridge_general_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (m1_clock_bridge_general_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (m1_clock_bridge_general_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_general_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (m1_clock_bridge_general_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (m1_clock_bridge_general_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (m1_clock_bridge_general_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (m1_clock_bridge_general_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (m1_clock_bridge_general_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (m1_clock_bridge_general_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (m1_clock_bridge_general_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (m1_clock_bridge_general_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (m1_clock_bridge_general_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (m1_clock_bridge_general_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_general_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_general_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_general_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_general_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (m1_clock_bridge_general_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_general_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (m1_clock_bridge_general_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_general_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (m1_clock_bridge_general_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_general_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_general_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_general_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_general_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                             //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (m1_clock_bridge_general_s0_agent_rf_source_data),             //        in.data
		.in_valid          (m1_clock_bridge_general_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (m1_clock_bridge_general_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (m1_clock_bridge_general_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_general_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (m1_clock_bridge_general_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (m1_clock_bridge_general_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (m1_clock_bridge_general_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (m1_clock_bridge_general_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_general_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_general_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_general_s0_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (m1_clock_bridge_general_s0_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (m1_clock_bridge_general_s0_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (m1_clock_bridge_general_s0_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (m1_clock_bridge_general_s0_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (m1_clock_bridge_general_s0_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_comm_3_right_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                                  //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (m1_clock_bridge_comm_3_right_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (m1_clock_bridge_comm_3_right_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (m1_clock_bridge_comm_3_right_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_comm_3_right_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (m1_clock_bridge_comm_3_right_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (m1_clock_bridge_comm_3_right_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_comm_3_right_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (m1_clock_bridge_comm_3_right_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (m1_clock_bridge_comm_3_right_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (m1_clock_bridge_comm_3_right_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (m1_clock_bridge_comm_3_right_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (m1_clock_bridge_comm_3_right_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_comm_3_right_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (m1_clock_bridge_comm_3_right_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (m1_clock_bridge_comm_3_right_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (m1_clock_bridge_comm_3_right_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                          //                .channel
		.rf_sink_ready           (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (m1_clock_bridge_comm_3_right_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_comm_3_right_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (m1_clock_bridge_comm_3_right_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_comm_3_right_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (m1_clock_bridge_comm_3_right_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                                  //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_3_right_s0_agent_rf_source_data),             //        in.data
		.in_valid          (m1_clock_bridge_comm_3_right_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (m1_clock_bridge_comm_3_right_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (m1_clock_bridge_comm_3_right_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_comm_3_right_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_comm_3_right_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                            //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_comm_4_right_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                                  //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (m1_clock_bridge_comm_4_right_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (m1_clock_bridge_comm_4_right_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (m1_clock_bridge_comm_4_right_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_comm_4_right_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (m1_clock_bridge_comm_4_right_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (m1_clock_bridge_comm_4_right_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_comm_4_right_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (m1_clock_bridge_comm_4_right_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (m1_clock_bridge_comm_4_right_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (m1_clock_bridge_comm_4_right_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (m1_clock_bridge_comm_4_right_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (m1_clock_bridge_comm_4_right_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_comm_4_right_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (m1_clock_bridge_comm_4_right_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (m1_clock_bridge_comm_4_right_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (m1_clock_bridge_comm_4_right_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                          //                .channel
		.rf_sink_ready           (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (m1_clock_bridge_comm_4_right_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_comm_4_right_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (m1_clock_bridge_comm_4_right_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_comm_4_right_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (m1_clock_bridge_comm_4_right_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                                  //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_4_right_s0_agent_rf_source_data),             //        in.data
		.in_valid          (m1_clock_bridge_comm_4_right_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (m1_clock_bridge_comm_4_right_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (m1_clock_bridge_comm_4_right_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_comm_4_right_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_comm_4_right_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                            //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_comm_2_right_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                                  //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (m1_clock_bridge_comm_2_right_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (m1_clock_bridge_comm_2_right_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (m1_clock_bridge_comm_2_right_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_comm_2_right_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (m1_clock_bridge_comm_2_right_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (m1_clock_bridge_comm_2_right_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_comm_2_right_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (m1_clock_bridge_comm_2_right_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (m1_clock_bridge_comm_2_right_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (m1_clock_bridge_comm_2_right_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (m1_clock_bridge_comm_2_right_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (m1_clock_bridge_comm_2_right_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_comm_2_right_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (m1_clock_bridge_comm_2_right_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (m1_clock_bridge_comm_2_right_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (m1_clock_bridge_comm_2_right_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                          //                .channel
		.rf_sink_ready           (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (m1_clock_bridge_comm_2_right_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_comm_2_right_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (m1_clock_bridge_comm_2_right_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_comm_2_right_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (m1_clock_bridge_comm_2_right_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                                  //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_2_right_s0_agent_rf_source_data),             //        in.data
		.in_valid          (m1_clock_bridge_comm_2_right_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (m1_clock_bridge_comm_2_right_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (m1_clock_bridge_comm_2_right_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_comm_2_right_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_comm_2_right_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                            //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_comm_1_right_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                                  //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (m1_clock_bridge_comm_1_right_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (m1_clock_bridge_comm_1_right_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (m1_clock_bridge_comm_1_right_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_comm_1_right_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (m1_clock_bridge_comm_1_right_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (m1_clock_bridge_comm_1_right_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_comm_1_right_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (m1_clock_bridge_comm_1_right_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (m1_clock_bridge_comm_1_right_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (m1_clock_bridge_comm_1_right_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (m1_clock_bridge_comm_1_right_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (m1_clock_bridge_comm_1_right_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_comm_1_right_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (m1_clock_bridge_comm_1_right_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (m1_clock_bridge_comm_1_right_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (m1_clock_bridge_comm_1_right_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                          //                .channel
		.rf_sink_ready           (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (m1_clock_bridge_comm_1_right_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_comm_1_right_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (m1_clock_bridge_comm_1_right_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_comm_1_right_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (m1_clock_bridge_comm_1_right_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                                  //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_1_right_s0_agent_rf_source_data),             //        in.data
		.in_valid          (m1_clock_bridge_comm_1_right_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (m1_clock_bridge_comm_1_right_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (m1_clock_bridge_comm_1_right_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_comm_1_right_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_comm_1_right_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                            //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_comm_3_left_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                                 //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (m1_clock_bridge_comm_3_left_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (m1_clock_bridge_comm_3_left_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (m1_clock_bridge_comm_3_left_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_comm_3_left_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (m1_clock_bridge_comm_3_left_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (m1_clock_bridge_comm_3_left_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_comm_3_left_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (m1_clock_bridge_comm_3_left_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (m1_clock_bridge_comm_3_left_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (m1_clock_bridge_comm_3_left_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (m1_clock_bridge_comm_3_left_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (m1_clock_bridge_comm_3_left_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_comm_3_left_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (m1_clock_bridge_comm_3_left_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (m1_clock_bridge_comm_3_left_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (m1_clock_bridge_comm_3_left_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                         //                .channel
		.rf_sink_ready           (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (m1_clock_bridge_comm_3_left_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_comm_3_left_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (m1_clock_bridge_comm_3_left_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_comm_3_left_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (m1_clock_bridge_comm_3_left_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                                 //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_3_left_s0_agent_rf_source_data),             //        in.data
		.in_valid          (m1_clock_bridge_comm_3_left_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (m1_clock_bridge_comm_3_left_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (m1_clock_bridge_comm_3_left_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_comm_3_left_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_comm_3_left_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_comm_4_left_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                                 //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (m1_clock_bridge_comm_4_left_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (m1_clock_bridge_comm_4_left_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (m1_clock_bridge_comm_4_left_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_comm_4_left_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (m1_clock_bridge_comm_4_left_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (m1_clock_bridge_comm_4_left_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_comm_4_left_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (m1_clock_bridge_comm_4_left_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (m1_clock_bridge_comm_4_left_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (m1_clock_bridge_comm_4_left_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (m1_clock_bridge_comm_4_left_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (m1_clock_bridge_comm_4_left_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_comm_4_left_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (m1_clock_bridge_comm_4_left_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (m1_clock_bridge_comm_4_left_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (m1_clock_bridge_comm_4_left_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                         //                .channel
		.rf_sink_ready           (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (m1_clock_bridge_comm_4_left_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_comm_4_left_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (m1_clock_bridge_comm_4_left_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_comm_4_left_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (m1_clock_bridge_comm_4_left_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                                 //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_4_left_s0_agent_rf_source_data),             //        in.data
		.in_valid          (m1_clock_bridge_comm_4_left_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (m1_clock_bridge_comm_4_left_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (m1_clock_bridge_comm_4_left_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_comm_4_left_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_comm_4_left_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_comm_2_left_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                                 //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (m1_clock_bridge_comm_2_left_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (m1_clock_bridge_comm_2_left_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (m1_clock_bridge_comm_2_left_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_comm_2_left_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (m1_clock_bridge_comm_2_left_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (m1_clock_bridge_comm_2_left_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_comm_2_left_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (m1_clock_bridge_comm_2_left_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (m1_clock_bridge_comm_2_left_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (m1_clock_bridge_comm_2_left_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (m1_clock_bridge_comm_2_left_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (m1_clock_bridge_comm_2_left_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_comm_2_left_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (m1_clock_bridge_comm_2_left_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (m1_clock_bridge_comm_2_left_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (m1_clock_bridge_comm_2_left_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                         //                .channel
		.rf_sink_ready           (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (m1_clock_bridge_comm_2_left_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_comm_2_left_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (m1_clock_bridge_comm_2_left_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_comm_2_left_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (m1_clock_bridge_comm_2_left_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                                 //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_2_left_s0_agent_rf_source_data),             //        in.data
		.in_valid          (m1_clock_bridge_comm_2_left_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (m1_clock_bridge_comm_2_left_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (m1_clock_bridge_comm_2_left_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_comm_2_left_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_comm_2_left_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (401),
		.PKT_ORI_BURST_SIZE_L      (399),
		.PKT_RESPONSE_STATUS_H     (398),
		.PKT_RESPONSE_STATUS_L     (397),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (379),
		.PKT_PROTECTION_H          (392),
		.PKT_PROTECTION_L          (390),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (384),
		.PKT_SRC_ID_L              (381),
		.PKT_DEST_ID_H             (388),
		.PKT_DEST_ID_L             (385),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (402),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_comm_1_left_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                                 //             clk.clk
		.reset                   (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (m1_clock_bridge_comm_1_left_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (m1_clock_bridge_comm_1_left_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (m1_clock_bridge_comm_1_left_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_comm_1_left_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (m1_clock_bridge_comm_1_left_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (m1_clock_bridge_comm_1_left_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_comm_1_left_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (m1_clock_bridge_comm_1_left_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (m1_clock_bridge_comm_1_left_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (m1_clock_bridge_comm_1_left_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (m1_clock_bridge_comm_1_left_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (m1_clock_bridge_comm_1_left_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_comm_1_left_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (m1_clock_bridge_comm_1_left_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (m1_clock_bridge_comm_1_left_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (m1_clock_bridge_comm_1_left_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                         //                .channel
		.rf_sink_ready           (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (m1_clock_bridge_comm_1_left_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_comm_1_left_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (m1_clock_bridge_comm_1_left_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_comm_1_left_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (m1_clock_bridge_comm_1_left_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (403),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                                 //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_1_left_s0_agent_rf_source_data),             //        in.data
		.in_valid          (m1_clock_bridge_comm_1_left_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (m1_clock_bridge_comm_1_left_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (m1_clock_bridge_comm_1_left_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_comm_1_left_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_comm_1_left_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset             (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_0_router router (
		.sink_ready         (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_ready),         //      sink.ready
		.sink_valid         (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_valid),         //          .valid
		.sink_data          (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_data),          //          .data
		.sink_startofpacket (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ftdi_umft601a_module_avalon_imgt_master_data_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                     //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (ftdi_umft601a_module_avalon_master_data_agent_cp_ready),         //      sink.ready
		.sink_valid         (ftdi_umft601a_module_avalon_master_data_agent_cp_valid),         //          .valid
		.sink_data          (ftdi_umft601a_module_avalon_master_data_agent_cp_data),          //          .data
		.sink_startofpacket (ftdi_umft601a_module_avalon_master_data_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ftdi_umft601a_module_avalon_master_data_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_001_src_ready),                                           //       src.ready
		.src_valid          (router_001_src_valid),                                           //          .valid
		.src_data           (router_001_src_data),                                            //          .data
		.src_channel        (router_001_src_channel),                                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                      //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (memory_filler_avalon_master_data_agent_cp_ready),             //      sink.ready
		.sink_valid         (memory_filler_avalon_master_data_agent_cp_valid),             //          .valid
		.sink_data          (memory_filler_avalon_master_data_agent_cp_data),              //          .data
		.sink_startofpacket (memory_filler_avalon_master_data_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (memory_filler_avalon_master_data_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                        //       src.ready
		.src_valid          (router_002_src_valid),                                        //          .valid
		.src_data           (router_002_src_data),                                         //          .data
		.src_channel        (router_002_src_channel),                                      //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_valid),         //          .valid
		.sink_data          (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_data),          //          .data
		.sink_startofpacket (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (communication_module_v2_ch1_avalon_mm_left_buffer_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                                 //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                            //       src.ready
		.src_valid          (router_003_src_valid),                                                            //          .valid
		.src_data           (router_003_src_data),                                                             //          .data
		.src_channel        (router_003_src_channel),                                                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_valid),         //          .valid
		.sink_data          (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_data),          //          .data
		.sink_startofpacket (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (communication_module_v2_ch2_avalon_mm_left_buffer_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                                 //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready          (router_004_src_ready),                                                            //       src.ready
		.src_valid          (router_004_src_valid),                                                            //          .valid
		.src_data           (router_004_src_data),                                                             //          .data
		.src_channel        (router_004_src_channel),                                                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_valid),         //          .valid
		.sink_data          (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_data),          //          .data
		.sink_startofpacket (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (communication_module_v2_ch4_avalon_mm_left_buffer_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                                 //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready          (router_005_src_ready),                                                            //       src.ready
		.src_valid          (router_005_src_valid),                                                            //          .valid
		.src_data           (router_005_src_data),                                                             //          .data
		.src_channel        (router_005_src_channel),                                                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_valid),         //          .valid
		.sink_data          (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_data),          //          .data
		.sink_startofpacket (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (communication_module_v2_ch3_avalon_mm_left_buffer_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                                 //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready          (router_006_src_ready),                                                            //       src.ready
		.src_valid          (router_006_src_valid),                                                            //          .valid
		.src_data           (router_006_src_data),                                                             //          .data
		.src_channel        (router_006_src_channel),                                                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_valid),         //          .valid
		.sink_data          (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_data),          //          .data
		.sink_startofpacket (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (communication_module_v2_ch1_avalon_mm_right_buffer_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                                  //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (router_007_src_ready),                                                             //       src.ready
		.src_valid          (router_007_src_valid),                                                             //          .valid
		.src_data           (router_007_src_data),                                                              //          .data
		.src_channel        (router_007_src_channel),                                                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_valid),         //          .valid
		.sink_data          (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_data),          //          .data
		.sink_startofpacket (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (communication_module_v2_ch2_avalon_mm_right_buffer_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                                  //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (router_008_src_ready),                                                             //       src.ready
		.src_valid          (router_008_src_valid),                                                             //          .valid
		.src_data           (router_008_src_data),                                                              //          .data
		.src_channel        (router_008_src_channel),                                                           //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_valid),         //          .valid
		.sink_data          (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_data),          //          .data
		.sink_startofpacket (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (communication_module_v2_ch4_avalon_mm_right_buffer_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                                  //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (router_009_src_ready),                                                             //       src.ready
		.src_valid          (router_009_src_valid),                                                             //          .valid
		.src_data           (router_009_src_data),                                                              //          .data
		.src_channel        (router_009_src_channel),                                                           //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_valid),         //          .valid
		.sink_data          (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_data),          //          .data
		.sink_startofpacket (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (communication_module_v2_ch3_avalon_mm_right_buffer_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                                  //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (router_010_src_ready),                                                             //       src.ready
		.src_valid          (router_010_src_valid),                                                             //          .valid
		.src_data           (router_010_src_data),                                                              //          .data
		.src_channel        (router_010_src_channel),                                                           //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_valid),         //          .valid
		.sink_data          (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_data),          //          .data
		.sink_startofpacket (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                     //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_011_src_ready),                                                //       src.ready
		.src_valid          (router_011_src_valid),                                                //          .valid
		.src_data           (router_011_src_data),                                                 //          .data
		.src_channel        (router_011_src_channel),                                              //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (ddr2_address_span_extender_expanded_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ddr2_address_span_extender_expanded_master_agent_cp_valid),         //          .valid
		.sink_data          (ddr2_address_span_extender_expanded_master_agent_cp_data),          //          .data
		.sink_startofpacket (ddr2_address_span_extender_expanded_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ddr2_address_span_extender_expanded_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                   //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_012_src_ready),                                              //       src.ready
		.src_valid          (router_012_src_valid),                                              //          .valid
		.src_data           (router_012_src_data),                                               //          .data
		.src_channel        (router_012_src_channel),                                            //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (m2_ddr2_memory_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (m2_ddr2_memory_avl_agent_rp_valid),                               //          .valid
		.sink_data          (m2_ddr2_memory_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (m2_ddr2_memory_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (m2_ddr2_memory_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset              (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                            //       src.ready
		.src_valid          (router_013_src_valid),                                            //          .valid
		.src_data           (router_013_src_data),                                             //          .data
		.src_channel        (router_013_src_channel),                                          //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_014 router_014 (
		.sink_ready         (m1_clock_bridge_ftdi_s0_agent_rp_ready),                    //      sink.ready
		.sink_valid         (m1_clock_bridge_ftdi_s0_agent_rp_valid),                    //          .valid
		.sink_data          (m1_clock_bridge_ftdi_s0_agent_rp_data),                     //          .data
		.sink_startofpacket (m1_clock_bridge_ftdi_s0_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ftdi_s0_agent_rp_endofpacket),              //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                      //       src.ready
		.src_valid          (router_014_src_valid),                                      //          .valid
		.src_data           (router_014_src_data),                                       //          .data
		.src_channel        (router_014_src_channel),                                    //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_015 router_015 (
		.sink_ready         (m1_clock_bridge_general_s0_agent_rp_ready),                 //      sink.ready
		.sink_valid         (m1_clock_bridge_general_s0_agent_rp_valid),                 //          .valid
		.sink_data          (m1_clock_bridge_general_s0_agent_rp_data),                  //          .data
		.sink_startofpacket (m1_clock_bridge_general_s0_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_general_s0_agent_rp_endofpacket),           //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                      //       src.ready
		.src_valid          (router_015_src_valid),                                      //          .valid
		.src_data           (router_015_src_data),                                       //          .data
		.src_channel        (router_015_src_channel),                                    //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_016 router_016 (
		.sink_ready         (m1_clock_bridge_comm_3_right_s0_agent_rp_ready),            //      sink.ready
		.sink_valid         (m1_clock_bridge_comm_3_right_s0_agent_rp_valid),            //          .valid
		.sink_data          (m1_clock_bridge_comm_3_right_s0_agent_rp_data),             //          .data
		.sink_startofpacket (m1_clock_bridge_comm_3_right_s0_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_comm_3_right_s0_agent_rp_endofpacket),      //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                      //       src.ready
		.src_valid          (router_016_src_valid),                                      //          .valid
		.src_data           (router_016_src_data),                                       //          .data
		.src_channel        (router_016_src_channel),                                    //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_017 router_017 (
		.sink_ready         (m1_clock_bridge_comm_4_right_s0_agent_rp_ready),            //      sink.ready
		.sink_valid         (m1_clock_bridge_comm_4_right_s0_agent_rp_valid),            //          .valid
		.sink_data          (m1_clock_bridge_comm_4_right_s0_agent_rp_data),             //          .data
		.sink_startofpacket (m1_clock_bridge_comm_4_right_s0_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_comm_4_right_s0_agent_rp_endofpacket),      //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                      //       src.ready
		.src_valid          (router_017_src_valid),                                      //          .valid
		.src_data           (router_017_src_data),                                       //          .data
		.src_channel        (router_017_src_channel),                                    //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_018 router_018 (
		.sink_ready         (m1_clock_bridge_comm_2_right_s0_agent_rp_ready),            //      sink.ready
		.sink_valid         (m1_clock_bridge_comm_2_right_s0_agent_rp_valid),            //          .valid
		.sink_data          (m1_clock_bridge_comm_2_right_s0_agent_rp_data),             //          .data
		.sink_startofpacket (m1_clock_bridge_comm_2_right_s0_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_comm_2_right_s0_agent_rp_endofpacket),      //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                      //       src.ready
		.src_valid          (router_018_src_valid),                                      //          .valid
		.src_data           (router_018_src_data),                                       //          .data
		.src_channel        (router_018_src_channel),                                    //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_019 router_019 (
		.sink_ready         (m1_clock_bridge_comm_1_right_s0_agent_rp_ready),            //      sink.ready
		.sink_valid         (m1_clock_bridge_comm_1_right_s0_agent_rp_valid),            //          .valid
		.sink_data          (m1_clock_bridge_comm_1_right_s0_agent_rp_data),             //          .data
		.sink_startofpacket (m1_clock_bridge_comm_1_right_s0_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_comm_1_right_s0_agent_rp_endofpacket),      //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                      //       src.ready
		.src_valid          (router_019_src_valid),                                      //          .valid
		.src_data           (router_019_src_data),                                       //          .data
		.src_channel        (router_019_src_channel),                                    //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_020 router_020 (
		.sink_ready         (m1_clock_bridge_comm_3_left_s0_agent_rp_ready),             //      sink.ready
		.sink_valid         (m1_clock_bridge_comm_3_left_s0_agent_rp_valid),             //          .valid
		.sink_data          (m1_clock_bridge_comm_3_left_s0_agent_rp_data),              //          .data
		.sink_startofpacket (m1_clock_bridge_comm_3_left_s0_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_comm_3_left_s0_agent_rp_endofpacket),       //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                      //       src.ready
		.src_valid          (router_020_src_valid),                                      //          .valid
		.src_data           (router_020_src_data),                                       //          .data
		.src_channel        (router_020_src_channel),                                    //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_021 router_021 (
		.sink_ready         (m1_clock_bridge_comm_4_left_s0_agent_rp_ready),             //      sink.ready
		.sink_valid         (m1_clock_bridge_comm_4_left_s0_agent_rp_valid),             //          .valid
		.sink_data          (m1_clock_bridge_comm_4_left_s0_agent_rp_data),              //          .data
		.sink_startofpacket (m1_clock_bridge_comm_4_left_s0_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_comm_4_left_s0_agent_rp_endofpacket),       //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                      //       src.ready
		.src_valid          (router_021_src_valid),                                      //          .valid
		.src_data           (router_021_src_data),                                       //          .data
		.src_channel        (router_021_src_channel),                                    //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_022 router_022 (
		.sink_ready         (m1_clock_bridge_comm_2_left_s0_agent_rp_ready),             //      sink.ready
		.sink_valid         (m1_clock_bridge_comm_2_left_s0_agent_rp_valid),             //          .valid
		.sink_data          (m1_clock_bridge_comm_2_left_s0_agent_rp_data),              //          .data
		.sink_startofpacket (m1_clock_bridge_comm_2_left_s0_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_comm_2_left_s0_agent_rp_endofpacket),       //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                      //       src.ready
		.src_valid          (router_022_src_valid),                                      //          .valid
		.src_data           (router_022_src_data),                                       //          .data
		.src_channel        (router_022_src_channel),                                    //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_023 router_023 (
		.sink_ready         (m1_clock_bridge_comm_1_left_s0_agent_rp_ready),             //      sink.ready
		.sink_valid         (m1_clock_bridge_comm_1_left_s0_agent_rp_valid),             //          .valid
		.sink_data          (m1_clock_bridge_comm_1_left_s0_agent_rp_data),              //          .data
		.sink_startofpacket (m1_clock_bridge_comm_1_left_s0_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_comm_1_left_s0_agent_rp_endofpacket),       //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                      //       src.ready
		.src_valid          (router_023_src_valid),                                      //          .valid
		.src_data           (router_023_src_data),                                       //          .data
		.src_channel        (router_023_src_channel),                                    //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (133),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (129),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.MAX_OUTSTANDING_RESPONSES (36),
		.PIPELINED                 (0),
		.ST_DATA_W                 (150),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) ddr2_address_span_extender_expanded_master_limiter (
		.clk                    (clk_100_clk_clk),                                                                //       clk.clk
		.reset                  (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.cmd_sink_ready         (router_012_src_ready),                                                           //  cmd_sink.ready
		.cmd_sink_valid         (router_012_src_valid),                                                           //          .valid
		.cmd_sink_data          (router_012_src_data),                                                            //          .data
		.cmd_sink_channel       (router_012_src_channel),                                                         //          .channel
		.cmd_sink_startofpacket (router_012_src_startofpacket),                                                   //          .startofpacket
		.cmd_sink_endofpacket   (router_012_src_endofpacket),                                                     //          .endofpacket
		.cmd_src_ready          (ddr2_address_span_extender_expanded_master_limiter_cmd_src_ready),               //   cmd_src.ready
		.cmd_src_data           (ddr2_address_span_extender_expanded_master_limiter_cmd_src_data),                //          .data
		.cmd_src_channel        (ddr2_address_span_extender_expanded_master_limiter_cmd_src_channel),             //          .channel
		.cmd_src_startofpacket  (ddr2_address_span_extender_expanded_master_limiter_cmd_src_startofpacket),       //          .startofpacket
		.cmd_src_endofpacket    (ddr2_address_span_extender_expanded_master_limiter_cmd_src_endofpacket),         //          .endofpacket
		.cmd_src_valid          (ddr2_address_span_extender_expanded_master_limiter_cmd_src_valid),               //          .valid
		.rsp_sink_ready         (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_ready),         //  rsp_sink.ready
		.rsp_sink_valid         (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_valid),         //          .valid
		.rsp_sink_channel       (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_channel),       //          .channel
		.rsp_sink_data          (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_data),          //          .data
		.rsp_sink_startofpacket (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.rsp_sink_endofpacket   (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.rsp_src_ready          (ddr2_address_span_extender_expanded_master_limiter_rsp_src_ready),               //   rsp_src.ready
		.rsp_src_valid          (ddr2_address_span_extender_expanded_master_limiter_rsp_src_valid),               //          .valid
		.rsp_src_data           (ddr2_address_span_extender_expanded_master_limiter_rsp_src_data),                //          .data
		.rsp_src_channel        (ddr2_address_span_extender_expanded_master_limiter_rsp_src_channel),             //          .channel
		.rsp_src_startofpacket  (ddr2_address_span_extender_expanded_master_limiter_rsp_src_startofpacket),       //          .startofpacket
		.rsp_src_endofpacket    (ddr2_address_span_extender_expanded_master_limiter_rsp_src_endofpacket)          //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (379),
		.PKT_BYTE_CNT_H            (370),
		.PKT_BYTE_CNT_L            (358),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (374),
		.PKT_BURST_SIZE_L          (372),
		.PKT_BURST_TYPE_H          (376),
		.PKT_BURST_TYPE_L          (375),
		.PKT_BURSTWRAP_H           (371),
		.PKT_BURSTWRAP_L           (371),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (402),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (363),
		.OUT_BURSTWRAP_H           (371),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) m1_clock_bridge_general_s0_burst_adapter (
		.clk                   (m2_ddr2_memory_afi_half_clk_clk),                                //       cr0.clk
		.reset                 (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                          //          .ready
		.source0_valid         (m1_clock_bridge_general_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (m1_clock_bridge_general_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (m1_clock_bridge_general_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (m1_clock_bridge_general_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (m1_clock_bridge_general_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (m1_clock_bridge_general_s0_burst_adapter_source0_ready)          //          .ready
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_100_clk_clk),                                                                  //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.sink_ready         (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                             //          .valid
		.src0_data          (cmd_demux_src0_data),                                                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                                                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                                       //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                             //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                             //          .valid
		.src1_data          (cmd_demux_src1_data),                                                              //          .data
		.src1_channel       (cmd_demux_src1_channel),                                                           //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                                     //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                        //      sink.ready
		.sink_channel       (router_001_src_channel),                                      //          .channel
		.sink_data          (router_001_src_data),                                         //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_001_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_001_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                        //      sink.ready
		.sink_channel       (router_002_src_channel),                                      //          .channel
		.sink_data          (router_002_src_data),                                         //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_002_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_002_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_002_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_003 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                        //      sink.ready
		.sink_channel       (router_003_src_channel),                                      //          .channel
		.sink_data          (router_003_src_data),                                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_003_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_003_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_003_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_004 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                        //      sink.ready
		.sink_channel       (router_004_src_channel),                                      //          .channel
		.sink_data          (router_004_src_data),                                         //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_004_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_004_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_004_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_004_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_005 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                        //      sink.ready
		.sink_channel       (router_005_src_channel),                                      //          .channel
		.sink_data          (router_005_src_data),                                         //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_005_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_005_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_005_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_005_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_006 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                        //      sink.ready
		.sink_channel       (router_006_src_channel),                                      //          .channel
		.sink_data          (router_006_src_data),                                         //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_006_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_006_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_006_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_006_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_006_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_006_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_006_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_006_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_007 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                        //      sink.ready
		.sink_channel       (router_007_src_channel),                                      //          .channel
		.sink_data          (router_007_src_data),                                         //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_007_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_007_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_007_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_007_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_007_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_007_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_007_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_007_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_007_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_008 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                        //      sink.ready
		.sink_channel       (router_008_src_channel),                                      //          .channel
		.sink_data          (router_008_src_data),                                         //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_008_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_008_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_008_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_008_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_008_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_008_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_008_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_008_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_008_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_008_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_008_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_008_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_008_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_009 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                        //      sink.ready
		.sink_channel       (router_009_src_channel),                                      //          .channel
		.sink_data          (router_009_src_data),                                         //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_009_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_009_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_009_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_009_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_009_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_009_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_009_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_009_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_009_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_009_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_009_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_009_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_009_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_010 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                        //      sink.ready
		.sink_channel       (router_010_src_channel),                                      //          .channel
		.sink_data          (router_010_src_data),                                         //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_010_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_010_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_010_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_010_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_010_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_010_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_010_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_010_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_010_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_010_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_010_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_010_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_010_src1_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_011 (
		.clk                (clk_100_clk_clk),                                                                  //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.sink_ready         (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_011_src0_ready),                                                         //      src0.ready
		.src0_valid         (cmd_demux_011_src0_valid),                                                         //          .valid
		.src0_data          (cmd_demux_011_src0_data),                                                          //          .data
		.src0_channel       (cmd_demux_011_src0_channel),                                                       //          .channel
		.src0_startofpacket (cmd_demux_011_src0_startofpacket),                                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_011_src0_endofpacket),                                                   //          .endofpacket
		.src1_ready         (cmd_demux_011_src1_ready),                                                         //      src1.ready
		.src1_valid         (cmd_demux_011_src1_valid),                                                         //          .valid
		.src1_data          (cmd_demux_011_src1_data),                                                          //          .data
		.src1_channel       (cmd_demux_011_src1_channel),                                                       //          .channel
		.src1_startofpacket (cmd_demux_011_src1_startofpacket),                                                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_011_src1_endofpacket)                                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_012 (
		.clk                (clk_100_clk_clk),                                                                //       clk.clk
		.reset              (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.sink_ready         (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_012_src0_ready),                                                       //      src0.ready
		.src0_valid         (cmd_demux_012_src0_valid),                                                       //          .valid
		.src0_data          (cmd_demux_012_src0_data),                                                        //          .data
		.src0_channel       (cmd_demux_012_src0_channel),                                                     //          .channel
		.src0_startofpacket (cmd_demux_012_src0_startofpacket),                                               //          .startofpacket
		.src0_endofpacket   (cmd_demux_012_src0_endofpacket),                                                 //          .endofpacket
		.src1_ready         (cmd_demux_012_src1_ready),                                                       //      src1.ready
		.src1_valid         (cmd_demux_012_src1_valid),                                                       //          .valid
		.src1_data          (cmd_demux_012_src1_data),                                                        //          .data
		.src1_channel       (cmd_demux_012_src1_channel),                                                     //          .channel
		.src1_startofpacket (cmd_demux_012_src1_startofpacket),                                               //          .startofpacket
		.src1_endofpacket   (cmd_demux_012_src1_endofpacket)                                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                  (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset                (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (cmd_mux_src_ready),                                               //       src.ready
		.src_valid            (cmd_mux_src_valid),                                               //          .valid
		.src_data             (cmd_mux_src_data),                                                //          .data
		.src_channel          (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket    (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (crosser_out_ready),                                               //     sink0.ready
		.sink0_valid          (crosser_out_valid),                                               //          .valid
		.sink0_channel        (crosser_out_channel),                                             //          .channel
		.sink0_data           (crosser_out_data),                                                //          .data
		.sink0_startofpacket  (crosser_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket    (crosser_out_endofpacket),                                         //          .endofpacket
		.sink1_ready          (crosser_002_out_ready),                                           //     sink1.ready
		.sink1_valid          (crosser_002_out_valid),                                           //          .valid
		.sink1_channel        (crosser_002_out_channel),                                         //          .channel
		.sink1_data           (crosser_002_out_data),                                            //          .data
		.sink1_startofpacket  (crosser_002_out_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket    (crosser_002_out_endofpacket),                                     //          .endofpacket
		.sink2_ready          (crosser_004_out_ready),                                           //     sink2.ready
		.sink2_valid          (crosser_004_out_valid),                                           //          .valid
		.sink2_channel        (crosser_004_out_channel),                                         //          .channel
		.sink2_data           (crosser_004_out_data),                                            //          .data
		.sink2_startofpacket  (crosser_004_out_startofpacket),                                   //          .startofpacket
		.sink2_endofpacket    (crosser_004_out_endofpacket),                                     //          .endofpacket
		.sink3_ready          (crosser_006_out_ready),                                           //     sink3.ready
		.sink3_valid          (crosser_006_out_valid),                                           //          .valid
		.sink3_channel        (crosser_006_out_channel),                                         //          .channel
		.sink3_data           (crosser_006_out_data),                                            //          .data
		.sink3_startofpacket  (crosser_006_out_startofpacket),                                   //          .startofpacket
		.sink3_endofpacket    (crosser_006_out_endofpacket),                                     //          .endofpacket
		.sink4_ready          (crosser_008_out_ready),                                           //     sink4.ready
		.sink4_valid          (crosser_008_out_valid),                                           //          .valid
		.sink4_channel        (crosser_008_out_channel),                                         //          .channel
		.sink4_data           (crosser_008_out_data),                                            //          .data
		.sink4_startofpacket  (crosser_008_out_startofpacket),                                   //          .startofpacket
		.sink4_endofpacket    (crosser_008_out_endofpacket),                                     //          .endofpacket
		.sink5_ready          (crosser_010_out_ready),                                           //     sink5.ready
		.sink5_valid          (crosser_010_out_valid),                                           //          .valid
		.sink5_channel        (crosser_010_out_channel),                                         //          .channel
		.sink5_data           (crosser_010_out_data),                                            //          .data
		.sink5_startofpacket  (crosser_010_out_startofpacket),                                   //          .startofpacket
		.sink5_endofpacket    (crosser_010_out_endofpacket),                                     //          .endofpacket
		.sink6_ready          (crosser_012_out_ready),                                           //     sink6.ready
		.sink6_valid          (crosser_012_out_valid),                                           //          .valid
		.sink6_channel        (crosser_012_out_channel),                                         //          .channel
		.sink6_data           (crosser_012_out_data),                                            //          .data
		.sink6_startofpacket  (crosser_012_out_startofpacket),                                   //          .startofpacket
		.sink6_endofpacket    (crosser_012_out_endofpacket),                                     //          .endofpacket
		.sink7_ready          (crosser_014_out_ready),                                           //     sink7.ready
		.sink7_valid          (crosser_014_out_valid),                                           //          .valid
		.sink7_channel        (crosser_014_out_channel),                                         //          .channel
		.sink7_data           (crosser_014_out_data),                                            //          .data
		.sink7_startofpacket  (crosser_014_out_startofpacket),                                   //          .startofpacket
		.sink7_endofpacket    (crosser_014_out_endofpacket),                                     //          .endofpacket
		.sink8_ready          (crosser_016_out_ready),                                           //     sink8.ready
		.sink8_valid          (crosser_016_out_valid),                                           //          .valid
		.sink8_channel        (crosser_016_out_channel),                                         //          .channel
		.sink8_data           (crosser_016_out_data),                                            //          .data
		.sink8_startofpacket  (crosser_016_out_startofpacket),                                   //          .startofpacket
		.sink8_endofpacket    (crosser_016_out_endofpacket),                                     //          .endofpacket
		.sink9_ready          (crosser_018_out_ready),                                           //     sink9.ready
		.sink9_valid          (crosser_018_out_valid),                                           //          .valid
		.sink9_channel        (crosser_018_out_channel),                                         //          .channel
		.sink9_data           (crosser_018_out_data),                                            //          .data
		.sink9_startofpacket  (crosser_018_out_startofpacket),                                   //          .startofpacket
		.sink9_endofpacket    (crosser_018_out_endofpacket),                                     //          .endofpacket
		.sink10_ready         (crosser_020_out_ready),                                           //    sink10.ready
		.sink10_valid         (crosser_020_out_valid),                                           //          .valid
		.sink10_channel       (crosser_020_out_channel),                                         //          .channel
		.sink10_data          (crosser_020_out_data),                                            //          .data
		.sink10_startofpacket (crosser_020_out_startofpacket),                                   //          .startofpacket
		.sink10_endofpacket   (crosser_020_out_endofpacket),                                     //          .endofpacket
		.sink11_ready         (crosser_022_out_ready),                                           //    sink11.ready
		.sink11_valid         (crosser_022_out_valid),                                           //          .valid
		.sink11_channel       (crosser_022_out_channel),                                         //          .channel
		.sink11_data          (crosser_022_out_data),                                            //          .data
		.sink11_startofpacket (crosser_022_out_startofpacket),                                   //          .startofpacket
		.sink11_endofpacket   (crosser_022_out_endofpacket),                                     //          .endofpacket
		.sink12_ready         (crosser_024_out_ready),                                           //    sink12.ready
		.sink12_valid         (crosser_024_out_valid),                                           //          .valid
		.sink12_channel       (crosser_024_out_channel),                                         //          .channel
		.sink12_data          (crosser_024_out_data),                                            //          .data
		.sink12_startofpacket (crosser_024_out_startofpacket),                                   //          .startofpacket
		.sink12_endofpacket   (crosser_024_out_endofpacket)                                      //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                     //          .valid
		.sink0_channel       (crosser_001_out_channel),                                   //          .channel
		.sink0_data          (crosser_001_out_data),                                      //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                               //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                                     //          .valid
		.sink1_channel       (crosser_003_out_channel),                                   //          .channel
		.sink1_data          (crosser_003_out_data),                                      //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                     //          .valid
		.src_data            (cmd_mux_002_src_data),                                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                                     //          .valid
		.sink0_channel       (crosser_005_out_channel),                                   //          .channel
		.sink0_data          (crosser_005_out_data),                                      //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket),                               //          .endofpacket
		.sink1_ready         (crosser_023_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_023_out_valid),                                     //          .valid
		.sink1_channel       (crosser_023_out_channel),                                   //          .channel
		.sink1_data          (crosser_023_out_data),                                      //          .data
		.sink1_startofpacket (crosser_023_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_023_out_endofpacket),                               //          .endofpacket
		.sink2_ready         (crosser_025_out_ready),                                     //     sink2.ready
		.sink2_valid         (crosser_025_out_valid),                                     //          .valid
		.sink2_channel       (crosser_025_out_channel),                                   //          .channel
		.sink2_data          (crosser_025_out_data),                                      //          .data
		.sink2_startofpacket (crosser_025_out_startofpacket),                             //          .startofpacket
		.sink2_endofpacket   (crosser_025_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                     //          .valid
		.src_data            (cmd_mux_003_src_data),                                      //          .data
		.src_channel         (cmd_mux_003_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_021_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_021_out_valid),                                     //          .valid
		.sink0_channel       (crosser_021_out_channel),                                   //          .channel
		.sink0_data          (crosser_021_out_data),                                      //          .data
		.sink0_startofpacket (crosser_021_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_021_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                     //          .valid
		.src_data            (cmd_mux_004_src_data),                                      //          .data
		.src_channel         (cmd_mux_004_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_019_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_019_out_valid),                                     //          .valid
		.sink0_channel       (crosser_019_out_channel),                                   //          .channel
		.sink0_data          (crosser_019_out_data),                                      //          .data
		.sink0_startofpacket (crosser_019_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_019_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_003 cmd_mux_005 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                     //          .valid
		.src_data            (cmd_mux_005_src_data),                                      //          .data
		.src_channel         (cmd_mux_005_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_017_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_017_out_valid),                                     //          .valid
		.sink0_channel       (crosser_017_out_channel),                                   //          .channel
		.sink0_data          (crosser_017_out_data),                                      //          .data
		.sink0_startofpacket (crosser_017_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_017_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_003 cmd_mux_006 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                     //          .valid
		.src_data            (cmd_mux_006_src_data),                                      //          .data
		.src_channel         (cmd_mux_006_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_015_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_015_out_valid),                                     //          .valid
		.sink0_channel       (crosser_015_out_channel),                                   //          .channel
		.sink0_data          (crosser_015_out_data),                                      //          .data
		.sink0_startofpacket (crosser_015_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_015_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_003 cmd_mux_007 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                     //          .valid
		.src_data            (cmd_mux_007_src_data),                                      //          .data
		.src_channel         (cmd_mux_007_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                                     //          .valid
		.sink0_channel       (crosser_013_out_channel),                                   //          .channel
		.sink0_data          (crosser_013_out_data),                                      //          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_003 cmd_mux_008 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                     //          .valid
		.src_data            (cmd_mux_008_src_data),                                      //          .data
		.src_channel         (cmd_mux_008_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                                     //          .valid
		.sink0_channel       (crosser_011_out_channel),                                   //          .channel
		.sink0_data          (crosser_011_out_data),                                      //          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_003 cmd_mux_009 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                     //          .valid
		.src_data            (cmd_mux_009_src_data),                                      //          .data
		.src_channel         (cmd_mux_009_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                                     //          .valid
		.sink0_channel       (crosser_009_out_channel),                                   //          .channel
		.sink0_data          (crosser_009_out_data),                                      //          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_003 cmd_mux_010 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                     //          .valid
		.src_data            (cmd_mux_010_src_data),                                      //          .data
		.src_channel         (cmd_mux_010_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                                     //          .valid
		.sink0_channel       (crosser_007_out_channel),                                   //          .channel
		.sink0_data          (crosser_007_out_data),                                      //          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                 (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset               (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_013_src_ready),                                            //      sink.ready
		.sink_channel        (router_013_src_channel),                                          //          .channel
		.sink_data           (router_013_src_data),                                             //          .data
		.sink_startofpacket  (router_013_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket    (router_013_src_endofpacket),                                      //          .endofpacket
		.sink_valid          (router_013_src_valid),                                            //          .valid
		.src0_ready          (rsp_demux_src0_ready),                                            //      src0.ready
		.src0_valid          (rsp_demux_src0_valid),                                            //          .valid
		.src0_data           (rsp_demux_src0_data),                                             //          .data
		.src0_channel        (rsp_demux_src0_channel),                                          //          .channel
		.src0_startofpacket  (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket    (rsp_demux_src0_endofpacket),                                      //          .endofpacket
		.src1_ready          (rsp_demux_src1_ready),                                            //      src1.ready
		.src1_valid          (rsp_demux_src1_valid),                                            //          .valid
		.src1_data           (rsp_demux_src1_data),                                             //          .data
		.src1_channel        (rsp_demux_src1_channel),                                          //          .channel
		.src1_startofpacket  (rsp_demux_src1_startofpacket),                                    //          .startofpacket
		.src1_endofpacket    (rsp_demux_src1_endofpacket),                                      //          .endofpacket
		.src2_ready          (rsp_demux_src2_ready),                                            //      src2.ready
		.src2_valid          (rsp_demux_src2_valid),                                            //          .valid
		.src2_data           (rsp_demux_src2_data),                                             //          .data
		.src2_channel        (rsp_demux_src2_channel),                                          //          .channel
		.src2_startofpacket  (rsp_demux_src2_startofpacket),                                    //          .startofpacket
		.src2_endofpacket    (rsp_demux_src2_endofpacket),                                      //          .endofpacket
		.src3_ready          (rsp_demux_src3_ready),                                            //      src3.ready
		.src3_valid          (rsp_demux_src3_valid),                                            //          .valid
		.src3_data           (rsp_demux_src3_data),                                             //          .data
		.src3_channel        (rsp_demux_src3_channel),                                          //          .channel
		.src3_startofpacket  (rsp_demux_src3_startofpacket),                                    //          .startofpacket
		.src3_endofpacket    (rsp_demux_src3_endofpacket),                                      //          .endofpacket
		.src4_ready          (rsp_demux_src4_ready),                                            //      src4.ready
		.src4_valid          (rsp_demux_src4_valid),                                            //          .valid
		.src4_data           (rsp_demux_src4_data),                                             //          .data
		.src4_channel        (rsp_demux_src4_channel),                                          //          .channel
		.src4_startofpacket  (rsp_demux_src4_startofpacket),                                    //          .startofpacket
		.src4_endofpacket    (rsp_demux_src4_endofpacket),                                      //          .endofpacket
		.src5_ready          (rsp_demux_src5_ready),                                            //      src5.ready
		.src5_valid          (rsp_demux_src5_valid),                                            //          .valid
		.src5_data           (rsp_demux_src5_data),                                             //          .data
		.src5_channel        (rsp_demux_src5_channel),                                          //          .channel
		.src5_startofpacket  (rsp_demux_src5_startofpacket),                                    //          .startofpacket
		.src5_endofpacket    (rsp_demux_src5_endofpacket),                                      //          .endofpacket
		.src6_ready          (rsp_demux_src6_ready),                                            //      src6.ready
		.src6_valid          (rsp_demux_src6_valid),                                            //          .valid
		.src6_data           (rsp_demux_src6_data),                                             //          .data
		.src6_channel        (rsp_demux_src6_channel),                                          //          .channel
		.src6_startofpacket  (rsp_demux_src6_startofpacket),                                    //          .startofpacket
		.src6_endofpacket    (rsp_demux_src6_endofpacket),                                      //          .endofpacket
		.src7_ready          (rsp_demux_src7_ready),                                            //      src7.ready
		.src7_valid          (rsp_demux_src7_valid),                                            //          .valid
		.src7_data           (rsp_demux_src7_data),                                             //          .data
		.src7_channel        (rsp_demux_src7_channel),                                          //          .channel
		.src7_startofpacket  (rsp_demux_src7_startofpacket),                                    //          .startofpacket
		.src7_endofpacket    (rsp_demux_src7_endofpacket),                                      //          .endofpacket
		.src8_ready          (rsp_demux_src8_ready),                                            //      src8.ready
		.src8_valid          (rsp_demux_src8_valid),                                            //          .valid
		.src8_data           (rsp_demux_src8_data),                                             //          .data
		.src8_channel        (rsp_demux_src8_channel),                                          //          .channel
		.src8_startofpacket  (rsp_demux_src8_startofpacket),                                    //          .startofpacket
		.src8_endofpacket    (rsp_demux_src8_endofpacket),                                      //          .endofpacket
		.src9_ready          (rsp_demux_src9_ready),                                            //      src9.ready
		.src9_valid          (rsp_demux_src9_valid),                                            //          .valid
		.src9_data           (rsp_demux_src9_data),                                             //          .data
		.src9_channel        (rsp_demux_src9_channel),                                          //          .channel
		.src9_startofpacket  (rsp_demux_src9_startofpacket),                                    //          .startofpacket
		.src9_endofpacket    (rsp_demux_src9_endofpacket),                                      //          .endofpacket
		.src10_ready         (rsp_demux_src10_ready),                                           //     src10.ready
		.src10_valid         (rsp_demux_src10_valid),                                           //          .valid
		.src10_data          (rsp_demux_src10_data),                                            //          .data
		.src10_channel       (rsp_demux_src10_channel),                                         //          .channel
		.src10_startofpacket (rsp_demux_src10_startofpacket),                                   //          .startofpacket
		.src10_endofpacket   (rsp_demux_src10_endofpacket),                                     //          .endofpacket
		.src11_ready         (rsp_demux_src11_ready),                                           //     src11.ready
		.src11_valid         (rsp_demux_src11_valid),                                           //          .valid
		.src11_data          (rsp_demux_src11_data),                                            //          .data
		.src11_channel       (rsp_demux_src11_channel),                                         //          .channel
		.src11_startofpacket (rsp_demux_src11_startofpacket),                                   //          .startofpacket
		.src11_endofpacket   (rsp_demux_src11_endofpacket),                                     //          .endofpacket
		.src12_ready         (rsp_demux_src12_ready),                                           //     src12.ready
		.src12_valid         (rsp_demux_src12_valid),                                           //          .valid
		.src12_data          (rsp_demux_src12_data),                                            //          .data
		.src12_channel       (rsp_demux_src12_channel),                                         //          .channel
		.src12_startofpacket (rsp_demux_src12_startofpacket),                                   //          .startofpacket
		.src12_endofpacket   (rsp_demux_src12_endofpacket)                                      //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux rsp_demux_001 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                      //      sink.ready
		.sink_channel       (router_014_src_channel),                                    //          .channel
		.sink_data          (router_014_src_data),                                       //          .data
		.sink_startofpacket (router_014_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_014_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                      //      sink.ready
		.sink_channel       (router_015_src_channel),                                    //          .channel
		.sink_data          (router_015_src_data),                                       //          .data
		.sink_startofpacket (router_015_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_015_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                            //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                                  //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                                  //          .valid
		.src2_data          (rsp_demux_002_src2_data),                                   //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                                //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                          //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                      //      sink.ready
		.sink_channel       (router_016_src_channel),                                    //          .channel
		.sink_data          (router_016_src_data),                                       //          .data
		.sink_startofpacket (router_016_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_016_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                      //      sink.ready
		.sink_channel       (router_017_src_channel),                                    //          .channel
		.sink_data          (router_017_src_data),                                       //          .data
		.sink_startofpacket (router_017_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_017_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_003 rsp_demux_005 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                      //      sink.ready
		.sink_channel       (router_018_src_channel),                                    //          .channel
		.sink_data          (router_018_src_data),                                       //          .data
		.sink_startofpacket (router_018_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_018_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_003 rsp_demux_006 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                      //      sink.ready
		.sink_channel       (router_019_src_channel),                                    //          .channel
		.sink_data          (router_019_src_data),                                       //          .data
		.sink_startofpacket (router_019_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_019_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_003 rsp_demux_007 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                      //      sink.ready
		.sink_channel       (router_020_src_channel),                                    //          .channel
		.sink_data          (router_020_src_data),                                       //          .data
		.sink_startofpacket (router_020_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_020_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_003 rsp_demux_008 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                      //      sink.ready
		.sink_channel       (router_021_src_channel),                                    //          .channel
		.sink_data          (router_021_src_data),                                       //          .data
		.sink_startofpacket (router_021_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_021_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_003 rsp_demux_009 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                      //      sink.ready
		.sink_channel       (router_022_src_channel),                                    //          .channel
		.sink_data          (router_022_src_data),                                       //          .data
		.sink_startofpacket (router_022_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_022_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_003 rsp_demux_010 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                                      //      sink.ready
		.sink_channel       (router_023_src_channel),                                    //          .channel
		.sink_data          (router_023_src_data),                                       //          .data
		.sink_startofpacket (router_023_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_023_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                             //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                                           //          .valid
		.src_data            (rsp_mux_src_data),                                            //          .data
		.src_channel         (rsp_mux_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (crosser_026_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_026_out_valid),                                       //          .valid
		.sink0_channel       (crosser_026_out_channel),                                     //          .channel
		.sink0_data          (crosser_026_out_data),                                        //          .data
		.sink0_startofpacket (crosser_026_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_026_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_039_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_039_out_valid),                                       //          .valid
		.sink1_channel       (crosser_039_out_channel),                                     //          .channel
		.sink1_data          (crosser_039_out_data),                                        //          .data
		.sink1_startofpacket (crosser_039_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_039_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                       //          .valid
		.src_data            (rsp_mux_001_src_data),                                        //          .data
		.src_channel         (rsp_mux_001_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_027_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_027_out_valid),                                       //          .valid
		.sink0_channel       (crosser_027_out_channel),                                     //          .channel
		.sink0_data          (crosser_027_out_data),                                        //          .data
		.sink0_startofpacket (crosser_027_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_027_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_040_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_040_out_valid),                                       //          .valid
		.sink1_channel       (crosser_040_out_channel),                                     //          .channel
		.sink1_data          (crosser_040_out_data),                                        //          .data
		.sink1_startofpacket (crosser_040_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_040_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                       //          .valid
		.src_data            (rsp_mux_002_src_data),                                        //          .data
		.src_channel         (rsp_mux_002_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_028_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_028_out_valid),                                       //          .valid
		.sink0_channel       (crosser_028_out_channel),                                     //          .channel
		.sink0_data          (crosser_028_out_data),                                        //          .data
		.sink0_startofpacket (crosser_028_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_028_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_041_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_041_out_valid),                                       //          .valid
		.sink1_channel       (crosser_041_out_channel),                                     //          .channel
		.sink1_data          (crosser_041_out_data),                                        //          .data
		.sink1_startofpacket (crosser_041_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_041_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_003 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                       //          .valid
		.src_data            (rsp_mux_003_src_data),                                        //          .data
		.src_channel         (rsp_mux_003_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_029_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_029_out_valid),                                       //          .valid
		.sink0_channel       (crosser_029_out_channel),                                     //          .channel
		.sink0_data          (crosser_029_out_data),                                        //          .data
		.sink0_startofpacket (crosser_029_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_029_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_051_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_051_out_valid),                                       //          .valid
		.sink1_channel       (crosser_051_out_channel),                                     //          .channel
		.sink1_data          (crosser_051_out_data),                                        //          .data
		.sink1_startofpacket (crosser_051_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_051_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_004 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                       //          .valid
		.src_data            (rsp_mux_004_src_data),                                        //          .data
		.src_channel         (rsp_mux_004_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_030_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_030_out_valid),                                       //          .valid
		.sink0_channel       (crosser_030_out_channel),                                     //          .channel
		.sink0_data          (crosser_030_out_data),                                        //          .data
		.sink0_startofpacket (crosser_030_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_030_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_050_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_050_out_valid),                                       //          .valid
		.sink1_channel       (crosser_050_out_channel),                                     //          .channel
		.sink1_data          (crosser_050_out_data),                                        //          .data
		.sink1_startofpacket (crosser_050_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_050_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_005 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                       //          .valid
		.src_data            (rsp_mux_005_src_data),                                        //          .data
		.src_channel         (rsp_mux_005_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_031_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_031_out_valid),                                       //          .valid
		.sink0_channel       (crosser_031_out_channel),                                     //          .channel
		.sink0_data          (crosser_031_out_data),                                        //          .data
		.sink0_startofpacket (crosser_031_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_031_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_049_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_049_out_valid),                                       //          .valid
		.sink1_channel       (crosser_049_out_channel),                                     //          .channel
		.sink1_data          (crosser_049_out_data),                                        //          .data
		.sink1_startofpacket (crosser_049_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_049_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_006 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                                       //          .valid
		.src_data            (rsp_mux_006_src_data),                                        //          .data
		.src_channel         (rsp_mux_006_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_032_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_032_out_valid),                                       //          .valid
		.sink0_channel       (crosser_032_out_channel),                                     //          .channel
		.sink0_data          (crosser_032_out_data),                                        //          .data
		.sink0_startofpacket (crosser_032_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_032_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_048_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_048_out_valid),                                       //          .valid
		.sink1_channel       (crosser_048_out_channel),                                     //          .channel
		.sink1_data          (crosser_048_out_data),                                        //          .data
		.sink1_startofpacket (crosser_048_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_048_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_007 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                                       //          .valid
		.src_data            (rsp_mux_007_src_data),                                        //          .data
		.src_channel         (rsp_mux_007_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_033_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_033_out_valid),                                       //          .valid
		.sink0_channel       (crosser_033_out_channel),                                     //          .channel
		.sink0_data          (crosser_033_out_data),                                        //          .data
		.sink0_startofpacket (crosser_033_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_033_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_047_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_047_out_valid),                                       //          .valid
		.sink1_channel       (crosser_047_out_channel),                                     //          .channel
		.sink1_data          (crosser_047_out_data),                                        //          .data
		.sink1_startofpacket (crosser_047_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_047_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_008 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_008_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_008_src_valid),                                       //          .valid
		.src_data            (rsp_mux_008_src_data),                                        //          .data
		.src_channel         (rsp_mux_008_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_008_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_008_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_034_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_034_out_valid),                                       //          .valid
		.sink0_channel       (crosser_034_out_channel),                                     //          .channel
		.sink0_data          (crosser_034_out_data),                                        //          .data
		.sink0_startofpacket (crosser_034_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_034_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_046_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_046_out_valid),                                       //          .valid
		.sink1_channel       (crosser_046_out_channel),                                     //          .channel
		.sink1_data          (crosser_046_out_data),                                        //          .data
		.sink1_startofpacket (crosser_046_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_046_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_009 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_009_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_009_src_valid),                                       //          .valid
		.src_data            (rsp_mux_009_src_data),                                        //          .data
		.src_channel         (rsp_mux_009_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_009_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_009_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_035_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_035_out_valid),                                       //          .valid
		.sink0_channel       (crosser_035_out_channel),                                     //          .channel
		.sink0_data          (crosser_035_out_data),                                        //          .data
		.sink0_startofpacket (crosser_035_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_035_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_045_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_045_out_valid),                                       //          .valid
		.sink1_channel       (crosser_045_out_channel),                                     //          .channel
		.sink1_data          (crosser_045_out_data),                                        //          .data
		.sink1_startofpacket (crosser_045_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_045_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_010 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_010_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_010_src_valid),                                       //          .valid
		.src_data            (rsp_mux_010_src_data),                                        //          .data
		.src_channel         (rsp_mux_010_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_010_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_010_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_036_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_036_out_valid),                                       //          .valid
		.sink0_channel       (crosser_036_out_channel),                                     //          .channel
		.sink0_data          (crosser_036_out_data),                                        //          .data
		.sink0_startofpacket (crosser_036_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_036_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_044_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_044_out_valid),                                       //          .valid
		.sink1_channel       (crosser_044_out_channel),                                     //          .channel
		.sink1_data          (crosser_044_out_data),                                        //          .data
		.sink1_startofpacket (crosser_044_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_044_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_011 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_011_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_011_src_valid),                                       //          .valid
		.src_data            (rsp_mux_011_src_data),                                        //          .data
		.src_channel         (rsp_mux_011_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_011_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_011_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_037_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_037_out_valid),                                       //          .valid
		.sink0_channel       (crosser_037_out_channel),                                     //          .channel
		.sink0_data          (crosser_037_out_data),                                        //          .data
		.sink0_startofpacket (crosser_037_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_037_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_042_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_042_out_valid),                                       //          .valid
		.sink1_channel       (crosser_042_out_channel),                                     //          .channel
		.sink1_data          (crosser_042_out_data),                                        //          .data
		.sink1_startofpacket (crosser_042_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_042_out_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_012 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_012_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_012_src_valid),                                       //          .valid
		.src_data            (rsp_mux_012_src_data),                                        //          .data
		.src_channel         (rsp_mux_012_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_012_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_012_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_038_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_038_out_valid),                                       //          .valid
		.sink0_channel       (crosser_038_out_channel),                                     //          .channel
		.sink0_data          (crosser_038_out_data),                                        //          .data
		.sink0_startofpacket (crosser_038_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_038_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_043_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_043_out_valid),                                       //          .valid
		.sink1_channel       (crosser_043_out_channel),                                     //          .channel
		.sink1_data          (crosser_043_out_data),                                        //          .data
		.sink1_startofpacket (crosser_043_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_043_out_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (370),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (371),
		.IN_PKT_BURSTWRAP_L            (371),
		.IN_PKT_BURST_SIZE_H           (374),
		.IN_PKT_BURST_SIZE_L           (372),
		.IN_PKT_RESPONSE_STATUS_H      (398),
		.IN_PKT_RESPONSE_STATUS_L      (397),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (376),
		.IN_PKT_BURST_TYPE_L           (375),
		.IN_PKT_ORI_BURST_SIZE_L       (399),
		.IN_PKT_ORI_BURST_SIZE_H       (401),
		.IN_ST_DATA_W                  (402),
		.OUT_PKT_ADDR_H                (81),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (100),
		.OUT_PKT_BYTE_CNT_L            (88),
		.OUT_PKT_TRANS_COMPRESSED_READ (82),
		.OUT_PKT_BURST_SIZE_H          (104),
		.OUT_PKT_BURST_SIZE_L          (102),
		.OUT_PKT_RESPONSE_STATUS_H     (128),
		.OUT_PKT_RESPONSE_STATUS_L     (127),
		.OUT_PKT_TRANS_EXCLUSIVE       (87),
		.OUT_PKT_BURST_TYPE_H          (106),
		.OUT_PKT_BURST_TYPE_L          (105),
		.OUT_PKT_ORI_BURST_SIZE_L      (129),
		.OUT_PKT_ORI_BURST_SIZE_H      (131),
		.OUT_ST_DATA_W                 (132),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                                  //       clk.clk
		.reset                (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                                                //      sink.valid
		.in_channel           (rsp_mux_src_channel),                                                              //          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                                          //          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                                                //          .ready
		.in_data              (rsp_mux_src_data),                                                                 //          .data
		.out_endofpacket      (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ftdi_umft601a_module_avalon_imgt_master_data_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (370),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (371),
		.IN_PKT_BURSTWRAP_L            (371),
		.IN_PKT_BURST_SIZE_H           (374),
		.IN_PKT_BURST_SIZE_L           (372),
		.IN_PKT_RESPONSE_STATUS_H      (398),
		.IN_PKT_RESPONSE_STATUS_L      (397),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (376),
		.IN_PKT_BURST_TYPE_L           (375),
		.IN_PKT_ORI_BURST_SIZE_L       (399),
		.IN_PKT_ORI_BURST_SIZE_H       (401),
		.IN_ST_DATA_W                  (402),
		.OUT_PKT_ADDR_H                (72),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (91),
		.OUT_PKT_BYTE_CNT_L            (79),
		.OUT_PKT_TRANS_COMPRESSED_READ (73),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (119),
		.OUT_PKT_RESPONSE_STATUS_L     (118),
		.OUT_PKT_TRANS_EXCLUSIVE       (78),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (120),
		.OUT_PKT_ORI_BURST_SIZE_H      (122),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                                  //       clk.clk
		.reset                (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_mux_011_src_valid),                                                            //      sink.valid
		.in_channel           (rsp_mux_011_src_channel),                                                          //          .channel
		.in_startofpacket     (rsp_mux_011_src_startofpacket),                                                    //          .startofpacket
		.in_endofpacket       (rsp_mux_011_src_endofpacket),                                                      //          .endofpacket
		.in_ready             (rsp_mux_011_src_ready),                                                            //          .ready
		.in_data              (rsp_mux_011_src_data),                                                             //          .data
		.out_endofpacket      (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (81),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (100),
		.IN_PKT_BYTE_CNT_L             (88),
		.IN_PKT_TRANS_COMPRESSED_READ  (82),
		.IN_PKT_TRANS_WRITE            (84),
		.IN_PKT_BURSTWRAP_H            (101),
		.IN_PKT_BURSTWRAP_L            (101),
		.IN_PKT_BURST_SIZE_H           (104),
		.IN_PKT_BURST_SIZE_L           (102),
		.IN_PKT_RESPONSE_STATUS_H      (128),
		.IN_PKT_RESPONSE_STATUS_L      (127),
		.IN_PKT_TRANS_EXCLUSIVE        (87),
		.IN_PKT_BURST_TYPE_H           (106),
		.IN_PKT_BURST_TYPE_L           (105),
		.IN_PKT_ORI_BURST_SIZE_L       (129),
		.IN_PKT_ORI_BURST_SIZE_H       (131),
		.IN_ST_DATA_W                  (132),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (370),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (374),
		.OUT_PKT_BURST_SIZE_L          (372),
		.OUT_PKT_RESPONSE_STATUS_H     (398),
		.OUT_PKT_RESPONSE_STATUS_L     (397),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (376),
		.OUT_PKT_BURST_TYPE_L          (375),
		.OUT_PKT_ORI_BURST_SIZE_L      (399),
		.OUT_PKT_ORI_BURST_SIZE_H      (401),
		.OUT_ST_DATA_W                 (402),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                                  //       clk.clk
		.reset                (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (router_src_valid),                                                                 //      sink.valid
		.in_channel           (router_src_channel),                                                               //          .channel
		.in_startofpacket     (router_src_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (router_src_endofpacket),                                                           //          .endofpacket
		.in_ready             (router_src_ready),                                                                 //          .ready
		.in_data              (router_src_data),                                                                  //          .data
		.out_endofpacket      (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ftdi_umft601a_module_avalon_imgt_master_data_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (72),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (91),
		.IN_PKT_BYTE_CNT_L             (79),
		.IN_PKT_TRANS_COMPRESSED_READ  (73),
		.IN_PKT_TRANS_WRITE            (75),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (92),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (119),
		.IN_PKT_RESPONSE_STATUS_L      (118),
		.IN_PKT_TRANS_EXCLUSIVE        (78),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (120),
		.IN_PKT_ORI_BURST_SIZE_H       (122),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (370),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (374),
		.OUT_PKT_BURST_SIZE_L          (372),
		.OUT_PKT_RESPONSE_STATUS_H     (398),
		.OUT_PKT_RESPONSE_STATUS_L     (397),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (376),
		.OUT_PKT_BURST_TYPE_L          (375),
		.OUT_PKT_ORI_BURST_SIZE_L      (399),
		.OUT_PKT_ORI_BURST_SIZE_H      (401),
		.OUT_ST_DATA_W                 (402),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                                  //       clk.clk
		.reset                (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (router_011_src_valid),                                                             //      sink.valid
		.in_channel           (router_011_src_channel),                                                           //          .channel
		.in_startofpacket     (router_011_src_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (router_011_src_endofpacket),                                                       //          .endofpacket
		.in_ready             (router_011_src_ready),                                                             //          .ready
		.in_data              (router_011_src_data),                                                              //          .data
		.out_endofpacket      (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (rmap_mem_ffee_deb_area_avalon_mm_rmap_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (119),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (122),
		.IN_PKT_BURST_SIZE_L           (120),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (124),
		.IN_PKT_BURST_TYPE_L           (123),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (370),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (374),
		.OUT_PKT_BURST_SIZE_L          (372),
		.OUT_PKT_RESPONSE_STATUS_H     (398),
		.OUT_PKT_RESPONSE_STATUS_L     (397),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (376),
		.OUT_PKT_BURST_TYPE_L          (375),
		.OUT_PKT_ORI_BURST_SIZE_L      (399),
		.OUT_PKT_ORI_BURST_SIZE_H      (401),
		.OUT_ST_DATA_W                 (402),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ddr2_address_span_extender_expanded_master_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                                //       clk.clk
		.reset                (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (ddr2_address_span_extender_expanded_master_limiter_cmd_src_valid),               //      sink.valid
		.in_channel           (ddr2_address_span_extender_expanded_master_limiter_cmd_src_channel),             //          .channel
		.in_startofpacket     (ddr2_address_span_extender_expanded_master_limiter_cmd_src_startofpacket),       //          .startofpacket
		.in_endofpacket       (ddr2_address_span_extender_expanded_master_limiter_cmd_src_endofpacket),         //          .endofpacket
		.in_ready             (ddr2_address_span_extender_expanded_master_limiter_cmd_src_ready),               //          .ready
		.in_data              (ddr2_address_span_extender_expanded_master_limiter_cmd_src_data),                //          .data
		.out_endofpacket      (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (370),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (371),
		.IN_PKT_BURSTWRAP_L            (371),
		.IN_PKT_BURST_SIZE_H           (374),
		.IN_PKT_BURST_SIZE_L           (372),
		.IN_PKT_RESPONSE_STATUS_H      (398),
		.IN_PKT_RESPONSE_STATUS_L      (397),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (376),
		.IN_PKT_BURST_TYPE_L           (375),
		.IN_PKT_ORI_BURST_SIZE_L       (399),
		.IN_PKT_ORI_BURST_SIZE_H       (401),
		.IN_ST_DATA_W                  (402),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (122),
		.OUT_PKT_BURST_SIZE_L          (120),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (124),
		.OUT_PKT_BURST_TYPE_L          (123),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ddr2_address_span_extender_expanded_master_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                                //       clk.clk
		.reset                (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (rsp_mux_012_src_valid),                                                          //      sink.valid
		.in_channel           (rsp_mux_012_src_channel),                                                        //          .channel
		.in_startofpacket     (rsp_mux_012_src_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (rsp_mux_012_src_endofpacket),                                                    //          .endofpacket
		.in_ready             (rsp_mux_012_src_ready),                                                          //          .ready
		.in_data              (rsp_mux_012_src_data),                                                           //          .data
		.out_endofpacket      (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                          //              .channel
		.in_data           (cmd_demux_src0_data),                                             //              .data
		.out_ready         (crosser_out_ready),                                               //           out.ready
		.out_valid         (crosser_out_valid),                                               //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_out_channel),                                             //              .channel
		.out_data          (crosser_out_data),                                                //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                        //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                      //              .channel
		.in_data           (cmd_demux_src1_data),                                         //              .data
		.out_ready         (crosser_001_out_ready),                                       //           out.ready
		.out_valid         (crosser_001_out_valid),                                       //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                     //              .channel
		.out_data          (crosser_001_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src0_data),                                         //              .data
		.out_ready         (crosser_002_out_ready),                                           //           out.ready
		.out_valid         (crosser_002_out_valid),                                           //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                         //              .channel
		.out_data          (crosser_002_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_001_src1_data),                                     //              .data
		.out_ready         (crosser_003_out_ready),                                       //           out.ready
		.out_valid         (crosser_003_out_valid),                                       //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                     //              .channel
		.out_data          (crosser_003_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_002_src0_data),                                         //              .data
		.out_ready         (crosser_004_out_ready),                                           //           out.ready
		.out_valid         (crosser_004_out_valid),                                           //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                         //              .channel
		.out_data          (crosser_004_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_002_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_002_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_002_src1_data),                                     //              .data
		.out_ready         (crosser_005_out_ready),                                       //           out.ready
		.out_valid         (crosser_005_out_valid),                                       //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                     //              .channel
		.out_data          (crosser_005_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_003_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_003_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_003_src0_data),                                         //              .data
		.out_ready         (crosser_006_out_ready),                                           //           out.ready
		.out_valid         (crosser_006_out_valid),                                           //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                         //              .channel
		.out_data          (crosser_006_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_003_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_003_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_003_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_003_src1_data),                                     //              .data
		.out_ready         (crosser_007_out_ready),                                       //           out.ready
		.out_valid         (crosser_007_out_valid),                                       //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                     //              .channel
		.out_data          (crosser_007_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_004_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_004_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_004_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_004_src0_data),                                         //              .data
		.out_ready         (crosser_008_out_ready),                                           //           out.ready
		.out_valid         (crosser_008_out_valid),                                           //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                         //              .channel
		.out_data          (crosser_008_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_004_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_004_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_004_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_004_src1_data),                                     //              .data
		.out_ready         (crosser_009_out_ready),                                       //           out.ready
		.out_valid         (crosser_009_out_valid),                                       //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                     //              .channel
		.out_data          (crosser_009_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_005_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_005_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_005_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_005_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_005_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_005_src0_data),                                         //              .data
		.out_ready         (crosser_010_out_ready),                                           //           out.ready
		.out_valid         (crosser_010_out_valid),                                           //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                         //              .channel
		.out_data          (crosser_010_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_005_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_005_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_005_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_005_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_005_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_005_src1_data),                                     //              .data
		.out_ready         (crosser_011_out_ready),                                       //           out.ready
		.out_valid         (crosser_011_out_valid),                                       //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                     //              .channel
		.out_data          (crosser_011_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_006_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_006_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_006_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_006_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_006_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_006_src0_data),                                         //              .data
		.out_ready         (crosser_012_out_ready),                                           //           out.ready
		.out_valid         (crosser_012_out_valid),                                           //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                         //              .channel
		.out_data          (crosser_012_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_006_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_006_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_006_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_006_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_006_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_006_src1_data),                                     //              .data
		.out_ready         (crosser_013_out_ready),                                       //           out.ready
		.out_valid         (crosser_013_out_valid),                                       //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                     //              .channel
		.out_data          (crosser_013_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_007_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_007_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_007_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_007_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_007_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_007_src0_data),                                         //              .data
		.out_ready         (crosser_014_out_ready),                                           //           out.ready
		.out_valid         (crosser_014_out_valid),                                           //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                         //              .channel
		.out_data          (crosser_014_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_007_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_007_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_007_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_007_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_007_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_007_src1_data),                                     //              .data
		.out_ready         (crosser_015_out_ready),                                       //           out.ready
		.out_valid         (crosser_015_out_valid),                                       //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                     //              .channel
		.out_data          (crosser_015_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_008_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_008_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_008_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_008_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_008_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_008_src0_data),                                         //              .data
		.out_ready         (crosser_016_out_ready),                                           //           out.ready
		.out_valid         (crosser_016_out_valid),                                           //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_016_out_channel),                                         //              .channel
		.out_data          (crosser_016_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_008_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_008_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_008_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_008_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_008_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_008_src1_data),                                     //              .data
		.out_ready         (crosser_017_out_ready),                                       //           out.ready
		.out_valid         (crosser_017_out_valid),                                       //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                     //              .channel
		.out_data          (crosser_017_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_009_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_009_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_009_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_009_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_009_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_009_src0_data),                                         //              .data
		.out_ready         (crosser_018_out_ready),                                           //           out.ready
		.out_valid         (crosser_018_out_valid),                                           //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_018_out_channel),                                         //              .channel
		.out_data          (crosser_018_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_009_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_009_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_009_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_009_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_009_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_009_src1_data),                                     //              .data
		.out_ready         (crosser_019_out_ready),                                       //           out.ready
		.out_valid         (crosser_019_out_valid),                                       //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_019_out_channel),                                     //              .channel
		.out_data          (crosser_019_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_010_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_010_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_010_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_010_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_010_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_010_src0_data),                                         //              .data
		.out_ready         (crosser_020_out_ready),                                           //           out.ready
		.out_valid         (crosser_020_out_valid),                                           //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_020_out_channel),                                         //              .channel
		.out_data          (crosser_020_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_010_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_010_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_010_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_010_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_010_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_010_src1_data),                                     //              .data
		.out_ready         (crosser_021_out_ready),                                       //           out.ready
		.out_valid         (crosser_021_out_valid),                                       //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_021_out_channel),                                     //              .channel
		.out_data          (crosser_021_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_011_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_011_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_011_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_011_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_011_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_011_src0_data),                                         //              .data
		.out_ready         (crosser_022_out_ready),                                           //           out.ready
		.out_valid         (crosser_022_out_valid),                                           //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_022_out_channel),                                         //              .channel
		.out_data          (crosser_022_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_011_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_011_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_011_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_011_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_011_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_011_src1_data),                                     //              .data
		.out_ready         (crosser_023_out_ready),                                       //           out.ready
		.out_valid         (crosser_023_out_valid),                                       //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_023_out_channel),                                     //              .channel
		.out_data          (crosser_023_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_024 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_012_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_012_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_012_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_012_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_012_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_012_src0_data),                                         //              .data
		.out_ready         (crosser_024_out_ready),                                           //           out.ready
		.out_valid         (crosser_024_out_valid),                                           //              .valid
		.out_startofpacket (crosser_024_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_024_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_024_out_channel),                                         //              .channel
		.out_data          (crosser_024_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_025 (
		.in_clk            (clk_100_clk_clk),                                             //        in_clk.clk
		.in_reset          (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                             //       out_clk.clk
		.out_reset         (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_012_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_012_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_012_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_012_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_012_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_012_src1_data),                                     //              .data
		.out_ready         (crosser_025_out_ready),                                       //           out.ready
		.out_valid         (crosser_025_out_valid),                                       //              .valid
		.out_startofpacket (crosser_025_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_025_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_025_out_channel),                                     //              .channel
		.out_data          (crosser_025_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_026 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_src0_data),                                             //              .data
		.out_ready         (crosser_026_out_ready),                                           //           out.ready
		.out_valid         (crosser_026_out_valid),                                           //              .valid
		.out_startofpacket (crosser_026_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_026_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_026_out_channel),                                         //              .channel
		.out_data          (crosser_026_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_027 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_src1_data),                                             //              .data
		.out_ready         (crosser_027_out_ready),                                           //           out.ready
		.out_valid         (crosser_027_out_valid),                                           //              .valid
		.out_startofpacket (crosser_027_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_027_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_027_out_channel),                                         //              .channel
		.out_data          (crosser_027_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_028 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_src2_data),                                             //              .data
		.out_ready         (crosser_028_out_ready),                                           //           out.ready
		.out_valid         (crosser_028_out_valid),                                           //              .valid
		.out_startofpacket (crosser_028_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_028_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_028_out_channel),                                         //              .channel
		.out_data          (crosser_028_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_029 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src3_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src3_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src3_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src3_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src3_channel),                                          //              .channel
		.in_data           (rsp_demux_src3_data),                                             //              .data
		.out_ready         (crosser_029_out_ready),                                           //           out.ready
		.out_valid         (crosser_029_out_valid),                                           //              .valid
		.out_startofpacket (crosser_029_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_029_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_029_out_channel),                                         //              .channel
		.out_data          (crosser_029_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_030 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src4_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src4_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src4_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src4_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src4_channel),                                          //              .channel
		.in_data           (rsp_demux_src4_data),                                             //              .data
		.out_ready         (crosser_030_out_ready),                                           //           out.ready
		.out_valid         (crosser_030_out_valid),                                           //              .valid
		.out_startofpacket (crosser_030_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_030_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_030_out_channel),                                         //              .channel
		.out_data          (crosser_030_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_031 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src5_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src5_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src5_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src5_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src5_channel),                                          //              .channel
		.in_data           (rsp_demux_src5_data),                                             //              .data
		.out_ready         (crosser_031_out_ready),                                           //           out.ready
		.out_valid         (crosser_031_out_valid),                                           //              .valid
		.out_startofpacket (crosser_031_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_031_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_031_out_channel),                                         //              .channel
		.out_data          (crosser_031_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_032 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src6_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src6_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src6_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src6_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src6_channel),                                          //              .channel
		.in_data           (rsp_demux_src6_data),                                             //              .data
		.out_ready         (crosser_032_out_ready),                                           //           out.ready
		.out_valid         (crosser_032_out_valid),                                           //              .valid
		.out_startofpacket (crosser_032_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_032_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_032_out_channel),                                         //              .channel
		.out_data          (crosser_032_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_033 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src7_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src7_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src7_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src7_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src7_channel),                                          //              .channel
		.in_data           (rsp_demux_src7_data),                                             //              .data
		.out_ready         (crosser_033_out_ready),                                           //           out.ready
		.out_valid         (crosser_033_out_valid),                                           //              .valid
		.out_startofpacket (crosser_033_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_033_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_033_out_channel),                                         //              .channel
		.out_data          (crosser_033_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_034 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src8_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src8_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src8_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src8_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src8_channel),                                          //              .channel
		.in_data           (rsp_demux_src8_data),                                             //              .data
		.out_ready         (crosser_034_out_ready),                                           //           out.ready
		.out_valid         (crosser_034_out_valid),                                           //              .valid
		.out_startofpacket (crosser_034_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_034_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_034_out_channel),                                         //              .channel
		.out_data          (crosser_034_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_035 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src9_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src9_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src9_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src9_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src9_channel),                                          //              .channel
		.in_data           (rsp_demux_src9_data),                                             //              .data
		.out_ready         (crosser_035_out_ready),                                           //           out.ready
		.out_valid         (crosser_035_out_valid),                                           //              .valid
		.out_startofpacket (crosser_035_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_035_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_035_out_channel),                                         //              .channel
		.out_data          (crosser_035_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_036 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src10_ready),                                           //            in.ready
		.in_valid          (rsp_demux_src10_valid),                                           //              .valid
		.in_startofpacket  (rsp_demux_src10_startofpacket),                                   //              .startofpacket
		.in_endofpacket    (rsp_demux_src10_endofpacket),                                     //              .endofpacket
		.in_channel        (rsp_demux_src10_channel),                                         //              .channel
		.in_data           (rsp_demux_src10_data),                                            //              .data
		.out_ready         (crosser_036_out_ready),                                           //           out.ready
		.out_valid         (crosser_036_out_valid),                                           //              .valid
		.out_startofpacket (crosser_036_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_036_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_036_out_channel),                                         //              .channel
		.out_data          (crosser_036_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_037 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src11_ready),                                           //            in.ready
		.in_valid          (rsp_demux_src11_valid),                                           //              .valid
		.in_startofpacket  (rsp_demux_src11_startofpacket),                                   //              .startofpacket
		.in_endofpacket    (rsp_demux_src11_endofpacket),                                     //              .endofpacket
		.in_channel        (rsp_demux_src11_channel),                                         //              .channel
		.in_data           (rsp_demux_src11_data),                                            //              .data
		.out_ready         (crosser_037_out_ready),                                           //           out.ready
		.out_valid         (crosser_037_out_valid),                                           //              .valid
		.out_startofpacket (crosser_037_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_037_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_037_out_channel),                                         //              .channel
		.out_data          (crosser_037_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_038 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_src12_ready),                                           //            in.ready
		.in_valid          (rsp_demux_src12_valid),                                           //              .valid
		.in_startofpacket  (rsp_demux_src12_startofpacket),                                   //              .startofpacket
		.in_endofpacket    (rsp_demux_src12_endofpacket),                                     //              .endofpacket
		.in_channel        (rsp_demux_src12_channel),                                         //              .channel
		.in_data           (rsp_demux_src12_data),                                            //              .data
		.out_ready         (crosser_038_out_ready),                                           //           out.ready
		.out_valid         (crosser_038_out_valid),                                           //              .valid
		.out_startofpacket (crosser_038_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_038_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_038_out_channel),                                         //              .channel
		.out_data          (crosser_038_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_039 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_001_src0_data),                                     //              .data
		.out_ready         (crosser_039_out_ready),                                       //           out.ready
		.out_valid         (crosser_039_out_valid),                                       //              .valid
		.out_startofpacket (crosser_039_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_039_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_039_out_channel),                                     //              .channel
		.out_data          (crosser_039_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_040 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                    //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                  //              .channel
		.in_data           (rsp_demux_001_src1_data),                                     //              .data
		.out_ready         (crosser_040_out_ready),                                       //           out.ready
		.out_valid         (crosser_040_out_valid),                                       //              .valid
		.out_startofpacket (crosser_040_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_040_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_040_out_channel),                                     //              .channel
		.out_data          (crosser_040_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_041 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_002_src0_data),                                     //              .data
		.out_ready         (crosser_041_out_ready),                                       //           out.ready
		.out_valid         (crosser_041_out_valid),                                       //              .valid
		.out_startofpacket (crosser_041_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_041_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_041_out_channel),                                     //              .channel
		.out_data          (crosser_041_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_042 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                                    //            in.ready
		.in_valid          (rsp_demux_002_src1_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_002_src1_channel),                                  //              .channel
		.in_data           (rsp_demux_002_src1_data),                                     //              .data
		.out_ready         (crosser_042_out_ready),                                       //           out.ready
		.out_valid         (crosser_042_out_valid),                                       //              .valid
		.out_startofpacket (crosser_042_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_042_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_042_out_channel),                                     //              .channel
		.out_data          (crosser_042_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_043 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src2_ready),                                    //            in.ready
		.in_valid          (rsp_demux_002_src2_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_002_src2_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src2_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_002_src2_channel),                                  //              .channel
		.in_data           (rsp_demux_002_src2_data),                                     //              .data
		.out_ready         (crosser_043_out_ready),                                       //           out.ready
		.out_valid         (crosser_043_out_valid),                                       //              .valid
		.out_startofpacket (crosser_043_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_043_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_043_out_channel),                                     //              .channel
		.out_data          (crosser_043_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_044 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_003_src0_data),                                     //              .data
		.out_ready         (crosser_044_out_ready),                                       //           out.ready
		.out_valid         (crosser_044_out_valid),                                       //              .valid
		.out_startofpacket (crosser_044_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_044_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_044_out_channel),                                     //              .channel
		.out_data          (crosser_044_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_045 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_004_src0_data),                                     //              .data
		.out_ready         (crosser_045_out_ready),                                       //           out.ready
		.out_valid         (crosser_045_out_valid),                                       //              .valid
		.out_startofpacket (crosser_045_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_045_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_045_out_channel),                                     //              .channel
		.out_data          (crosser_045_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_046 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_005_src0_data),                                     //              .data
		.out_ready         (crosser_046_out_ready),                                       //           out.ready
		.out_valid         (crosser_046_out_valid),                                       //              .valid
		.out_startofpacket (crosser_046_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_046_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_046_out_channel),                                     //              .channel
		.out_data          (crosser_046_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_047 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_006_src0_data),                                     //              .data
		.out_ready         (crosser_047_out_ready),                                       //           out.ready
		.out_valid         (crosser_047_out_valid),                                       //              .valid
		.out_startofpacket (crosser_047_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_047_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_047_out_channel),                                     //              .channel
		.out_data          (crosser_047_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_048 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_007_src0_data),                                     //              .data
		.out_ready         (crosser_048_out_ready),                                       //           out.ready
		.out_valid         (crosser_048_out_valid),                                       //              .valid
		.out_startofpacket (crosser_048_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_048_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_048_out_channel),                                     //              .channel
		.out_data          (crosser_048_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_049 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_008_src0_data),                                     //              .data
		.out_ready         (crosser_049_out_ready),                                       //           out.ready
		.out_valid         (crosser_049_out_valid),                                       //              .valid
		.out_startofpacket (crosser_049_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_049_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_049_out_channel),                                     //              .channel
		.out_data          (crosser_049_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_050 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_009_src0_data),                                     //              .data
		.out_ready         (crosser_050_out_ready),                                       //           out.ready
		.out_valid         (crosser_050_out_valid),                                       //              .valid
		.out_startofpacket (crosser_050_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_050_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_050_out_channel),                                     //              .channel
		.out_data          (crosser_050_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (402),
		.BITS_PER_SYMBOL     (402),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_051 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                             //        in_clk.clk
		.in_reset          (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                             //       out_clk.clk
		.out_reset         (FTDI_UMFT601A_Module_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_010_src0_data),                                     //              .data
		.out_ready         (crosser_051_out_ready),                                       //           out.ready
		.out_valid         (crosser_051_out_valid),                                       //              .valid
		.out_startofpacket (crosser_051_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_051_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_051_out_channel),                                     //              .channel
		.out_data          (crosser_051_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (m2_ddr2_memory_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m2_ddr2_memory_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (m2_ddr2_memory_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (m2_ddr2_memory_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (m1_clock_bridge_ftdi_s0_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                          //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_general_s0_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (m1_clock_bridge_general_s0_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (m1_clock_bridge_general_s0_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                          //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (m1_clock_bridge_comm_3_right_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                           //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (m1_clock_bridge_comm_4_right_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                           //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (m1_clock_bridge_comm_2_right_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                           //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (m1_clock_bridge_comm_1_right_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                           //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (m1_clock_bridge_comm_3_left_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                          //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (m1_clock_bridge_comm_4_left_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                          //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (m1_clock_bridge_comm_2_left_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                          //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_ftdi_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (m1_clock_bridge_comm_1_left_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                          //         .error
	);

endmodule
