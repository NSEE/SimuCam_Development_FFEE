// MebX_Qsys_Project_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module MebX_Qsys_Project_mm_interconnect_3 (
		input  wire         m1_ddr2_memory_afi_clk_clk,                                      //                                    m1_ddr2_memory_afi_clk.clk
		input  wire         m1_ddr2_memory_afi_half_clk_clk,                                 //                               m1_ddr2_memory_afi_half_clk.clk
		input  wire         m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset,    //    m1_clock_bridge_general_m0_reset_reset_bridge_in_reset.reset
		input  wire         m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset, // m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         m1_ddr2_memory_soft_reset_reset_bridge_in_reset_reset,           //           m1_ddr2_memory_soft_reset_reset_bridge_in_reset.reset
		input  wire [30:0]  m1_clock_bridge_ch1_left_m0_address,                             //                               m1_clock_bridge_ch1_left_m0.address
		output wire         m1_clock_bridge_ch1_left_m0_waitrequest,                         //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_ch1_left_m0_burstcount,                          //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_ch1_left_m0_byteenable,                          //                                                          .byteenable
		input  wire         m1_clock_bridge_ch1_left_m0_read,                                //                                                          .read
		output wire [255:0] m1_clock_bridge_ch1_left_m0_readdata,                            //                                                          .readdata
		output wire         m1_clock_bridge_ch1_left_m0_readdatavalid,                       //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ch1_left_m0_write,                               //                                                          .write
		input  wire [255:0] m1_clock_bridge_ch1_left_m0_writedata,                           //                                                          .writedata
		input  wire         m1_clock_bridge_ch1_left_m0_debugaccess,                         //                                                          .debugaccess
		input  wire [30:0]  m1_clock_bridge_ch1_right_m0_address,                            //                              m1_clock_bridge_ch1_right_m0.address
		output wire         m1_clock_bridge_ch1_right_m0_waitrequest,                        //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_ch1_right_m0_burstcount,                         //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_ch1_right_m0_byteenable,                         //                                                          .byteenable
		input  wire         m1_clock_bridge_ch1_right_m0_read,                               //                                                          .read
		output wire [255:0] m1_clock_bridge_ch1_right_m0_readdata,                           //                                                          .readdata
		output wire         m1_clock_bridge_ch1_right_m0_readdatavalid,                      //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ch1_right_m0_write,                              //                                                          .write
		input  wire [255:0] m1_clock_bridge_ch1_right_m0_writedata,                          //                                                          .writedata
		input  wire         m1_clock_bridge_ch1_right_m0_debugaccess,                        //                                                          .debugaccess
		input  wire [30:0]  m1_clock_bridge_ch2_left_m0_address,                             //                               m1_clock_bridge_ch2_left_m0.address
		output wire         m1_clock_bridge_ch2_left_m0_waitrequest,                         //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_ch2_left_m0_burstcount,                          //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_ch2_left_m0_byteenable,                          //                                                          .byteenable
		input  wire         m1_clock_bridge_ch2_left_m0_read,                                //                                                          .read
		output wire [255:0] m1_clock_bridge_ch2_left_m0_readdata,                            //                                                          .readdata
		output wire         m1_clock_bridge_ch2_left_m0_readdatavalid,                       //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ch2_left_m0_write,                               //                                                          .write
		input  wire [255:0] m1_clock_bridge_ch2_left_m0_writedata,                           //                                                          .writedata
		input  wire         m1_clock_bridge_ch2_left_m0_debugaccess,                         //                                                          .debugaccess
		input  wire [30:0]  m1_clock_bridge_ch2_right_m0_address,                            //                              m1_clock_bridge_ch2_right_m0.address
		output wire         m1_clock_bridge_ch2_right_m0_waitrequest,                        //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_ch2_right_m0_burstcount,                         //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_ch2_right_m0_byteenable,                         //                                                          .byteenable
		input  wire         m1_clock_bridge_ch2_right_m0_read,                               //                                                          .read
		output wire [255:0] m1_clock_bridge_ch2_right_m0_readdata,                           //                                                          .readdata
		output wire         m1_clock_bridge_ch2_right_m0_readdatavalid,                      //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ch2_right_m0_write,                              //                                                          .write
		input  wire [255:0] m1_clock_bridge_ch2_right_m0_writedata,                          //                                                          .writedata
		input  wire         m1_clock_bridge_ch2_right_m0_debugaccess,                        //                                                          .debugaccess
		input  wire [30:0]  m1_clock_bridge_ch3_left_m0_address,                             //                               m1_clock_bridge_ch3_left_m0.address
		output wire         m1_clock_bridge_ch3_left_m0_waitrequest,                         //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_ch3_left_m0_burstcount,                          //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_ch3_left_m0_byteenable,                          //                                                          .byteenable
		input  wire         m1_clock_bridge_ch3_left_m0_read,                                //                                                          .read
		output wire [255:0] m1_clock_bridge_ch3_left_m0_readdata,                            //                                                          .readdata
		output wire         m1_clock_bridge_ch3_left_m0_readdatavalid,                       //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ch3_left_m0_write,                               //                                                          .write
		input  wire [255:0] m1_clock_bridge_ch3_left_m0_writedata,                           //                                                          .writedata
		input  wire         m1_clock_bridge_ch3_left_m0_debugaccess,                         //                                                          .debugaccess
		input  wire [30:0]  m1_clock_bridge_ch3_right_m0_address,                            //                              m1_clock_bridge_ch3_right_m0.address
		output wire         m1_clock_bridge_ch3_right_m0_waitrequest,                        //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_ch3_right_m0_burstcount,                         //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_ch3_right_m0_byteenable,                         //                                                          .byteenable
		input  wire         m1_clock_bridge_ch3_right_m0_read,                               //                                                          .read
		output wire [255:0] m1_clock_bridge_ch3_right_m0_readdata,                           //                                                          .readdata
		output wire         m1_clock_bridge_ch3_right_m0_readdatavalid,                      //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ch3_right_m0_write,                              //                                                          .write
		input  wire [255:0] m1_clock_bridge_ch3_right_m0_writedata,                          //                                                          .writedata
		input  wire         m1_clock_bridge_ch3_right_m0_debugaccess,                        //                                                          .debugaccess
		input  wire [30:0]  m1_clock_bridge_ch4_left_m0_address,                             //                               m1_clock_bridge_ch4_left_m0.address
		output wire         m1_clock_bridge_ch4_left_m0_waitrequest,                         //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_ch4_left_m0_burstcount,                          //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_ch4_left_m0_byteenable,                          //                                                          .byteenable
		input  wire         m1_clock_bridge_ch4_left_m0_read,                                //                                                          .read
		output wire [255:0] m1_clock_bridge_ch4_left_m0_readdata,                            //                                                          .readdata
		output wire         m1_clock_bridge_ch4_left_m0_readdatavalid,                       //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ch4_left_m0_write,                               //                                                          .write
		input  wire [255:0] m1_clock_bridge_ch4_left_m0_writedata,                           //                                                          .writedata
		input  wire         m1_clock_bridge_ch4_left_m0_debugaccess,                         //                                                          .debugaccess
		input  wire [30:0]  m1_clock_bridge_ch4_right_m0_address,                            //                              m1_clock_bridge_ch4_right_m0.address
		output wire         m1_clock_bridge_ch4_right_m0_waitrequest,                        //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_ch4_right_m0_burstcount,                         //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_ch4_right_m0_byteenable,                         //                                                          .byteenable
		input  wire         m1_clock_bridge_ch4_right_m0_read,                               //                                                          .read
		output wire [255:0] m1_clock_bridge_ch4_right_m0_readdata,                           //                                                          .readdata
		output wire         m1_clock_bridge_ch4_right_m0_readdatavalid,                      //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ch4_right_m0_write,                              //                                                          .write
		input  wire [255:0] m1_clock_bridge_ch4_right_m0_writedata,                          //                                                          .writedata
		input  wire         m1_clock_bridge_ch4_right_m0_debugaccess,                        //                                                          .debugaccess
		input  wire [30:0]  m1_clock_bridge_ftdi_m0_address,                                 //                                   m1_clock_bridge_ftdi_m0.address
		output wire         m1_clock_bridge_ftdi_m0_waitrequest,                             //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_ftdi_m0_burstcount,                              //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_ftdi_m0_byteenable,                              //                                                          .byteenable
		input  wire         m1_clock_bridge_ftdi_m0_read,                                    //                                                          .read
		output wire [255:0] m1_clock_bridge_ftdi_m0_readdata,                                //                                                          .readdata
		output wire         m1_clock_bridge_ftdi_m0_readdatavalid,                           //                                                          .readdatavalid
		input  wire         m1_clock_bridge_ftdi_m0_write,                                   //                                                          .write
		input  wire [255:0] m1_clock_bridge_ftdi_m0_writedata,                               //                                                          .writedata
		input  wire         m1_clock_bridge_ftdi_m0_debugaccess,                             //                                                          .debugaccess
		input  wire [30:0]  m1_clock_bridge_general_m0_address,                              //                                m1_clock_bridge_general_m0.address
		output wire         m1_clock_bridge_general_m0_waitrequest,                          //                                                          .waitrequest
		input  wire [2:0]   m1_clock_bridge_general_m0_burstcount,                           //                                                          .burstcount
		input  wire [31:0]  m1_clock_bridge_general_m0_byteenable,                           //                                                          .byteenable
		input  wire         m1_clock_bridge_general_m0_read,                                 //                                                          .read
		output wire [255:0] m1_clock_bridge_general_m0_readdata,                             //                                                          .readdata
		output wire         m1_clock_bridge_general_m0_readdatavalid,                        //                                                          .readdatavalid
		input  wire         m1_clock_bridge_general_m0_write,                                //                                                          .write
		input  wire [255:0] m1_clock_bridge_general_m0_writedata,                            //                                                          .writedata
		input  wire         m1_clock_bridge_general_m0_debugaccess,                          //                                                          .debugaccess
		output wire [25:0]  m1_ddr2_memory_avl_address,                                      //                                        m1_ddr2_memory_avl.address
		output wire         m1_ddr2_memory_avl_write,                                        //                                                          .write
		output wire         m1_ddr2_memory_avl_read,                                         //                                                          .read
		input  wire [255:0] m1_ddr2_memory_avl_readdata,                                     //                                                          .readdata
		output wire [255:0] m1_ddr2_memory_avl_writedata,                                    //                                                          .writedata
		output wire         m1_ddr2_memory_avl_beginbursttransfer,                           //                                                          .beginbursttransfer
		output wire [7:0]   m1_ddr2_memory_avl_burstcount,                                   //                                                          .burstcount
		output wire [31:0]  m1_ddr2_memory_avl_byteenable,                                   //                                                          .byteenable
		input  wire         m1_ddr2_memory_avl_readdatavalid,                                //                                                          .readdatavalid
		input  wire         m1_ddr2_memory_avl_waitrequest                                   //                                                          .waitrequest
	);

	wire          m1_clock_bridge_general_m0_translator_avalon_universal_master_0_waitrequest;     // m1_clock_bridge_general_m0_agent:av_waitrequest -> m1_clock_bridge_general_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_general_m0_translator_avalon_universal_master_0_readdata;        // m1_clock_bridge_general_m0_agent:av_readdata -> m1_clock_bridge_general_m0_translator:uav_readdata
	wire          m1_clock_bridge_general_m0_translator_avalon_universal_master_0_debugaccess;     // m1_clock_bridge_general_m0_translator:uav_debugaccess -> m1_clock_bridge_general_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_general_m0_translator_avalon_universal_master_0_address;         // m1_clock_bridge_general_m0_translator:uav_address -> m1_clock_bridge_general_m0_agent:av_address
	wire          m1_clock_bridge_general_m0_translator_avalon_universal_master_0_read;            // m1_clock_bridge_general_m0_translator:uav_read -> m1_clock_bridge_general_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_general_m0_translator_avalon_universal_master_0_byteenable;      // m1_clock_bridge_general_m0_translator:uav_byteenable -> m1_clock_bridge_general_m0_agent:av_byteenable
	wire          m1_clock_bridge_general_m0_translator_avalon_universal_master_0_readdatavalid;   // m1_clock_bridge_general_m0_agent:av_readdatavalid -> m1_clock_bridge_general_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_general_m0_translator_avalon_universal_master_0_lock;            // m1_clock_bridge_general_m0_translator:uav_lock -> m1_clock_bridge_general_m0_agent:av_lock
	wire          m1_clock_bridge_general_m0_translator_avalon_universal_master_0_write;           // m1_clock_bridge_general_m0_translator:uav_write -> m1_clock_bridge_general_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_general_m0_translator_avalon_universal_master_0_writedata;       // m1_clock_bridge_general_m0_translator:uav_writedata -> m1_clock_bridge_general_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_general_m0_translator_avalon_universal_master_0_burstcount;      // m1_clock_bridge_general_m0_translator:uav_burstcount -> m1_clock_bridge_general_m0_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                               // rsp_mux:src_valid -> m1_clock_bridge_general_m0_agent:rp_valid
	wire  [368:0] rsp_mux_src_data;                                                                // rsp_mux:src_data -> m1_clock_bridge_general_m0_agent:rp_data
	wire          rsp_mux_src_ready;                                                               // m1_clock_bridge_general_m0_agent:rp_ready -> rsp_mux:src_ready
	wire    [9:0] rsp_mux_src_channel;                                                             // rsp_mux:src_channel -> m1_clock_bridge_general_m0_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                       // rsp_mux:src_startofpacket -> m1_clock_bridge_general_m0_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                         // rsp_mux:src_endofpacket -> m1_clock_bridge_general_m0_agent:rp_endofpacket
	wire          m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_waitrequest;    // m1_clock_bridge_ch1_left_m0_agent:av_waitrequest -> m1_clock_bridge_ch1_left_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_readdata;       // m1_clock_bridge_ch1_left_m0_agent:av_readdata -> m1_clock_bridge_ch1_left_m0_translator:uav_readdata
	wire          m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_debugaccess;    // m1_clock_bridge_ch1_left_m0_translator:uav_debugaccess -> m1_clock_bridge_ch1_left_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_address;        // m1_clock_bridge_ch1_left_m0_translator:uav_address -> m1_clock_bridge_ch1_left_m0_agent:av_address
	wire          m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_read;           // m1_clock_bridge_ch1_left_m0_translator:uav_read -> m1_clock_bridge_ch1_left_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_byteenable;     // m1_clock_bridge_ch1_left_m0_translator:uav_byteenable -> m1_clock_bridge_ch1_left_m0_agent:av_byteenable
	wire          m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_readdatavalid;  // m1_clock_bridge_ch1_left_m0_agent:av_readdatavalid -> m1_clock_bridge_ch1_left_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_lock;           // m1_clock_bridge_ch1_left_m0_translator:uav_lock -> m1_clock_bridge_ch1_left_m0_agent:av_lock
	wire          m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_write;          // m1_clock_bridge_ch1_left_m0_translator:uav_write -> m1_clock_bridge_ch1_left_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_writedata;      // m1_clock_bridge_ch1_left_m0_translator:uav_writedata -> m1_clock_bridge_ch1_left_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_burstcount;     // m1_clock_bridge_ch1_left_m0_translator:uav_burstcount -> m1_clock_bridge_ch1_left_m0_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                           // rsp_mux_001:src_valid -> m1_clock_bridge_ch1_left_m0_agent:rp_valid
	wire  [368:0] rsp_mux_001_src_data;                                                            // rsp_mux_001:src_data -> m1_clock_bridge_ch1_left_m0_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                           // m1_clock_bridge_ch1_left_m0_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [9:0] rsp_mux_001_src_channel;                                                         // rsp_mux_001:src_channel -> m1_clock_bridge_ch1_left_m0_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                   // rsp_mux_001:src_startofpacket -> m1_clock_bridge_ch1_left_m0_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                     // rsp_mux_001:src_endofpacket -> m1_clock_bridge_ch1_left_m0_agent:rp_endofpacket
	wire          m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_waitrequest;   // m1_clock_bridge_ch1_right_m0_agent:av_waitrequest -> m1_clock_bridge_ch1_right_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_readdata;      // m1_clock_bridge_ch1_right_m0_agent:av_readdata -> m1_clock_bridge_ch1_right_m0_translator:uav_readdata
	wire          m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_debugaccess;   // m1_clock_bridge_ch1_right_m0_translator:uav_debugaccess -> m1_clock_bridge_ch1_right_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_address;       // m1_clock_bridge_ch1_right_m0_translator:uav_address -> m1_clock_bridge_ch1_right_m0_agent:av_address
	wire          m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_read;          // m1_clock_bridge_ch1_right_m0_translator:uav_read -> m1_clock_bridge_ch1_right_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_byteenable;    // m1_clock_bridge_ch1_right_m0_translator:uav_byteenable -> m1_clock_bridge_ch1_right_m0_agent:av_byteenable
	wire          m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_readdatavalid; // m1_clock_bridge_ch1_right_m0_agent:av_readdatavalid -> m1_clock_bridge_ch1_right_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_lock;          // m1_clock_bridge_ch1_right_m0_translator:uav_lock -> m1_clock_bridge_ch1_right_m0_agent:av_lock
	wire          m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_write;         // m1_clock_bridge_ch1_right_m0_translator:uav_write -> m1_clock_bridge_ch1_right_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_writedata;     // m1_clock_bridge_ch1_right_m0_translator:uav_writedata -> m1_clock_bridge_ch1_right_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_burstcount;    // m1_clock_bridge_ch1_right_m0_translator:uav_burstcount -> m1_clock_bridge_ch1_right_m0_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                           // rsp_mux_002:src_valid -> m1_clock_bridge_ch1_right_m0_agent:rp_valid
	wire  [368:0] rsp_mux_002_src_data;                                                            // rsp_mux_002:src_data -> m1_clock_bridge_ch1_right_m0_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                           // m1_clock_bridge_ch1_right_m0_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [9:0] rsp_mux_002_src_channel;                                                         // rsp_mux_002:src_channel -> m1_clock_bridge_ch1_right_m0_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                   // rsp_mux_002:src_startofpacket -> m1_clock_bridge_ch1_right_m0_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                     // rsp_mux_002:src_endofpacket -> m1_clock_bridge_ch1_right_m0_agent:rp_endofpacket
	wire          m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_waitrequest;    // m1_clock_bridge_ch2_left_m0_agent:av_waitrequest -> m1_clock_bridge_ch2_left_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_readdata;       // m1_clock_bridge_ch2_left_m0_agent:av_readdata -> m1_clock_bridge_ch2_left_m0_translator:uav_readdata
	wire          m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_debugaccess;    // m1_clock_bridge_ch2_left_m0_translator:uav_debugaccess -> m1_clock_bridge_ch2_left_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_address;        // m1_clock_bridge_ch2_left_m0_translator:uav_address -> m1_clock_bridge_ch2_left_m0_agent:av_address
	wire          m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_read;           // m1_clock_bridge_ch2_left_m0_translator:uav_read -> m1_clock_bridge_ch2_left_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_byteenable;     // m1_clock_bridge_ch2_left_m0_translator:uav_byteenable -> m1_clock_bridge_ch2_left_m0_agent:av_byteenable
	wire          m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_readdatavalid;  // m1_clock_bridge_ch2_left_m0_agent:av_readdatavalid -> m1_clock_bridge_ch2_left_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_lock;           // m1_clock_bridge_ch2_left_m0_translator:uav_lock -> m1_clock_bridge_ch2_left_m0_agent:av_lock
	wire          m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_write;          // m1_clock_bridge_ch2_left_m0_translator:uav_write -> m1_clock_bridge_ch2_left_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_writedata;      // m1_clock_bridge_ch2_left_m0_translator:uav_writedata -> m1_clock_bridge_ch2_left_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_burstcount;     // m1_clock_bridge_ch2_left_m0_translator:uav_burstcount -> m1_clock_bridge_ch2_left_m0_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                           // rsp_mux_003:src_valid -> m1_clock_bridge_ch2_left_m0_agent:rp_valid
	wire  [368:0] rsp_mux_003_src_data;                                                            // rsp_mux_003:src_data -> m1_clock_bridge_ch2_left_m0_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                           // m1_clock_bridge_ch2_left_m0_agent:rp_ready -> rsp_mux_003:src_ready
	wire    [9:0] rsp_mux_003_src_channel;                                                         // rsp_mux_003:src_channel -> m1_clock_bridge_ch2_left_m0_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                   // rsp_mux_003:src_startofpacket -> m1_clock_bridge_ch2_left_m0_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                     // rsp_mux_003:src_endofpacket -> m1_clock_bridge_ch2_left_m0_agent:rp_endofpacket
	wire          m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_waitrequest;   // m1_clock_bridge_ch2_right_m0_agent:av_waitrequest -> m1_clock_bridge_ch2_right_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_readdata;      // m1_clock_bridge_ch2_right_m0_agent:av_readdata -> m1_clock_bridge_ch2_right_m0_translator:uav_readdata
	wire          m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_debugaccess;   // m1_clock_bridge_ch2_right_m0_translator:uav_debugaccess -> m1_clock_bridge_ch2_right_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_address;       // m1_clock_bridge_ch2_right_m0_translator:uav_address -> m1_clock_bridge_ch2_right_m0_agent:av_address
	wire          m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_read;          // m1_clock_bridge_ch2_right_m0_translator:uav_read -> m1_clock_bridge_ch2_right_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_byteenable;    // m1_clock_bridge_ch2_right_m0_translator:uav_byteenable -> m1_clock_bridge_ch2_right_m0_agent:av_byteenable
	wire          m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_readdatavalid; // m1_clock_bridge_ch2_right_m0_agent:av_readdatavalid -> m1_clock_bridge_ch2_right_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_lock;          // m1_clock_bridge_ch2_right_m0_translator:uav_lock -> m1_clock_bridge_ch2_right_m0_agent:av_lock
	wire          m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_write;         // m1_clock_bridge_ch2_right_m0_translator:uav_write -> m1_clock_bridge_ch2_right_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_writedata;     // m1_clock_bridge_ch2_right_m0_translator:uav_writedata -> m1_clock_bridge_ch2_right_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_burstcount;    // m1_clock_bridge_ch2_right_m0_translator:uav_burstcount -> m1_clock_bridge_ch2_right_m0_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                           // rsp_mux_004:src_valid -> m1_clock_bridge_ch2_right_m0_agent:rp_valid
	wire  [368:0] rsp_mux_004_src_data;                                                            // rsp_mux_004:src_data -> m1_clock_bridge_ch2_right_m0_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                           // m1_clock_bridge_ch2_right_m0_agent:rp_ready -> rsp_mux_004:src_ready
	wire    [9:0] rsp_mux_004_src_channel;                                                         // rsp_mux_004:src_channel -> m1_clock_bridge_ch2_right_m0_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                   // rsp_mux_004:src_startofpacket -> m1_clock_bridge_ch2_right_m0_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                     // rsp_mux_004:src_endofpacket -> m1_clock_bridge_ch2_right_m0_agent:rp_endofpacket
	wire          m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_waitrequest;    // m1_clock_bridge_ch3_left_m0_agent:av_waitrequest -> m1_clock_bridge_ch3_left_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_readdata;       // m1_clock_bridge_ch3_left_m0_agent:av_readdata -> m1_clock_bridge_ch3_left_m0_translator:uav_readdata
	wire          m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_debugaccess;    // m1_clock_bridge_ch3_left_m0_translator:uav_debugaccess -> m1_clock_bridge_ch3_left_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_address;        // m1_clock_bridge_ch3_left_m0_translator:uav_address -> m1_clock_bridge_ch3_left_m0_agent:av_address
	wire          m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_read;           // m1_clock_bridge_ch3_left_m0_translator:uav_read -> m1_clock_bridge_ch3_left_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_byteenable;     // m1_clock_bridge_ch3_left_m0_translator:uav_byteenable -> m1_clock_bridge_ch3_left_m0_agent:av_byteenable
	wire          m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_readdatavalid;  // m1_clock_bridge_ch3_left_m0_agent:av_readdatavalid -> m1_clock_bridge_ch3_left_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_lock;           // m1_clock_bridge_ch3_left_m0_translator:uav_lock -> m1_clock_bridge_ch3_left_m0_agent:av_lock
	wire          m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_write;          // m1_clock_bridge_ch3_left_m0_translator:uav_write -> m1_clock_bridge_ch3_left_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_writedata;      // m1_clock_bridge_ch3_left_m0_translator:uav_writedata -> m1_clock_bridge_ch3_left_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_burstcount;     // m1_clock_bridge_ch3_left_m0_translator:uav_burstcount -> m1_clock_bridge_ch3_left_m0_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                           // rsp_mux_005:src_valid -> m1_clock_bridge_ch3_left_m0_agent:rp_valid
	wire  [368:0] rsp_mux_005_src_data;                                                            // rsp_mux_005:src_data -> m1_clock_bridge_ch3_left_m0_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                           // m1_clock_bridge_ch3_left_m0_agent:rp_ready -> rsp_mux_005:src_ready
	wire    [9:0] rsp_mux_005_src_channel;                                                         // rsp_mux_005:src_channel -> m1_clock_bridge_ch3_left_m0_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                   // rsp_mux_005:src_startofpacket -> m1_clock_bridge_ch3_left_m0_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                     // rsp_mux_005:src_endofpacket -> m1_clock_bridge_ch3_left_m0_agent:rp_endofpacket
	wire          m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_waitrequest;   // m1_clock_bridge_ch3_right_m0_agent:av_waitrequest -> m1_clock_bridge_ch3_right_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_readdata;      // m1_clock_bridge_ch3_right_m0_agent:av_readdata -> m1_clock_bridge_ch3_right_m0_translator:uav_readdata
	wire          m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_debugaccess;   // m1_clock_bridge_ch3_right_m0_translator:uav_debugaccess -> m1_clock_bridge_ch3_right_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_address;       // m1_clock_bridge_ch3_right_m0_translator:uav_address -> m1_clock_bridge_ch3_right_m0_agent:av_address
	wire          m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_read;          // m1_clock_bridge_ch3_right_m0_translator:uav_read -> m1_clock_bridge_ch3_right_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_byteenable;    // m1_clock_bridge_ch3_right_m0_translator:uav_byteenable -> m1_clock_bridge_ch3_right_m0_agent:av_byteenable
	wire          m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_readdatavalid; // m1_clock_bridge_ch3_right_m0_agent:av_readdatavalid -> m1_clock_bridge_ch3_right_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_lock;          // m1_clock_bridge_ch3_right_m0_translator:uav_lock -> m1_clock_bridge_ch3_right_m0_agent:av_lock
	wire          m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_write;         // m1_clock_bridge_ch3_right_m0_translator:uav_write -> m1_clock_bridge_ch3_right_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_writedata;     // m1_clock_bridge_ch3_right_m0_translator:uav_writedata -> m1_clock_bridge_ch3_right_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_burstcount;    // m1_clock_bridge_ch3_right_m0_translator:uav_burstcount -> m1_clock_bridge_ch3_right_m0_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                           // rsp_mux_006:src_valid -> m1_clock_bridge_ch3_right_m0_agent:rp_valid
	wire  [368:0] rsp_mux_006_src_data;                                                            // rsp_mux_006:src_data -> m1_clock_bridge_ch3_right_m0_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                           // m1_clock_bridge_ch3_right_m0_agent:rp_ready -> rsp_mux_006:src_ready
	wire    [9:0] rsp_mux_006_src_channel;                                                         // rsp_mux_006:src_channel -> m1_clock_bridge_ch3_right_m0_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                   // rsp_mux_006:src_startofpacket -> m1_clock_bridge_ch3_right_m0_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                     // rsp_mux_006:src_endofpacket -> m1_clock_bridge_ch3_right_m0_agent:rp_endofpacket
	wire          m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_waitrequest;    // m1_clock_bridge_ch4_left_m0_agent:av_waitrequest -> m1_clock_bridge_ch4_left_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_readdata;       // m1_clock_bridge_ch4_left_m0_agent:av_readdata -> m1_clock_bridge_ch4_left_m0_translator:uav_readdata
	wire          m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_debugaccess;    // m1_clock_bridge_ch4_left_m0_translator:uav_debugaccess -> m1_clock_bridge_ch4_left_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_address;        // m1_clock_bridge_ch4_left_m0_translator:uav_address -> m1_clock_bridge_ch4_left_m0_agent:av_address
	wire          m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_read;           // m1_clock_bridge_ch4_left_m0_translator:uav_read -> m1_clock_bridge_ch4_left_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_byteenable;     // m1_clock_bridge_ch4_left_m0_translator:uav_byteenable -> m1_clock_bridge_ch4_left_m0_agent:av_byteenable
	wire          m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_readdatavalid;  // m1_clock_bridge_ch4_left_m0_agent:av_readdatavalid -> m1_clock_bridge_ch4_left_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_lock;           // m1_clock_bridge_ch4_left_m0_translator:uav_lock -> m1_clock_bridge_ch4_left_m0_agent:av_lock
	wire          m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_write;          // m1_clock_bridge_ch4_left_m0_translator:uav_write -> m1_clock_bridge_ch4_left_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_writedata;      // m1_clock_bridge_ch4_left_m0_translator:uav_writedata -> m1_clock_bridge_ch4_left_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_burstcount;     // m1_clock_bridge_ch4_left_m0_translator:uav_burstcount -> m1_clock_bridge_ch4_left_m0_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                           // rsp_mux_007:src_valid -> m1_clock_bridge_ch4_left_m0_agent:rp_valid
	wire  [368:0] rsp_mux_007_src_data;                                                            // rsp_mux_007:src_data -> m1_clock_bridge_ch4_left_m0_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                           // m1_clock_bridge_ch4_left_m0_agent:rp_ready -> rsp_mux_007:src_ready
	wire    [9:0] rsp_mux_007_src_channel;                                                         // rsp_mux_007:src_channel -> m1_clock_bridge_ch4_left_m0_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                   // rsp_mux_007:src_startofpacket -> m1_clock_bridge_ch4_left_m0_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                     // rsp_mux_007:src_endofpacket -> m1_clock_bridge_ch4_left_m0_agent:rp_endofpacket
	wire          m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_waitrequest;   // m1_clock_bridge_ch4_right_m0_agent:av_waitrequest -> m1_clock_bridge_ch4_right_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_readdata;      // m1_clock_bridge_ch4_right_m0_agent:av_readdata -> m1_clock_bridge_ch4_right_m0_translator:uav_readdata
	wire          m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_debugaccess;   // m1_clock_bridge_ch4_right_m0_translator:uav_debugaccess -> m1_clock_bridge_ch4_right_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_address;       // m1_clock_bridge_ch4_right_m0_translator:uav_address -> m1_clock_bridge_ch4_right_m0_agent:av_address
	wire          m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_read;          // m1_clock_bridge_ch4_right_m0_translator:uav_read -> m1_clock_bridge_ch4_right_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_byteenable;    // m1_clock_bridge_ch4_right_m0_translator:uav_byteenable -> m1_clock_bridge_ch4_right_m0_agent:av_byteenable
	wire          m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_readdatavalid; // m1_clock_bridge_ch4_right_m0_agent:av_readdatavalid -> m1_clock_bridge_ch4_right_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_lock;          // m1_clock_bridge_ch4_right_m0_translator:uav_lock -> m1_clock_bridge_ch4_right_m0_agent:av_lock
	wire          m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_write;         // m1_clock_bridge_ch4_right_m0_translator:uav_write -> m1_clock_bridge_ch4_right_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_writedata;     // m1_clock_bridge_ch4_right_m0_translator:uav_writedata -> m1_clock_bridge_ch4_right_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_burstcount;    // m1_clock_bridge_ch4_right_m0_translator:uav_burstcount -> m1_clock_bridge_ch4_right_m0_agent:av_burstcount
	wire          rsp_mux_008_src_valid;                                                           // rsp_mux_008:src_valid -> m1_clock_bridge_ch4_right_m0_agent:rp_valid
	wire  [368:0] rsp_mux_008_src_data;                                                            // rsp_mux_008:src_data -> m1_clock_bridge_ch4_right_m0_agent:rp_data
	wire          rsp_mux_008_src_ready;                                                           // m1_clock_bridge_ch4_right_m0_agent:rp_ready -> rsp_mux_008:src_ready
	wire    [9:0] rsp_mux_008_src_channel;                                                         // rsp_mux_008:src_channel -> m1_clock_bridge_ch4_right_m0_agent:rp_channel
	wire          rsp_mux_008_src_startofpacket;                                                   // rsp_mux_008:src_startofpacket -> m1_clock_bridge_ch4_right_m0_agent:rp_startofpacket
	wire          rsp_mux_008_src_endofpacket;                                                     // rsp_mux_008:src_endofpacket -> m1_clock_bridge_ch4_right_m0_agent:rp_endofpacket
	wire          m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_waitrequest;        // m1_clock_bridge_ftdi_m0_agent:av_waitrequest -> m1_clock_bridge_ftdi_m0_translator:uav_waitrequest
	wire  [255:0] m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_readdata;           // m1_clock_bridge_ftdi_m0_agent:av_readdata -> m1_clock_bridge_ftdi_m0_translator:uav_readdata
	wire          m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_debugaccess;        // m1_clock_bridge_ftdi_m0_translator:uav_debugaccess -> m1_clock_bridge_ftdi_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_address;            // m1_clock_bridge_ftdi_m0_translator:uav_address -> m1_clock_bridge_ftdi_m0_agent:av_address
	wire          m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_read;               // m1_clock_bridge_ftdi_m0_translator:uav_read -> m1_clock_bridge_ftdi_m0_agent:av_read
	wire   [31:0] m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_byteenable;         // m1_clock_bridge_ftdi_m0_translator:uav_byteenable -> m1_clock_bridge_ftdi_m0_agent:av_byteenable
	wire          m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_readdatavalid;      // m1_clock_bridge_ftdi_m0_agent:av_readdatavalid -> m1_clock_bridge_ftdi_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_lock;               // m1_clock_bridge_ftdi_m0_translator:uav_lock -> m1_clock_bridge_ftdi_m0_agent:av_lock
	wire          m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_write;              // m1_clock_bridge_ftdi_m0_translator:uav_write -> m1_clock_bridge_ftdi_m0_agent:av_write
	wire  [255:0] m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_writedata;          // m1_clock_bridge_ftdi_m0_translator:uav_writedata -> m1_clock_bridge_ftdi_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_burstcount;         // m1_clock_bridge_ftdi_m0_translator:uav_burstcount -> m1_clock_bridge_ftdi_m0_agent:av_burstcount
	wire          rsp_mux_009_src_valid;                                                           // rsp_mux_009:src_valid -> m1_clock_bridge_ftdi_m0_agent:rp_valid
	wire  [368:0] rsp_mux_009_src_data;                                                            // rsp_mux_009:src_data -> m1_clock_bridge_ftdi_m0_agent:rp_data
	wire          rsp_mux_009_src_ready;                                                           // m1_clock_bridge_ftdi_m0_agent:rp_ready -> rsp_mux_009:src_ready
	wire    [9:0] rsp_mux_009_src_channel;                                                         // rsp_mux_009:src_channel -> m1_clock_bridge_ftdi_m0_agent:rp_channel
	wire          rsp_mux_009_src_startofpacket;                                                   // rsp_mux_009:src_startofpacket -> m1_clock_bridge_ftdi_m0_agent:rp_startofpacket
	wire          rsp_mux_009_src_endofpacket;                                                     // rsp_mux_009:src_endofpacket -> m1_clock_bridge_ftdi_m0_agent:rp_endofpacket
	wire  [255:0] m1_ddr2_memory_avl_agent_m0_readdata;                                            // m1_ddr2_memory_avl_translator:uav_readdata -> m1_ddr2_memory_avl_agent:m0_readdata
	wire          m1_ddr2_memory_avl_agent_m0_waitrequest;                                         // m1_ddr2_memory_avl_translator:uav_waitrequest -> m1_ddr2_memory_avl_agent:m0_waitrequest
	wire          m1_ddr2_memory_avl_agent_m0_debugaccess;                                         // m1_ddr2_memory_avl_agent:m0_debugaccess -> m1_ddr2_memory_avl_translator:uav_debugaccess
	wire   [30:0] m1_ddr2_memory_avl_agent_m0_address;                                             // m1_ddr2_memory_avl_agent:m0_address -> m1_ddr2_memory_avl_translator:uav_address
	wire   [31:0] m1_ddr2_memory_avl_agent_m0_byteenable;                                          // m1_ddr2_memory_avl_agent:m0_byteenable -> m1_ddr2_memory_avl_translator:uav_byteenable
	wire          m1_ddr2_memory_avl_agent_m0_read;                                                // m1_ddr2_memory_avl_agent:m0_read -> m1_ddr2_memory_avl_translator:uav_read
	wire          m1_ddr2_memory_avl_agent_m0_readdatavalid;                                       // m1_ddr2_memory_avl_translator:uav_readdatavalid -> m1_ddr2_memory_avl_agent:m0_readdatavalid
	wire          m1_ddr2_memory_avl_agent_m0_lock;                                                // m1_ddr2_memory_avl_agent:m0_lock -> m1_ddr2_memory_avl_translator:uav_lock
	wire  [255:0] m1_ddr2_memory_avl_agent_m0_writedata;                                           // m1_ddr2_memory_avl_agent:m0_writedata -> m1_ddr2_memory_avl_translator:uav_writedata
	wire          m1_ddr2_memory_avl_agent_m0_write;                                               // m1_ddr2_memory_avl_agent:m0_write -> m1_ddr2_memory_avl_translator:uav_write
	wire   [12:0] m1_ddr2_memory_avl_agent_m0_burstcount;                                          // m1_ddr2_memory_avl_agent:m0_burstcount -> m1_ddr2_memory_avl_translator:uav_burstcount
	wire          m1_ddr2_memory_avl_agent_rf_source_valid;                                        // m1_ddr2_memory_avl_agent:rf_source_valid -> m1_ddr2_memory_avl_agent_rsp_fifo:in_valid
	wire  [369:0] m1_ddr2_memory_avl_agent_rf_source_data;                                         // m1_ddr2_memory_avl_agent:rf_source_data -> m1_ddr2_memory_avl_agent_rsp_fifo:in_data
	wire          m1_ddr2_memory_avl_agent_rf_source_ready;                                        // m1_ddr2_memory_avl_agent_rsp_fifo:in_ready -> m1_ddr2_memory_avl_agent:rf_source_ready
	wire          m1_ddr2_memory_avl_agent_rf_source_startofpacket;                                // m1_ddr2_memory_avl_agent:rf_source_startofpacket -> m1_ddr2_memory_avl_agent_rsp_fifo:in_startofpacket
	wire          m1_ddr2_memory_avl_agent_rf_source_endofpacket;                                  // m1_ddr2_memory_avl_agent:rf_source_endofpacket -> m1_ddr2_memory_avl_agent_rsp_fifo:in_endofpacket
	wire          m1_ddr2_memory_avl_agent_rsp_fifo_out_valid;                                     // m1_ddr2_memory_avl_agent_rsp_fifo:out_valid -> m1_ddr2_memory_avl_agent:rf_sink_valid
	wire  [369:0] m1_ddr2_memory_avl_agent_rsp_fifo_out_data;                                      // m1_ddr2_memory_avl_agent_rsp_fifo:out_data -> m1_ddr2_memory_avl_agent:rf_sink_data
	wire          m1_ddr2_memory_avl_agent_rsp_fifo_out_ready;                                     // m1_ddr2_memory_avl_agent:rf_sink_ready -> m1_ddr2_memory_avl_agent_rsp_fifo:out_ready
	wire          m1_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket;                             // m1_ddr2_memory_avl_agent_rsp_fifo:out_startofpacket -> m1_ddr2_memory_avl_agent:rf_sink_startofpacket
	wire          m1_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket;                               // m1_ddr2_memory_avl_agent_rsp_fifo:out_endofpacket -> m1_ddr2_memory_avl_agent:rf_sink_endofpacket
	wire          m1_ddr2_memory_avl_agent_rdata_fifo_src_valid;                                   // m1_ddr2_memory_avl_agent:rdata_fifo_src_valid -> m1_ddr2_memory_avl_agent_rdata_fifo:in_valid
	wire  [257:0] m1_ddr2_memory_avl_agent_rdata_fifo_src_data;                                    // m1_ddr2_memory_avl_agent:rdata_fifo_src_data -> m1_ddr2_memory_avl_agent_rdata_fifo:in_data
	wire          m1_ddr2_memory_avl_agent_rdata_fifo_src_ready;                                   // m1_ddr2_memory_avl_agent_rdata_fifo:in_ready -> m1_ddr2_memory_avl_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                               // cmd_mux:src_valid -> m1_ddr2_memory_avl_agent:cp_valid
	wire  [368:0] cmd_mux_src_data;                                                                // cmd_mux:src_data -> m1_ddr2_memory_avl_agent:cp_data
	wire          cmd_mux_src_ready;                                                               // m1_ddr2_memory_avl_agent:cp_ready -> cmd_mux:src_ready
	wire    [9:0] cmd_mux_src_channel;                                                             // cmd_mux:src_channel -> m1_ddr2_memory_avl_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                       // cmd_mux:src_startofpacket -> m1_ddr2_memory_avl_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                         // cmd_mux:src_endofpacket -> m1_ddr2_memory_avl_agent:cp_endofpacket
	wire          m1_clock_bridge_general_m0_agent_cp_valid;                                       // m1_clock_bridge_general_m0_agent:cp_valid -> router:sink_valid
	wire  [368:0] m1_clock_bridge_general_m0_agent_cp_data;                                        // m1_clock_bridge_general_m0_agent:cp_data -> router:sink_data
	wire          m1_clock_bridge_general_m0_agent_cp_ready;                                       // router:sink_ready -> m1_clock_bridge_general_m0_agent:cp_ready
	wire          m1_clock_bridge_general_m0_agent_cp_startofpacket;                               // m1_clock_bridge_general_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          m1_clock_bridge_general_m0_agent_cp_endofpacket;                                 // m1_clock_bridge_general_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                // router:src_valid -> cmd_demux:sink_valid
	wire  [368:0] router_src_data;                                                                 // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                // cmd_demux:sink_ready -> router:src_ready
	wire    [9:0] router_src_channel;                                                              // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                        // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                          // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          m1_clock_bridge_ch1_left_m0_agent_cp_valid;                                      // m1_clock_bridge_ch1_left_m0_agent:cp_valid -> router_001:sink_valid
	wire  [368:0] m1_clock_bridge_ch1_left_m0_agent_cp_data;                                       // m1_clock_bridge_ch1_left_m0_agent:cp_data -> router_001:sink_data
	wire          m1_clock_bridge_ch1_left_m0_agent_cp_ready;                                      // router_001:sink_ready -> m1_clock_bridge_ch1_left_m0_agent:cp_ready
	wire          m1_clock_bridge_ch1_left_m0_agent_cp_startofpacket;                              // m1_clock_bridge_ch1_left_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          m1_clock_bridge_ch1_left_m0_agent_cp_endofpacket;                                // m1_clock_bridge_ch1_left_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                            // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [368:0] router_001_src_data;                                                             // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                            // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [9:0] router_001_src_channel;                                                          // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                    // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                      // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          m1_clock_bridge_ch1_right_m0_agent_cp_valid;                                     // m1_clock_bridge_ch1_right_m0_agent:cp_valid -> router_002:sink_valid
	wire  [368:0] m1_clock_bridge_ch1_right_m0_agent_cp_data;                                      // m1_clock_bridge_ch1_right_m0_agent:cp_data -> router_002:sink_data
	wire          m1_clock_bridge_ch1_right_m0_agent_cp_ready;                                     // router_002:sink_ready -> m1_clock_bridge_ch1_right_m0_agent:cp_ready
	wire          m1_clock_bridge_ch1_right_m0_agent_cp_startofpacket;                             // m1_clock_bridge_ch1_right_m0_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          m1_clock_bridge_ch1_right_m0_agent_cp_endofpacket;                               // m1_clock_bridge_ch1_right_m0_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                            // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [368:0] router_002_src_data;                                                             // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                            // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [9:0] router_002_src_channel;                                                          // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                    // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                      // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          m1_clock_bridge_ch2_left_m0_agent_cp_valid;                                      // m1_clock_bridge_ch2_left_m0_agent:cp_valid -> router_003:sink_valid
	wire  [368:0] m1_clock_bridge_ch2_left_m0_agent_cp_data;                                       // m1_clock_bridge_ch2_left_m0_agent:cp_data -> router_003:sink_data
	wire          m1_clock_bridge_ch2_left_m0_agent_cp_ready;                                      // router_003:sink_ready -> m1_clock_bridge_ch2_left_m0_agent:cp_ready
	wire          m1_clock_bridge_ch2_left_m0_agent_cp_startofpacket;                              // m1_clock_bridge_ch2_left_m0_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          m1_clock_bridge_ch2_left_m0_agent_cp_endofpacket;                                // m1_clock_bridge_ch2_left_m0_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                            // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [368:0] router_003_src_data;                                                             // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                            // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [9:0] router_003_src_channel;                                                          // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                    // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                      // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          m1_clock_bridge_ch2_right_m0_agent_cp_valid;                                     // m1_clock_bridge_ch2_right_m0_agent:cp_valid -> router_004:sink_valid
	wire  [368:0] m1_clock_bridge_ch2_right_m0_agent_cp_data;                                      // m1_clock_bridge_ch2_right_m0_agent:cp_data -> router_004:sink_data
	wire          m1_clock_bridge_ch2_right_m0_agent_cp_ready;                                     // router_004:sink_ready -> m1_clock_bridge_ch2_right_m0_agent:cp_ready
	wire          m1_clock_bridge_ch2_right_m0_agent_cp_startofpacket;                             // m1_clock_bridge_ch2_right_m0_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          m1_clock_bridge_ch2_right_m0_agent_cp_endofpacket;                               // m1_clock_bridge_ch2_right_m0_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                            // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [368:0] router_004_src_data;                                                             // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                            // cmd_demux_004:sink_ready -> router_004:src_ready
	wire    [9:0] router_004_src_channel;                                                          // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                    // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                      // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          m1_clock_bridge_ch3_left_m0_agent_cp_valid;                                      // m1_clock_bridge_ch3_left_m0_agent:cp_valid -> router_005:sink_valid
	wire  [368:0] m1_clock_bridge_ch3_left_m0_agent_cp_data;                                       // m1_clock_bridge_ch3_left_m0_agent:cp_data -> router_005:sink_data
	wire          m1_clock_bridge_ch3_left_m0_agent_cp_ready;                                      // router_005:sink_ready -> m1_clock_bridge_ch3_left_m0_agent:cp_ready
	wire          m1_clock_bridge_ch3_left_m0_agent_cp_startofpacket;                              // m1_clock_bridge_ch3_left_m0_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          m1_clock_bridge_ch3_left_m0_agent_cp_endofpacket;                                // m1_clock_bridge_ch3_left_m0_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                            // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [368:0] router_005_src_data;                                                             // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                            // cmd_demux_005:sink_ready -> router_005:src_ready
	wire    [9:0] router_005_src_channel;                                                          // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                    // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                      // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          m1_clock_bridge_ch3_right_m0_agent_cp_valid;                                     // m1_clock_bridge_ch3_right_m0_agent:cp_valid -> router_006:sink_valid
	wire  [368:0] m1_clock_bridge_ch3_right_m0_agent_cp_data;                                      // m1_clock_bridge_ch3_right_m0_agent:cp_data -> router_006:sink_data
	wire          m1_clock_bridge_ch3_right_m0_agent_cp_ready;                                     // router_006:sink_ready -> m1_clock_bridge_ch3_right_m0_agent:cp_ready
	wire          m1_clock_bridge_ch3_right_m0_agent_cp_startofpacket;                             // m1_clock_bridge_ch3_right_m0_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          m1_clock_bridge_ch3_right_m0_agent_cp_endofpacket;                               // m1_clock_bridge_ch3_right_m0_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                            // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [368:0] router_006_src_data;                                                             // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                            // cmd_demux_006:sink_ready -> router_006:src_ready
	wire    [9:0] router_006_src_channel;                                                          // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                    // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                      // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          m1_clock_bridge_ch4_left_m0_agent_cp_valid;                                      // m1_clock_bridge_ch4_left_m0_agent:cp_valid -> router_007:sink_valid
	wire  [368:0] m1_clock_bridge_ch4_left_m0_agent_cp_data;                                       // m1_clock_bridge_ch4_left_m0_agent:cp_data -> router_007:sink_data
	wire          m1_clock_bridge_ch4_left_m0_agent_cp_ready;                                      // router_007:sink_ready -> m1_clock_bridge_ch4_left_m0_agent:cp_ready
	wire          m1_clock_bridge_ch4_left_m0_agent_cp_startofpacket;                              // m1_clock_bridge_ch4_left_m0_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          m1_clock_bridge_ch4_left_m0_agent_cp_endofpacket;                                // m1_clock_bridge_ch4_left_m0_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                            // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [368:0] router_007_src_data;                                                             // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                            // cmd_demux_007:sink_ready -> router_007:src_ready
	wire    [9:0] router_007_src_channel;                                                          // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                    // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                      // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          m1_clock_bridge_ch4_right_m0_agent_cp_valid;                                     // m1_clock_bridge_ch4_right_m0_agent:cp_valid -> router_008:sink_valid
	wire  [368:0] m1_clock_bridge_ch4_right_m0_agent_cp_data;                                      // m1_clock_bridge_ch4_right_m0_agent:cp_data -> router_008:sink_data
	wire          m1_clock_bridge_ch4_right_m0_agent_cp_ready;                                     // router_008:sink_ready -> m1_clock_bridge_ch4_right_m0_agent:cp_ready
	wire          m1_clock_bridge_ch4_right_m0_agent_cp_startofpacket;                             // m1_clock_bridge_ch4_right_m0_agent:cp_startofpacket -> router_008:sink_startofpacket
	wire          m1_clock_bridge_ch4_right_m0_agent_cp_endofpacket;                               // m1_clock_bridge_ch4_right_m0_agent:cp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                            // router_008:src_valid -> cmd_demux_008:sink_valid
	wire  [368:0] router_008_src_data;                                                             // router_008:src_data -> cmd_demux_008:sink_data
	wire          router_008_src_ready;                                                            // cmd_demux_008:sink_ready -> router_008:src_ready
	wire    [9:0] router_008_src_channel;                                                          // router_008:src_channel -> cmd_demux_008:sink_channel
	wire          router_008_src_startofpacket;                                                    // router_008:src_startofpacket -> cmd_demux_008:sink_startofpacket
	wire          router_008_src_endofpacket;                                                      // router_008:src_endofpacket -> cmd_demux_008:sink_endofpacket
	wire          m1_clock_bridge_ftdi_m0_agent_cp_valid;                                          // m1_clock_bridge_ftdi_m0_agent:cp_valid -> router_009:sink_valid
	wire  [368:0] m1_clock_bridge_ftdi_m0_agent_cp_data;                                           // m1_clock_bridge_ftdi_m0_agent:cp_data -> router_009:sink_data
	wire          m1_clock_bridge_ftdi_m0_agent_cp_ready;                                          // router_009:sink_ready -> m1_clock_bridge_ftdi_m0_agent:cp_ready
	wire          m1_clock_bridge_ftdi_m0_agent_cp_startofpacket;                                  // m1_clock_bridge_ftdi_m0_agent:cp_startofpacket -> router_009:sink_startofpacket
	wire          m1_clock_bridge_ftdi_m0_agent_cp_endofpacket;                                    // m1_clock_bridge_ftdi_m0_agent:cp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                            // router_009:src_valid -> cmd_demux_009:sink_valid
	wire  [368:0] router_009_src_data;                                                             // router_009:src_data -> cmd_demux_009:sink_data
	wire          router_009_src_ready;                                                            // cmd_demux_009:sink_ready -> router_009:src_ready
	wire    [9:0] router_009_src_channel;                                                          // router_009:src_channel -> cmd_demux_009:sink_channel
	wire          router_009_src_startofpacket;                                                    // router_009:src_startofpacket -> cmd_demux_009:sink_startofpacket
	wire          router_009_src_endofpacket;                                                      // router_009:src_endofpacket -> cmd_demux_009:sink_endofpacket
	wire          m1_ddr2_memory_avl_agent_rp_valid;                                               // m1_ddr2_memory_avl_agent:rp_valid -> router_010:sink_valid
	wire  [368:0] m1_ddr2_memory_avl_agent_rp_data;                                                // m1_ddr2_memory_avl_agent:rp_data -> router_010:sink_data
	wire          m1_ddr2_memory_avl_agent_rp_ready;                                               // router_010:sink_ready -> m1_ddr2_memory_avl_agent:rp_ready
	wire          m1_ddr2_memory_avl_agent_rp_startofpacket;                                       // m1_ddr2_memory_avl_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          m1_ddr2_memory_avl_agent_rp_endofpacket;                                         // m1_ddr2_memory_avl_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                            // router_010:src_valid -> rsp_demux:sink_valid
	wire  [368:0] router_010_src_data;                                                             // router_010:src_data -> rsp_demux:sink_data
	wire          router_010_src_ready;                                                            // rsp_demux:sink_ready -> router_010:src_ready
	wire    [9:0] router_010_src_channel;                                                          // router_010:src_channel -> rsp_demux:sink_channel
	wire          router_010_src_startofpacket;                                                    // router_010:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_010_src_endofpacket;                                                      // router_010:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                            // cmd_demux:src0_valid -> crosser:in_valid
	wire  [368:0] cmd_demux_src0_data;                                                             // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                            // crosser:in_ready -> cmd_demux:src0_ready
	wire    [9:0] cmd_demux_src0_channel;                                                          // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                    // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                      // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                               // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [368:0] crosser_out_data;                                                                // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                               // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [9:0] crosser_out_channel;                                                             // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                       // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                         // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                        // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [368:0] cmd_demux_001_src0_data;                                                         // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                                        // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire    [9:0] cmd_demux_001_src0_channel;                                                      // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                  // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                           // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire  [368:0] crosser_001_out_data;                                                            // crosser_001:out_data -> cmd_mux:sink1_data
	wire          crosser_001_out_ready;                                                           // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire    [9:0] crosser_001_out_channel;                                                         // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                                   // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                     // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                        // cmd_demux_002:src0_valid -> crosser_002:in_valid
	wire  [368:0] cmd_demux_002_src0_data;                                                         // cmd_demux_002:src0_data -> crosser_002:in_data
	wire          cmd_demux_002_src0_ready;                                                        // crosser_002:in_ready -> cmd_demux_002:src0_ready
	wire    [9:0] cmd_demux_002_src0_channel;                                                      // cmd_demux_002:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                // cmd_demux_002:src0_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                  // cmd_demux_002:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                           // crosser_002:out_valid -> cmd_mux:sink2_valid
	wire  [368:0] crosser_002_out_data;                                                            // crosser_002:out_data -> cmd_mux:sink2_data
	wire          crosser_002_out_ready;                                                           // cmd_mux:sink2_ready -> crosser_002:out_ready
	wire    [9:0] crosser_002_out_channel;                                                         // crosser_002:out_channel -> cmd_mux:sink2_channel
	wire          crosser_002_out_startofpacket;                                                   // crosser_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_002_out_endofpacket;                                                     // crosser_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                        // cmd_demux_003:src0_valid -> crosser_003:in_valid
	wire  [368:0] cmd_demux_003_src0_data;                                                         // cmd_demux_003:src0_data -> crosser_003:in_data
	wire          cmd_demux_003_src0_ready;                                                        // crosser_003:in_ready -> cmd_demux_003:src0_ready
	wire    [9:0] cmd_demux_003_src0_channel;                                                      // cmd_demux_003:src0_channel -> crosser_003:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                                // cmd_demux_003:src0_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                  // cmd_demux_003:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                           // crosser_003:out_valid -> cmd_mux:sink3_valid
	wire  [368:0] crosser_003_out_data;                                                            // crosser_003:out_data -> cmd_mux:sink3_data
	wire          crosser_003_out_ready;                                                           // cmd_mux:sink3_ready -> crosser_003:out_ready
	wire    [9:0] crosser_003_out_channel;                                                         // crosser_003:out_channel -> cmd_mux:sink3_channel
	wire          crosser_003_out_startofpacket;                                                   // crosser_003:out_startofpacket -> cmd_mux:sink3_startofpacket
	wire          crosser_003_out_endofpacket;                                                     // crosser_003:out_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_004_src0_valid;                                                        // cmd_demux_004:src0_valid -> crosser_004:in_valid
	wire  [368:0] cmd_demux_004_src0_data;                                                         // cmd_demux_004:src0_data -> crosser_004:in_data
	wire          cmd_demux_004_src0_ready;                                                        // crosser_004:in_ready -> cmd_demux_004:src0_ready
	wire    [9:0] cmd_demux_004_src0_channel;                                                      // cmd_demux_004:src0_channel -> crosser_004:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                                // cmd_demux_004:src0_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                  // cmd_demux_004:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                           // crosser_004:out_valid -> cmd_mux:sink4_valid
	wire  [368:0] crosser_004_out_data;                                                            // crosser_004:out_data -> cmd_mux:sink4_data
	wire          crosser_004_out_ready;                                                           // cmd_mux:sink4_ready -> crosser_004:out_ready
	wire    [9:0] crosser_004_out_channel;                                                         // crosser_004:out_channel -> cmd_mux:sink4_channel
	wire          crosser_004_out_startofpacket;                                                   // crosser_004:out_startofpacket -> cmd_mux:sink4_startofpacket
	wire          crosser_004_out_endofpacket;                                                     // crosser_004:out_endofpacket -> cmd_mux:sink4_endofpacket
	wire          cmd_demux_005_src0_valid;                                                        // cmd_demux_005:src0_valid -> crosser_005:in_valid
	wire  [368:0] cmd_demux_005_src0_data;                                                         // cmd_demux_005:src0_data -> crosser_005:in_data
	wire          cmd_demux_005_src0_ready;                                                        // crosser_005:in_ready -> cmd_demux_005:src0_ready
	wire    [9:0] cmd_demux_005_src0_channel;                                                      // cmd_demux_005:src0_channel -> crosser_005:in_channel
	wire          cmd_demux_005_src0_startofpacket;                                                // cmd_demux_005:src0_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                  // cmd_demux_005:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                           // crosser_005:out_valid -> cmd_mux:sink5_valid
	wire  [368:0] crosser_005_out_data;                                                            // crosser_005:out_data -> cmd_mux:sink5_data
	wire          crosser_005_out_ready;                                                           // cmd_mux:sink5_ready -> crosser_005:out_ready
	wire    [9:0] crosser_005_out_channel;                                                         // crosser_005:out_channel -> cmd_mux:sink5_channel
	wire          crosser_005_out_startofpacket;                                                   // crosser_005:out_startofpacket -> cmd_mux:sink5_startofpacket
	wire          crosser_005_out_endofpacket;                                                     // crosser_005:out_endofpacket -> cmd_mux:sink5_endofpacket
	wire          cmd_demux_006_src0_valid;                                                        // cmd_demux_006:src0_valid -> crosser_006:in_valid
	wire  [368:0] cmd_demux_006_src0_data;                                                         // cmd_demux_006:src0_data -> crosser_006:in_data
	wire          cmd_demux_006_src0_ready;                                                        // crosser_006:in_ready -> cmd_demux_006:src0_ready
	wire    [9:0] cmd_demux_006_src0_channel;                                                      // cmd_demux_006:src0_channel -> crosser_006:in_channel
	wire          cmd_demux_006_src0_startofpacket;                                                // cmd_demux_006:src0_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                  // cmd_demux_006:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                           // crosser_006:out_valid -> cmd_mux:sink6_valid
	wire  [368:0] crosser_006_out_data;                                                            // crosser_006:out_data -> cmd_mux:sink6_data
	wire          crosser_006_out_ready;                                                           // cmd_mux:sink6_ready -> crosser_006:out_ready
	wire    [9:0] crosser_006_out_channel;                                                         // crosser_006:out_channel -> cmd_mux:sink6_channel
	wire          crosser_006_out_startofpacket;                                                   // crosser_006:out_startofpacket -> cmd_mux:sink6_startofpacket
	wire          crosser_006_out_endofpacket;                                                     // crosser_006:out_endofpacket -> cmd_mux:sink6_endofpacket
	wire          cmd_demux_007_src0_valid;                                                        // cmd_demux_007:src0_valid -> crosser_007:in_valid
	wire  [368:0] cmd_demux_007_src0_data;                                                         // cmd_demux_007:src0_data -> crosser_007:in_data
	wire          cmd_demux_007_src0_ready;                                                        // crosser_007:in_ready -> cmd_demux_007:src0_ready
	wire    [9:0] cmd_demux_007_src0_channel;                                                      // cmd_demux_007:src0_channel -> crosser_007:in_channel
	wire          cmd_demux_007_src0_startofpacket;                                                // cmd_demux_007:src0_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                  // cmd_demux_007:src0_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                           // crosser_007:out_valid -> cmd_mux:sink7_valid
	wire  [368:0] crosser_007_out_data;                                                            // crosser_007:out_data -> cmd_mux:sink7_data
	wire          crosser_007_out_ready;                                                           // cmd_mux:sink7_ready -> crosser_007:out_ready
	wire    [9:0] crosser_007_out_channel;                                                         // crosser_007:out_channel -> cmd_mux:sink7_channel
	wire          crosser_007_out_startofpacket;                                                   // crosser_007:out_startofpacket -> cmd_mux:sink7_startofpacket
	wire          crosser_007_out_endofpacket;                                                     // crosser_007:out_endofpacket -> cmd_mux:sink7_endofpacket
	wire          cmd_demux_008_src0_valid;                                                        // cmd_demux_008:src0_valid -> crosser_008:in_valid
	wire  [368:0] cmd_demux_008_src0_data;                                                         // cmd_demux_008:src0_data -> crosser_008:in_data
	wire          cmd_demux_008_src0_ready;                                                        // crosser_008:in_ready -> cmd_demux_008:src0_ready
	wire    [9:0] cmd_demux_008_src0_channel;                                                      // cmd_demux_008:src0_channel -> crosser_008:in_channel
	wire          cmd_demux_008_src0_startofpacket;                                                // cmd_demux_008:src0_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_008_src0_endofpacket;                                                  // cmd_demux_008:src0_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                           // crosser_008:out_valid -> cmd_mux:sink8_valid
	wire  [368:0] crosser_008_out_data;                                                            // crosser_008:out_data -> cmd_mux:sink8_data
	wire          crosser_008_out_ready;                                                           // cmd_mux:sink8_ready -> crosser_008:out_ready
	wire    [9:0] crosser_008_out_channel;                                                         // crosser_008:out_channel -> cmd_mux:sink8_channel
	wire          crosser_008_out_startofpacket;                                                   // crosser_008:out_startofpacket -> cmd_mux:sink8_startofpacket
	wire          crosser_008_out_endofpacket;                                                     // crosser_008:out_endofpacket -> cmd_mux:sink8_endofpacket
	wire          cmd_demux_009_src0_valid;                                                        // cmd_demux_009:src0_valid -> crosser_009:in_valid
	wire  [368:0] cmd_demux_009_src0_data;                                                         // cmd_demux_009:src0_data -> crosser_009:in_data
	wire          cmd_demux_009_src0_ready;                                                        // crosser_009:in_ready -> cmd_demux_009:src0_ready
	wire    [9:0] cmd_demux_009_src0_channel;                                                      // cmd_demux_009:src0_channel -> crosser_009:in_channel
	wire          cmd_demux_009_src0_startofpacket;                                                // cmd_demux_009:src0_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_009_src0_endofpacket;                                                  // cmd_demux_009:src0_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                           // crosser_009:out_valid -> cmd_mux:sink9_valid
	wire  [368:0] crosser_009_out_data;                                                            // crosser_009:out_data -> cmd_mux:sink9_data
	wire          crosser_009_out_ready;                                                           // cmd_mux:sink9_ready -> crosser_009:out_ready
	wire    [9:0] crosser_009_out_channel;                                                         // crosser_009:out_channel -> cmd_mux:sink9_channel
	wire          crosser_009_out_startofpacket;                                                   // crosser_009:out_startofpacket -> cmd_mux:sink9_startofpacket
	wire          crosser_009_out_endofpacket;                                                     // crosser_009:out_endofpacket -> cmd_mux:sink9_endofpacket
	wire          rsp_demux_src0_valid;                                                            // rsp_demux:src0_valid -> crosser_010:in_valid
	wire  [368:0] rsp_demux_src0_data;                                                             // rsp_demux:src0_data -> crosser_010:in_data
	wire          rsp_demux_src0_ready;                                                            // crosser_010:in_ready -> rsp_demux:src0_ready
	wire    [9:0] rsp_demux_src0_channel;                                                          // rsp_demux:src0_channel -> crosser_010:in_channel
	wire          rsp_demux_src0_startofpacket;                                                    // rsp_demux:src0_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                      // rsp_demux:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                           // crosser_010:out_valid -> rsp_mux:sink0_valid
	wire  [368:0] crosser_010_out_data;                                                            // crosser_010:out_data -> rsp_mux:sink0_data
	wire          crosser_010_out_ready;                                                           // rsp_mux:sink0_ready -> crosser_010:out_ready
	wire    [9:0] crosser_010_out_channel;                                                         // crosser_010:out_channel -> rsp_mux:sink0_channel
	wire          crosser_010_out_startofpacket;                                                   // crosser_010:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_010_out_endofpacket;                                                     // crosser_010:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                            // rsp_demux:src1_valid -> crosser_011:in_valid
	wire  [368:0] rsp_demux_src1_data;                                                             // rsp_demux:src1_data -> crosser_011:in_data
	wire          rsp_demux_src1_ready;                                                            // crosser_011:in_ready -> rsp_demux:src1_ready
	wire    [9:0] rsp_demux_src1_channel;                                                          // rsp_demux:src1_channel -> crosser_011:in_channel
	wire          rsp_demux_src1_startofpacket;                                                    // rsp_demux:src1_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                      // rsp_demux:src1_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                           // crosser_011:out_valid -> rsp_mux_001:sink0_valid
	wire  [368:0] crosser_011_out_data;                                                            // crosser_011:out_data -> rsp_mux_001:sink0_data
	wire          crosser_011_out_ready;                                                           // rsp_mux_001:sink0_ready -> crosser_011:out_ready
	wire    [9:0] crosser_011_out_channel;                                                         // crosser_011:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_011_out_startofpacket;                                                   // crosser_011:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_011_out_endofpacket;                                                     // crosser_011:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                            // rsp_demux:src2_valid -> crosser_012:in_valid
	wire  [368:0] rsp_demux_src2_data;                                                             // rsp_demux:src2_data -> crosser_012:in_data
	wire          rsp_demux_src2_ready;                                                            // crosser_012:in_ready -> rsp_demux:src2_ready
	wire    [9:0] rsp_demux_src2_channel;                                                          // rsp_demux:src2_channel -> crosser_012:in_channel
	wire          rsp_demux_src2_startofpacket;                                                    // rsp_demux:src2_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                      // rsp_demux:src2_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                           // crosser_012:out_valid -> rsp_mux_002:sink0_valid
	wire  [368:0] crosser_012_out_data;                                                            // crosser_012:out_data -> rsp_mux_002:sink0_data
	wire          crosser_012_out_ready;                                                           // rsp_mux_002:sink0_ready -> crosser_012:out_ready
	wire    [9:0] crosser_012_out_channel;                                                         // crosser_012:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_012_out_startofpacket;                                                   // crosser_012:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_012_out_endofpacket;                                                     // crosser_012:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                            // rsp_demux:src3_valid -> crosser_013:in_valid
	wire  [368:0] rsp_demux_src3_data;                                                             // rsp_demux:src3_data -> crosser_013:in_data
	wire          rsp_demux_src3_ready;                                                            // crosser_013:in_ready -> rsp_demux:src3_ready
	wire    [9:0] rsp_demux_src3_channel;                                                          // rsp_demux:src3_channel -> crosser_013:in_channel
	wire          rsp_demux_src3_startofpacket;                                                    // rsp_demux:src3_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                      // rsp_demux:src3_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                           // crosser_013:out_valid -> rsp_mux_003:sink0_valid
	wire  [368:0] crosser_013_out_data;                                                            // crosser_013:out_data -> rsp_mux_003:sink0_data
	wire          crosser_013_out_ready;                                                           // rsp_mux_003:sink0_ready -> crosser_013:out_ready
	wire    [9:0] crosser_013_out_channel;                                                         // crosser_013:out_channel -> rsp_mux_003:sink0_channel
	wire          crosser_013_out_startofpacket;                                                   // crosser_013:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                                     // crosser_013:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src4_valid;                                                            // rsp_demux:src4_valid -> crosser_014:in_valid
	wire  [368:0] rsp_demux_src4_data;                                                             // rsp_demux:src4_data -> crosser_014:in_data
	wire          rsp_demux_src4_ready;                                                            // crosser_014:in_ready -> rsp_demux:src4_ready
	wire    [9:0] rsp_demux_src4_channel;                                                          // rsp_demux:src4_channel -> crosser_014:in_channel
	wire          rsp_demux_src4_startofpacket;                                                    // rsp_demux:src4_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_src4_endofpacket;                                                      // rsp_demux:src4_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                           // crosser_014:out_valid -> rsp_mux_004:sink0_valid
	wire  [368:0] crosser_014_out_data;                                                            // crosser_014:out_data -> rsp_mux_004:sink0_data
	wire          crosser_014_out_ready;                                                           // rsp_mux_004:sink0_ready -> crosser_014:out_ready
	wire    [9:0] crosser_014_out_channel;                                                         // crosser_014:out_channel -> rsp_mux_004:sink0_channel
	wire          crosser_014_out_startofpacket;                                                   // crosser_014:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          crosser_014_out_endofpacket;                                                     // crosser_014:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_src5_valid;                                                            // rsp_demux:src5_valid -> crosser_015:in_valid
	wire  [368:0] rsp_demux_src5_data;                                                             // rsp_demux:src5_data -> crosser_015:in_data
	wire          rsp_demux_src5_ready;                                                            // crosser_015:in_ready -> rsp_demux:src5_ready
	wire    [9:0] rsp_demux_src5_channel;                                                          // rsp_demux:src5_channel -> crosser_015:in_channel
	wire          rsp_demux_src5_startofpacket;                                                    // rsp_demux:src5_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_src5_endofpacket;                                                      // rsp_demux:src5_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                           // crosser_015:out_valid -> rsp_mux_005:sink0_valid
	wire  [368:0] crosser_015_out_data;                                                            // crosser_015:out_data -> rsp_mux_005:sink0_data
	wire          crosser_015_out_ready;                                                           // rsp_mux_005:sink0_ready -> crosser_015:out_ready
	wire    [9:0] crosser_015_out_channel;                                                         // crosser_015:out_channel -> rsp_mux_005:sink0_channel
	wire          crosser_015_out_startofpacket;                                                   // crosser_015:out_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          crosser_015_out_endofpacket;                                                     // crosser_015:out_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_src6_valid;                                                            // rsp_demux:src6_valid -> crosser_016:in_valid
	wire  [368:0] rsp_demux_src6_data;                                                             // rsp_demux:src6_data -> crosser_016:in_data
	wire          rsp_demux_src6_ready;                                                            // crosser_016:in_ready -> rsp_demux:src6_ready
	wire    [9:0] rsp_demux_src6_channel;                                                          // rsp_demux:src6_channel -> crosser_016:in_channel
	wire          rsp_demux_src6_startofpacket;                                                    // rsp_demux:src6_startofpacket -> crosser_016:in_startofpacket
	wire          rsp_demux_src6_endofpacket;                                                      // rsp_demux:src6_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                           // crosser_016:out_valid -> rsp_mux_006:sink0_valid
	wire  [368:0] crosser_016_out_data;                                                            // crosser_016:out_data -> rsp_mux_006:sink0_data
	wire          crosser_016_out_ready;                                                           // rsp_mux_006:sink0_ready -> crosser_016:out_ready
	wire    [9:0] crosser_016_out_channel;                                                         // crosser_016:out_channel -> rsp_mux_006:sink0_channel
	wire          crosser_016_out_startofpacket;                                                   // crosser_016:out_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          crosser_016_out_endofpacket;                                                     // crosser_016:out_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_src7_valid;                                                            // rsp_demux:src7_valid -> crosser_017:in_valid
	wire  [368:0] rsp_demux_src7_data;                                                             // rsp_demux:src7_data -> crosser_017:in_data
	wire          rsp_demux_src7_ready;                                                            // crosser_017:in_ready -> rsp_demux:src7_ready
	wire    [9:0] rsp_demux_src7_channel;                                                          // rsp_demux:src7_channel -> crosser_017:in_channel
	wire          rsp_demux_src7_startofpacket;                                                    // rsp_demux:src7_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_src7_endofpacket;                                                      // rsp_demux:src7_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                           // crosser_017:out_valid -> rsp_mux_007:sink0_valid
	wire  [368:0] crosser_017_out_data;                                                            // crosser_017:out_data -> rsp_mux_007:sink0_data
	wire          crosser_017_out_ready;                                                           // rsp_mux_007:sink0_ready -> crosser_017:out_ready
	wire    [9:0] crosser_017_out_channel;                                                         // crosser_017:out_channel -> rsp_mux_007:sink0_channel
	wire          crosser_017_out_startofpacket;                                                   // crosser_017:out_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          crosser_017_out_endofpacket;                                                     // crosser_017:out_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_src8_valid;                                                            // rsp_demux:src8_valid -> crosser_018:in_valid
	wire  [368:0] rsp_demux_src8_data;                                                             // rsp_demux:src8_data -> crosser_018:in_data
	wire          rsp_demux_src8_ready;                                                            // crosser_018:in_ready -> rsp_demux:src8_ready
	wire    [9:0] rsp_demux_src8_channel;                                                          // rsp_demux:src8_channel -> crosser_018:in_channel
	wire          rsp_demux_src8_startofpacket;                                                    // rsp_demux:src8_startofpacket -> crosser_018:in_startofpacket
	wire          rsp_demux_src8_endofpacket;                                                      // rsp_demux:src8_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                           // crosser_018:out_valid -> rsp_mux_008:sink0_valid
	wire  [368:0] crosser_018_out_data;                                                            // crosser_018:out_data -> rsp_mux_008:sink0_data
	wire          crosser_018_out_ready;                                                           // rsp_mux_008:sink0_ready -> crosser_018:out_ready
	wire    [9:0] crosser_018_out_channel;                                                         // crosser_018:out_channel -> rsp_mux_008:sink0_channel
	wire          crosser_018_out_startofpacket;                                                   // crosser_018:out_startofpacket -> rsp_mux_008:sink0_startofpacket
	wire          crosser_018_out_endofpacket;                                                     // crosser_018:out_endofpacket -> rsp_mux_008:sink0_endofpacket
	wire          rsp_demux_src9_valid;                                                            // rsp_demux:src9_valid -> crosser_019:in_valid
	wire  [368:0] rsp_demux_src9_data;                                                             // rsp_demux:src9_data -> crosser_019:in_data
	wire          rsp_demux_src9_ready;                                                            // crosser_019:in_ready -> rsp_demux:src9_ready
	wire    [9:0] rsp_demux_src9_channel;                                                          // rsp_demux:src9_channel -> crosser_019:in_channel
	wire          rsp_demux_src9_startofpacket;                                                    // rsp_demux:src9_startofpacket -> crosser_019:in_startofpacket
	wire          rsp_demux_src9_endofpacket;                                                      // rsp_demux:src9_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                           // crosser_019:out_valid -> rsp_mux_009:sink0_valid
	wire  [368:0] crosser_019_out_data;                                                            // crosser_019:out_data -> rsp_mux_009:sink0_data
	wire          crosser_019_out_ready;                                                           // rsp_mux_009:sink0_ready -> crosser_019:out_ready
	wire    [9:0] crosser_019_out_channel;                                                         // crosser_019:out_channel -> rsp_mux_009:sink0_channel
	wire          crosser_019_out_startofpacket;                                                   // crosser_019:out_startofpacket -> rsp_mux_009:sink0_startofpacket
	wire          crosser_019_out_endofpacket;                                                     // crosser_019:out_endofpacket -> rsp_mux_009:sink0_endofpacket
	wire          m1_ddr2_memory_avl_agent_rdata_fifo_out_valid;                                   // m1_ddr2_memory_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] m1_ddr2_memory_avl_agent_rdata_fifo_out_data;                                    // m1_ddr2_memory_avl_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          m1_ddr2_memory_avl_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter:in_0_ready -> m1_ddr2_memory_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                   // avalon_st_adapter:out_0_valid -> m1_ddr2_memory_avl_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                                    // avalon_st_adapter:out_0_data -> m1_ddr2_memory_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                   // m1_ddr2_memory_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                   // avalon_st_adapter:out_0_error -> m1_ddr2_memory_avl_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_general_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                               //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_general_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_general_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_general_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_general_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_general_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_general_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_general_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_general_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_general_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_general_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_ch1_left_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                                //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_ch1_left_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_ch1_left_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_ch1_left_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_ch1_left_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_ch1_left_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_ch1_left_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_ch1_left_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_ch1_left_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_ch1_left_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_ch1_left_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_ch1_right_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                                 //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_ch1_right_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_ch1_right_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_ch1_right_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_ch1_right_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_ch1_right_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_ch1_right_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_ch1_right_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_ch1_right_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_ch1_right_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_ch1_right_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_ch2_left_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                                //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_ch2_left_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_ch2_left_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_ch2_left_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_ch2_left_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_ch2_left_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_ch2_left_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_ch2_left_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_ch2_left_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_ch2_left_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_ch2_left_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_ch2_right_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                                 //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_ch2_right_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_ch2_right_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_ch2_right_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_ch2_right_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_ch2_right_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_ch2_right_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_ch2_right_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_ch2_right_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_ch2_right_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_ch2_right_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_ch3_left_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                                //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_ch3_left_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_ch3_left_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_ch3_left_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_ch3_left_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_ch3_left_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_ch3_left_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_ch3_left_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_ch3_left_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_ch3_left_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_ch3_left_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_ch3_right_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                                 //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_ch3_right_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_ch3_right_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_ch3_right_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_ch3_right_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_ch3_right_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_ch3_right_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_ch3_right_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_ch3_right_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_ch3_right_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_ch3_right_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_ch4_left_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                                //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_ch4_left_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_ch4_left_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_ch4_left_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_ch4_left_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_ch4_left_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_ch4_left_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_ch4_left_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_ch4_left_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_ch4_left_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_ch4_left_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_ch4_right_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                                 //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_ch4_right_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_ch4_right_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_ch4_right_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_ch4_right_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_ch4_right_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_ch4_right_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_ch4_right_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_ch4_right_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_ch4_right_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_ch4_right_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_ftdi_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                            //                       clk.clk
		.reset                  (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),               //                     reset.reset
		.uav_address            (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_ftdi_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_ftdi_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_ftdi_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_ftdi_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_ftdi_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_ftdi_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_ftdi_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_ftdi_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_ftdi_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_ftdi_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_ddr2_memory_avl_translator (
		.clk                    (m1_ddr2_memory_afi_clk_clk),                                      //                      clk.clk
		.reset                  (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_ddr2_memory_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (m1_ddr2_memory_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (m1_ddr2_memory_avl_agent_m0_read),                                //                         .read
		.uav_write              (m1_ddr2_memory_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (m1_ddr2_memory_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (m1_ddr2_memory_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (m1_ddr2_memory_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (m1_ddr2_memory_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (m1_ddr2_memory_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (m1_ddr2_memory_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (m1_ddr2_memory_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (m1_ddr2_memory_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (m1_ddr2_memory_avl_write),                                        //                         .write
		.av_read                (m1_ddr2_memory_avl_read),                                         //                         .read
		.av_readdata            (m1_ddr2_memory_avl_readdata),                                     //                         .readdata
		.av_writedata           (m1_ddr2_memory_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (m1_ddr2_memory_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (m1_ddr2_memory_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (m1_ddr2_memory_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (m1_ddr2_memory_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (m1_ddr2_memory_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (9),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_general_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                               //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_general_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_general_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_general_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_general_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_general_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_general_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                             //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                              //          .data
		.rp_channel            (rsp_mux_src_channel),                                                           //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                       //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                             //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_ch1_left_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                                //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_ch1_left_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_ch1_left_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_ch1_left_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_ch1_left_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_ch1_left_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_ch1_left_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                          //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                           //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                        //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                    //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                          //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_ch1_right_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                                 //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_ch1_right_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_ch1_right_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_ch1_right_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_ch1_right_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_ch1_right_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_ch1_right_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                           //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_ch2_left_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                                //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_ch2_left_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_ch2_left_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_ch2_left_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_ch2_left_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_ch2_left_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_ch2_left_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                          //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                           //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                        //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                    //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                          //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_ch2_right_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                                 //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_ch2_right_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_ch2_right_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_ch2_right_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_ch2_right_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_ch2_right_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_ch2_right_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                           //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_ch3_left_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                                //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_ch3_left_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_ch3_left_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_ch3_left_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_ch3_left_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_ch3_left_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_ch3_left_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                          //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                           //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                        //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                    //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                          //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_ch3_right_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                                 //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_ch3_right_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_ch3_right_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_ch3_right_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_ch3_right_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_ch3_right_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_ch3_right_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                           //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_ch4_left_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                                //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_ch4_left_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_ch4_left_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_ch4_left_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_ch4_left_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_ch4_left_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_ch4_left_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                          //        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                           //          .data
		.rp_channel            (rsp_mux_007_src_channel),                                                        //          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                                    //          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready),                                                          //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_ch4_right_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                                 //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_ch4_right_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_ch4_right_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_ch4_right_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_ch4_right_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_ch4_right_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_ch4_right_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_008_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_008_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_008_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_008_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_008_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_008_src_ready),                                                           //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_QOS_H                 (347),
		.PKT_QOS_L                 (347),
		.PKT_DATA_SIDEBAND_H       (345),
		.PKT_DATA_SIDEBAND_L       (345),
		.PKT_ADDR_SIDEBAND_H       (344),
		.PKT_ADDR_SIDEBAND_L       (344),
		.PKT_BURST_TYPE_H          (343),
		.PKT_BURST_TYPE_L          (342),
		.PKT_CACHE_H               (363),
		.PKT_CACHE_L               (360),
		.PKT_THREAD_ID_H           (356),
		.PKT_THREAD_ID_L           (356),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_EXCLUSIVE       (324),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.ST_DATA_W                 (369),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (8),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_ftdi_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                            //       clk.clk
		.reset                 (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.av_address            (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_ftdi_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_ftdi_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_ftdi_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_ftdi_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_ftdi_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_ftdi_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_009_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_009_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_009_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_009_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_009_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_009_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (368),
		.PKT_ORI_BURST_SIZE_L      (366),
		.PKT_RESPONSE_STATUS_H     (365),
		.PKT_RESPONSE_STATUS_L     (364),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (359),
		.PKT_PROTECTION_L          (357),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (351),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (355),
		.PKT_DEST_ID_L             (352),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (369),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_ddr2_memory_avl_agent (
		.clk                     (m1_ddr2_memory_afi_clk_clk),                                      //             clk.clk
		.reset                   (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (m1_ddr2_memory_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (m1_ddr2_memory_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (m1_ddr2_memory_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (m1_ddr2_memory_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (m1_ddr2_memory_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (m1_ddr2_memory_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (m1_ddr2_memory_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (m1_ddr2_memory_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (m1_ddr2_memory_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (m1_ddr2_memory_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (m1_ddr2_memory_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (m1_ddr2_memory_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (m1_ddr2_memory_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (m1_ddr2_memory_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (m1_ddr2_memory_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (m1_ddr2_memory_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                             //                .channel
		.rf_sink_ready           (m1_ddr2_memory_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (m1_ddr2_memory_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (m1_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (m1_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (m1_ddr2_memory_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (m1_ddr2_memory_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (m1_ddr2_memory_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (m1_ddr2_memory_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (m1_ddr2_memory_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (m1_ddr2_memory_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (m1_ddr2_memory_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_ddr2_memory_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (m1_ddr2_memory_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (370),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_ddr2_memory_avl_agent_rsp_fifo (
		.clk               (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_ddr2_memory_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (m1_ddr2_memory_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (m1_ddr2_memory_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (m1_ddr2_memory_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (m1_ddr2_memory_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (m1_ddr2_memory_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (m1_ddr2_memory_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (m1_ddr2_memory_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (m1_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (m1_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_ddr2_memory_avl_agent_rdata_fifo (
		.clk               (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_ddr2_memory_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (m1_ddr2_memory_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (m1_ddr2_memory_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (m1_ddr2_memory_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (m1_ddr2_memory_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (m1_ddr2_memory_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_3_router router (
		.sink_ready         (m1_clock_bridge_general_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (m1_clock_bridge_general_m0_agent_cp_valid),                    //          .valid
		.sink_data          (m1_clock_bridge_general_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (m1_clock_bridge_general_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_general_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                             //       src.ready
		.src_valid          (router_src_valid),                                             //          .valid
		.src_data           (router_src_data),                                              //          .data
		.src_channel        (router_src_channel),                                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router router_001 (
		.sink_ready         (m1_clock_bridge_ch1_left_m0_agent_cp_ready),                   //      sink.ready
		.sink_valid         (m1_clock_bridge_ch1_left_m0_agent_cp_valid),                   //          .valid
		.sink_data          (m1_clock_bridge_ch1_left_m0_agent_cp_data),                    //          .data
		.sink_startofpacket (m1_clock_bridge_ch1_left_m0_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ch1_left_m0_agent_cp_endofpacket),             //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                         //       src.ready
		.src_valid          (router_001_src_valid),                                         //          .valid
		.src_data           (router_001_src_data),                                          //          .data
		.src_channel        (router_001_src_channel),                                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router router_002 (
		.sink_ready         (m1_clock_bridge_ch1_right_m0_agent_cp_ready),                  //      sink.ready
		.sink_valid         (m1_clock_bridge_ch1_right_m0_agent_cp_valid),                  //          .valid
		.sink_data          (m1_clock_bridge_ch1_right_m0_agent_cp_data),                   //          .data
		.sink_startofpacket (m1_clock_bridge_ch1_right_m0_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ch1_right_m0_agent_cp_endofpacket),            //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                         //       src.ready
		.src_valid          (router_002_src_valid),                                         //          .valid
		.src_data           (router_002_src_data),                                          //          .data
		.src_channel        (router_002_src_channel),                                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router router_003 (
		.sink_ready         (m1_clock_bridge_ch2_left_m0_agent_cp_ready),                   //      sink.ready
		.sink_valid         (m1_clock_bridge_ch2_left_m0_agent_cp_valid),                   //          .valid
		.sink_data          (m1_clock_bridge_ch2_left_m0_agent_cp_data),                    //          .data
		.sink_startofpacket (m1_clock_bridge_ch2_left_m0_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ch2_left_m0_agent_cp_endofpacket),             //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                         //       src.ready
		.src_valid          (router_003_src_valid),                                         //          .valid
		.src_data           (router_003_src_data),                                          //          .data
		.src_channel        (router_003_src_channel),                                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router router_004 (
		.sink_ready         (m1_clock_bridge_ch2_right_m0_agent_cp_ready),                  //      sink.ready
		.sink_valid         (m1_clock_bridge_ch2_right_m0_agent_cp_valid),                  //          .valid
		.sink_data          (m1_clock_bridge_ch2_right_m0_agent_cp_data),                   //          .data
		.sink_startofpacket (m1_clock_bridge_ch2_right_m0_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ch2_right_m0_agent_cp_endofpacket),            //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                         //       src.ready
		.src_valid          (router_004_src_valid),                                         //          .valid
		.src_data           (router_004_src_data),                                          //          .data
		.src_channel        (router_004_src_channel),                                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router router_005 (
		.sink_ready         (m1_clock_bridge_ch3_left_m0_agent_cp_ready),                   //      sink.ready
		.sink_valid         (m1_clock_bridge_ch3_left_m0_agent_cp_valid),                   //          .valid
		.sink_data          (m1_clock_bridge_ch3_left_m0_agent_cp_data),                    //          .data
		.sink_startofpacket (m1_clock_bridge_ch3_left_m0_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ch3_left_m0_agent_cp_endofpacket),             //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                         //       src.ready
		.src_valid          (router_005_src_valid),                                         //          .valid
		.src_data           (router_005_src_data),                                          //          .data
		.src_channel        (router_005_src_channel),                                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router router_006 (
		.sink_ready         (m1_clock_bridge_ch3_right_m0_agent_cp_ready),                  //      sink.ready
		.sink_valid         (m1_clock_bridge_ch3_right_m0_agent_cp_valid),                  //          .valid
		.sink_data          (m1_clock_bridge_ch3_right_m0_agent_cp_data),                   //          .data
		.sink_startofpacket (m1_clock_bridge_ch3_right_m0_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ch3_right_m0_agent_cp_endofpacket),            //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                         //       src.ready
		.src_valid          (router_006_src_valid),                                         //          .valid
		.src_data           (router_006_src_data),                                          //          .data
		.src_channel        (router_006_src_channel),                                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router router_007 (
		.sink_ready         (m1_clock_bridge_ch4_left_m0_agent_cp_ready),                   //      sink.ready
		.sink_valid         (m1_clock_bridge_ch4_left_m0_agent_cp_valid),                   //          .valid
		.sink_data          (m1_clock_bridge_ch4_left_m0_agent_cp_data),                    //          .data
		.sink_startofpacket (m1_clock_bridge_ch4_left_m0_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ch4_left_m0_agent_cp_endofpacket),             //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                         //       src.ready
		.src_valid          (router_007_src_valid),                                         //          .valid
		.src_data           (router_007_src_data),                                          //          .data
		.src_channel        (router_007_src_channel),                                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router router_008 (
		.sink_ready         (m1_clock_bridge_ch4_right_m0_agent_cp_ready),                  //      sink.ready
		.sink_valid         (m1_clock_bridge_ch4_right_m0_agent_cp_valid),                  //          .valid
		.sink_data          (m1_clock_bridge_ch4_right_m0_agent_cp_data),                   //          .data
		.sink_startofpacket (m1_clock_bridge_ch4_right_m0_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ch4_right_m0_agent_cp_endofpacket),            //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                         //       src.ready
		.src_valid          (router_008_src_valid),                                         //          .valid
		.src_data           (router_008_src_data),                                          //          .data
		.src_channel        (router_008_src_channel),                                       //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router router_009 (
		.sink_ready         (m1_clock_bridge_ftdi_m0_agent_cp_ready),                       //      sink.ready
		.sink_valid         (m1_clock_bridge_ftdi_m0_agent_cp_valid),                       //          .valid
		.sink_data          (m1_clock_bridge_ftdi_m0_agent_cp_data),                        //          .data
		.sink_startofpacket (m1_clock_bridge_ftdi_m0_agent_cp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_ftdi_m0_agent_cp_endofpacket),                 //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                         //       src.ready
		.src_valid          (router_009_src_valid),                                         //          .valid
		.src_data           (router_009_src_data),                                          //          .data
		.src_channel        (router_009_src_channel),                                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router_010 router_010 (
		.sink_ready         (m1_ddr2_memory_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (m1_ddr2_memory_avl_agent_rp_valid),                               //          .valid
		.sink_data          (m1_ddr2_memory_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (m1_ddr2_memory_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (m1_ddr2_memory_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset              (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                            //       src.ready
		.src_valid          (router_010_src_valid),                                            //          .valid
		.src_data           (router_010_src_data),                                             //          .data
		.src_channel        (router_010_src_channel),                                          //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                             //      sink.ready
		.sink_channel       (router_src_channel),                                           //          .channel
		.sink_data          (router_src_data),                                              //          .data
		.sink_startofpacket (router_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_src_valid),                                             //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux_001 (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                         //      sink.ready
		.sink_channel       (router_001_src_channel),                                       //          .channel
		.sink_data          (router_001_src_data),                                          //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_001_src_valid),                                         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux_002 (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                         //      sink.ready
		.sink_channel       (router_002_src_channel),                                       //          .channel
		.sink_data          (router_002_src_data),                                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                                         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux_003 (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                         //      sink.ready
		.sink_channel       (router_003_src_channel),                                       //          .channel
		.sink_data          (router_003_src_data),                                          //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_003_src_valid),                                         //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_003_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux_004 (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                         //      sink.ready
		.sink_channel       (router_004_src_channel),                                       //          .channel
		.sink_data          (router_004_src_data),                                          //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_004_src_valid),                                         //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_004_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux_005 (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                         //      sink.ready
		.sink_channel       (router_005_src_channel),                                       //          .channel
		.sink_data          (router_005_src_data),                                          //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_005_src_valid),                                         //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_005_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux_006 (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                         //      sink.ready
		.sink_channel       (router_006_src_channel),                                       //          .channel
		.sink_data          (router_006_src_data),                                          //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_006_src_valid),                                         //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_006_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux_007 (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                         //      sink.ready
		.sink_channel       (router_007_src_channel),                                       //          .channel
		.sink_data          (router_007_src_data),                                          //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_007_src_valid),                                         //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_007_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_007_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux_008 (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                         //      sink.ready
		.sink_channel       (router_008_src_channel),                                       //          .channel
		.sink_data          (router_008_src_data),                                          //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_008_src_valid),                                         //          .valid
		.src0_ready         (cmd_demux_008_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_008_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_008_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_008_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_008_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_008_src0_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux_009 (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset              (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                         //      sink.ready
		.sink_channel       (router_009_src_channel),                                       //          .channel
		.sink_data          (router_009_src_data),                                          //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_009_src_valid),                                         //          .valid
		.src0_ready         (cmd_demux_009_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_009_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_009_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_009_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_009_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_009_src0_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset               (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                               //          .valid
		.sink0_channel       (crosser_out_channel),                                             //          .channel
		.sink0_data          (crosser_out_data),                                                //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                         //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                           //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                           //          .valid
		.sink1_channel       (crosser_001_out_channel),                                         //          .channel
		.sink1_data          (crosser_001_out_data),                                            //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                                     //          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                                           //     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                                           //          .valid
		.sink2_channel       (crosser_002_out_channel),                                         //          .channel
		.sink2_data          (crosser_002_out_data),                                            //          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                                   //          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket),                                     //          .endofpacket
		.sink3_ready         (crosser_003_out_ready),                                           //     sink3.ready
		.sink3_valid         (crosser_003_out_valid),                                           //          .valid
		.sink3_channel       (crosser_003_out_channel),                                         //          .channel
		.sink3_data          (crosser_003_out_data),                                            //          .data
		.sink3_startofpacket (crosser_003_out_startofpacket),                                   //          .startofpacket
		.sink3_endofpacket   (crosser_003_out_endofpacket),                                     //          .endofpacket
		.sink4_ready         (crosser_004_out_ready),                                           //     sink4.ready
		.sink4_valid         (crosser_004_out_valid),                                           //          .valid
		.sink4_channel       (crosser_004_out_channel),                                         //          .channel
		.sink4_data          (crosser_004_out_data),                                            //          .data
		.sink4_startofpacket (crosser_004_out_startofpacket),                                   //          .startofpacket
		.sink4_endofpacket   (crosser_004_out_endofpacket),                                     //          .endofpacket
		.sink5_ready         (crosser_005_out_ready),                                           //     sink5.ready
		.sink5_valid         (crosser_005_out_valid),                                           //          .valid
		.sink5_channel       (crosser_005_out_channel),                                         //          .channel
		.sink5_data          (crosser_005_out_data),                                            //          .data
		.sink5_startofpacket (crosser_005_out_startofpacket),                                   //          .startofpacket
		.sink5_endofpacket   (crosser_005_out_endofpacket),                                     //          .endofpacket
		.sink6_ready         (crosser_006_out_ready),                                           //     sink6.ready
		.sink6_valid         (crosser_006_out_valid),                                           //          .valid
		.sink6_channel       (crosser_006_out_channel),                                         //          .channel
		.sink6_data          (crosser_006_out_data),                                            //          .data
		.sink6_startofpacket (crosser_006_out_startofpacket),                                   //          .startofpacket
		.sink6_endofpacket   (crosser_006_out_endofpacket),                                     //          .endofpacket
		.sink7_ready         (crosser_007_out_ready),                                           //     sink7.ready
		.sink7_valid         (crosser_007_out_valid),                                           //          .valid
		.sink7_channel       (crosser_007_out_channel),                                         //          .channel
		.sink7_data          (crosser_007_out_data),                                            //          .data
		.sink7_startofpacket (crosser_007_out_startofpacket),                                   //          .startofpacket
		.sink7_endofpacket   (crosser_007_out_endofpacket),                                     //          .endofpacket
		.sink8_ready         (crosser_008_out_ready),                                           //     sink8.ready
		.sink8_valid         (crosser_008_out_valid),                                           //          .valid
		.sink8_channel       (crosser_008_out_channel),                                         //          .channel
		.sink8_data          (crosser_008_out_data),                                            //          .data
		.sink8_startofpacket (crosser_008_out_startofpacket),                                   //          .startofpacket
		.sink8_endofpacket   (crosser_008_out_endofpacket),                                     //          .endofpacket
		.sink9_ready         (crosser_009_out_ready),                                           //     sink9.ready
		.sink9_valid         (crosser_009_out_valid),                                           //          .valid
		.sink9_channel       (crosser_009_out_channel),                                         //          .channel
		.sink9_data          (crosser_009_out_data),                                            //          .data
		.sink9_startofpacket (crosser_009_out_startofpacket),                                   //          .startofpacket
		.sink9_endofpacket   (crosser_009_out_endofpacket)                                      //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset              (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                            //      sink.ready
		.sink_channel       (router_010_src_channel),                                          //          .channel
		.sink_data          (router_010_src_data),                                             //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_010_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                      //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                            //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                            //          .valid
		.src1_data          (rsp_demux_src1_data),                                             //          .data
		.src1_channel       (rsp_demux_src1_channel),                                          //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                      //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                            //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                            //          .valid
		.src2_data          (rsp_demux_src2_data),                                             //          .data
		.src2_channel       (rsp_demux_src2_channel),                                          //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                                      //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                            //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                            //          .valid
		.src3_data          (rsp_demux_src3_data),                                             //          .data
		.src3_channel       (rsp_demux_src3_channel),                                          //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                                    //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),                                      //          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                                            //      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                                            //          .valid
		.src4_data          (rsp_demux_src4_data),                                             //          .data
		.src4_channel       (rsp_demux_src4_channel),                                          //          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),                                    //          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket),                                      //          .endofpacket
		.src5_ready         (rsp_demux_src5_ready),                                            //      src5.ready
		.src5_valid         (rsp_demux_src5_valid),                                            //          .valid
		.src5_data          (rsp_demux_src5_data),                                             //          .data
		.src5_channel       (rsp_demux_src5_channel),                                          //          .channel
		.src5_startofpacket (rsp_demux_src5_startofpacket),                                    //          .startofpacket
		.src5_endofpacket   (rsp_demux_src5_endofpacket),                                      //          .endofpacket
		.src6_ready         (rsp_demux_src6_ready),                                            //      src6.ready
		.src6_valid         (rsp_demux_src6_valid),                                            //          .valid
		.src6_data          (rsp_demux_src6_data),                                             //          .data
		.src6_channel       (rsp_demux_src6_channel),                                          //          .channel
		.src6_startofpacket (rsp_demux_src6_startofpacket),                                    //          .startofpacket
		.src6_endofpacket   (rsp_demux_src6_endofpacket),                                      //          .endofpacket
		.src7_ready         (rsp_demux_src7_ready),                                            //      src7.ready
		.src7_valid         (rsp_demux_src7_valid),                                            //          .valid
		.src7_data          (rsp_demux_src7_data),                                             //          .data
		.src7_channel       (rsp_demux_src7_channel),                                          //          .channel
		.src7_startofpacket (rsp_demux_src7_startofpacket),                                    //          .startofpacket
		.src7_endofpacket   (rsp_demux_src7_endofpacket),                                      //          .endofpacket
		.src8_ready         (rsp_demux_src8_ready),                                            //      src8.ready
		.src8_valid         (rsp_demux_src8_valid),                                            //          .valid
		.src8_data          (rsp_demux_src8_data),                                             //          .data
		.src8_channel       (rsp_demux_src8_channel),                                          //          .channel
		.src8_startofpacket (rsp_demux_src8_startofpacket),                                    //          .startofpacket
		.src8_endofpacket   (rsp_demux_src8_endofpacket),                                      //          .endofpacket
		.src9_ready         (rsp_demux_src9_ready),                                            //      src9.ready
		.src9_valid         (rsp_demux_src9_valid),                                            //          .valid
		.src9_data          (rsp_demux_src9_data),                                             //          .data
		.src9_channel       (rsp_demux_src9_channel),                                          //          .channel
		.src9_startofpacket (rsp_demux_src9_startofpacket),                                    //          .startofpacket
		.src9_endofpacket   (rsp_demux_src9_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                                            //          .valid
		.src_data            (rsp_mux_src_data),                                             //          .data
		.src_channel         (rsp_mux_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                                        //          .valid
		.sink0_channel       (crosser_010_out_channel),                                      //          .channel
		.sink0_data          (crosser_010_out_data),                                         //          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux_001 (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                        //          .valid
		.src_data            (rsp_mux_001_src_data),                                         //          .data
		.src_channel         (rsp_mux_001_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                                        //          .valid
		.sink0_channel       (crosser_011_out_channel),                                      //          .channel
		.sink0_data          (crosser_011_out_data),                                         //          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux_002 (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                        //          .valid
		.src_data            (rsp_mux_002_src_data),                                         //          .data
		.src_channel         (rsp_mux_002_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_012_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_012_out_valid),                                        //          .valid
		.sink0_channel       (crosser_012_out_channel),                                      //          .channel
		.sink0_data          (crosser_012_out_data),                                         //          .data
		.sink0_startofpacket (crosser_012_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_012_out_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux_003 (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                        //          .valid
		.src_data            (rsp_mux_003_src_data),                                         //          .data
		.src_channel         (rsp_mux_003_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                                        //          .valid
		.sink0_channel       (crosser_013_out_channel),                                      //          .channel
		.sink0_data          (crosser_013_out_data),                                         //          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux_004 (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                        //          .valid
		.src_data            (rsp_mux_004_src_data),                                         //          .data
		.src_channel         (rsp_mux_004_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_014_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_014_out_valid),                                        //          .valid
		.sink0_channel       (crosser_014_out_channel),                                      //          .channel
		.sink0_data          (crosser_014_out_data),                                         //          .data
		.sink0_startofpacket (crosser_014_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_014_out_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux_005 (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                        //          .valid
		.src_data            (rsp_mux_005_src_data),                                         //          .data
		.src_channel         (rsp_mux_005_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_015_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_015_out_valid),                                        //          .valid
		.sink0_channel       (crosser_015_out_channel),                                      //          .channel
		.sink0_data          (crosser_015_out_data),                                         //          .data
		.sink0_startofpacket (crosser_015_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_015_out_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux_006 (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                                        //          .valid
		.src_data            (rsp_mux_006_src_data),                                         //          .data
		.src_channel         (rsp_mux_006_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_016_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_016_out_valid),                                        //          .valid
		.sink0_channel       (crosser_016_out_channel),                                      //          .channel
		.sink0_data          (crosser_016_out_data),                                         //          .data
		.sink0_startofpacket (crosser_016_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_016_out_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux_007 (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                                        //          .valid
		.src_data            (rsp_mux_007_src_data),                                         //          .data
		.src_channel         (rsp_mux_007_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_017_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_017_out_valid),                                        //          .valid
		.sink0_channel       (crosser_017_out_channel),                                      //          .channel
		.sink0_data          (crosser_017_out_data),                                         //          .data
		.sink0_startofpacket (crosser_017_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_017_out_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux_008 (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_008_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_008_src_valid),                                        //          .valid
		.src_data            (rsp_mux_008_src_data),                                         //          .data
		.src_channel         (rsp_mux_008_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_008_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_008_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_018_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_018_out_valid),                                        //          .valid
		.sink0_channel       (crosser_018_out_channel),                                      //          .channel
		.sink0_data          (crosser_018_out_data),                                         //          .data
		.sink0_startofpacket (crosser_018_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_018_out_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux_009 (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                              //       clk.clk
		.reset               (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_009_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_009_src_valid),                                        //          .valid
		.src_data            (rsp_mux_009_src_data),                                         //          .data
		.src_channel         (rsp_mux_009_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_009_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_009_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_019_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_019_out_valid),                                        //          .valid
		.sink0_channel       (crosser_019_out_channel),                                      //          .channel
		.sink0_data          (crosser_019_out_data),                                         //          .data
		.sink0_startofpacket (crosser_019_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_019_out_endofpacket)                                   //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                          //              .channel
		.in_data           (cmd_demux_src0_data),                                             //              .data
		.out_ready         (crosser_out_ready),                                               //           out.ready
		.out_valid         (crosser_out_valid),                                               //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_out_channel),                                             //              .channel
		.out_data          (crosser_out_data),                                                //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src0_data),                                         //              .data
		.out_ready         (crosser_001_out_ready),                                           //           out.ready
		.out_valid         (crosser_001_out_valid),                                           //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                         //              .channel
		.out_data          (crosser_001_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_002_src0_data),                                         //              .data
		.out_ready         (crosser_002_out_ready),                                           //           out.ready
		.out_valid         (crosser_002_out_valid),                                           //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                         //              .channel
		.out_data          (crosser_002_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_003_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_003_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_003_src0_data),                                         //              .data
		.out_ready         (crosser_003_out_ready),                                           //           out.ready
		.out_valid         (crosser_003_out_valid),                                           //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                         //              .channel
		.out_data          (crosser_003_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_004_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_004_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_004_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_004_src0_data),                                         //              .data
		.out_ready         (crosser_004_out_ready),                                           //           out.ready
		.out_valid         (crosser_004_out_valid),                                           //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                         //              .channel
		.out_data          (crosser_004_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_005_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_005_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_005_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_005_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_005_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_005_src0_data),                                         //              .data
		.out_ready         (crosser_005_out_ready),                                           //           out.ready
		.out_valid         (crosser_005_out_valid),                                           //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                         //              .channel
		.out_data          (crosser_005_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_006_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_006_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_006_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_006_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_006_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_006_src0_data),                                         //              .data
		.out_ready         (crosser_006_out_ready),                                           //           out.ready
		.out_valid         (crosser_006_out_valid),                                           //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                         //              .channel
		.out_data          (crosser_006_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_007_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_007_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_007_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_007_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_007_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_007_src0_data),                                         //              .data
		.out_ready         (crosser_007_out_ready),                                           //           out.ready
		.out_valid         (crosser_007_out_valid),                                           //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                         //              .channel
		.out_data          (crosser_007_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_008_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_008_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_008_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_008_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_008_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_008_src0_data),                                         //              .data
		.out_ready         (crosser_008_out_ready),                                           //           out.ready
		.out_valid         (crosser_008_out_valid),                                           //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                         //              .channel
		.out_data          (crosser_008_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_009_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_009_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_009_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_009_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_009_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_009_src0_data),                                         //              .data
		.out_ready         (crosser_009_out_ready),                                           //           out.ready
		.out_valid         (crosser_009_out_valid),                                           //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                         //              .channel
		.out_data          (crosser_009_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_src0_data),                                             //              .data
		.out_ready         (crosser_010_out_ready),                                           //           out.ready
		.out_valid         (crosser_010_out_valid),                                           //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                         //              .channel
		.out_data          (crosser_010_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_src1_data),                                             //              .data
		.out_ready         (crosser_011_out_ready),                                           //           out.ready
		.out_valid         (crosser_011_out_valid),                                           //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                         //              .channel
		.out_data          (crosser_011_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_src2_data),                                             //              .data
		.out_ready         (crosser_012_out_ready),                                           //           out.ready
		.out_valid         (crosser_012_out_valid),                                           //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                         //              .channel
		.out_data          (crosser_012_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src3_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src3_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src3_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src3_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src3_channel),                                          //              .channel
		.in_data           (rsp_demux_src3_data),                                             //              .data
		.out_ready         (crosser_013_out_ready),                                           //           out.ready
		.out_valid         (crosser_013_out_valid),                                           //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                         //              .channel
		.out_data          (crosser_013_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src4_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src4_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src4_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src4_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src4_channel),                                          //              .channel
		.in_data           (rsp_demux_src4_data),                                             //              .data
		.out_ready         (crosser_014_out_ready),                                           //           out.ready
		.out_valid         (crosser_014_out_valid),                                           //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                         //              .channel
		.out_data          (crosser_014_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src5_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src5_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src5_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src5_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src5_channel),                                          //              .channel
		.in_data           (rsp_demux_src5_data),                                             //              .data
		.out_ready         (crosser_015_out_ready),                                           //           out.ready
		.out_valid         (crosser_015_out_valid),                                           //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                         //              .channel
		.out_data          (crosser_015_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src6_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src6_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src6_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src6_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src6_channel),                                          //              .channel
		.in_data           (rsp_demux_src6_data),                                             //              .data
		.out_ready         (crosser_016_out_ready),                                           //           out.ready
		.out_valid         (crosser_016_out_valid),                                           //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_016_out_channel),                                         //              .channel
		.out_data          (crosser_016_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src7_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src7_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src7_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src7_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src7_channel),                                          //              .channel
		.in_data           (rsp_demux_src7_data),                                             //              .data
		.out_ready         (crosser_017_out_ready),                                           //           out.ready
		.out_valid         (crosser_017_out_valid),                                           //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                         //              .channel
		.out_data          (crosser_017_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src8_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src8_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src8_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src8_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src8_channel),                                          //              .channel
		.in_data           (rsp_demux_src8_data),                                             //              .data
		.out_ready         (crosser_018_out_ready),                                           //           out.ready
		.out_valid         (crosser_018_out_valid),                                           //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_018_out_channel),                                         //              .channel
		.out_data          (crosser_018_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (369),
		.BITS_PER_SYMBOL     (369),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_general_m0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src9_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src9_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src9_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src9_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src9_channel),                                          //              .channel
		.in_data           (rsp_demux_src9_data),                                             //              .data
		.out_ready         (crosser_019_out_ready),                                           //           out.ready
		.out_valid         (crosser_019_out_valid),                                           //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_019_out_channel),                                         //              .channel
		.out_data          (crosser_019_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (m1_ddr2_memory_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_ddr2_memory_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (m1_ddr2_memory_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (m1_ddr2_memory_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

endmodule
