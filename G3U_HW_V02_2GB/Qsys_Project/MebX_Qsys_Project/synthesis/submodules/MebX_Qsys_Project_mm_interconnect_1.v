// MebX_Qsys_Project_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module MebX_Qsys_Project_mm_interconnect_1 (
		input  wire         clk_100_clk_clk,                                                      //                                                    clk_100_clk.clk
		input  wire         m2_ddr2_memory_afi_half_clk_clk,                                      //                                    m2_ddr2_memory_afi_half_clk.clk
		input  wire         Avalon_MM_Master_Arbiter_COMM_reset_sink_reset_bridge_in_reset_reset, // Avalon_MM_Master_Arbiter_COMM_reset_sink_reset_bridge_in_reset.reset
		input  wire         m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset,            //            m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset.reset
		input  wire [63:0]  Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_address,                //                  Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave.address
		output wire         Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_waitrequest,            //                                                               .waitrequest
		input  wire         Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_read,                   //                                                               .read
		output wire [255:0] Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_readdata,               //                                                               .readdata
		output wire [30:0]  m1_clock_bridge_comm_s0_address,                                      //                                        m1_clock_bridge_comm_s0.address
		output wire         m1_clock_bridge_comm_s0_write,                                        //                                                               .write
		output wire         m1_clock_bridge_comm_s0_read,                                         //                                                               .read
		input  wire [255:0] m1_clock_bridge_comm_s0_readdata,                                     //                                                               .readdata
		output wire [255:0] m1_clock_bridge_comm_s0_writedata,                                    //                                                               .writedata
		output wire [2:0]   m1_clock_bridge_comm_s0_burstcount,                                   //                                                               .burstcount
		output wire [31:0]  m1_clock_bridge_comm_s0_byteenable,                                   //                                                               .byteenable
		input  wire         m1_clock_bridge_comm_s0_readdatavalid,                                //                                                               .readdatavalid
		input  wire         m1_clock_bridge_comm_s0_waitrequest,                                  //                                                               .waitrequest
		output wire         m1_clock_bridge_comm_s0_debugaccess                                   //                                                               .debugaccess
	);

	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_waitrequest;   // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_waitrequest -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_waitrequest
	wire  [255:0] avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_readdata;      // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_readdata -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_readdata
	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_debugaccess;   // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_debugaccess -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_debugaccess
	wire   [63:0] avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_address;       // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_address -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_address
	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_read;          // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_read -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_read
	wire   [31:0] avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_byteenable;    // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_byteenable -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_byteenable
	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_readdatavalid; // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_readdatavalid -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_readdatavalid
	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_lock;          // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_lock -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_lock
	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_write;         // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_write -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_write
	wire  [255:0] avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_writedata;     // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_writedata -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_writedata
	wire    [5:0] avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_burstcount;    // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_translator:uav_burstcount -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                                // rsp_mux:src_valid -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:rp_valid
	wire  [390:0] rsp_mux_src_data;                                                                                 // rsp_mux:src_data -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:rp_data
	wire          rsp_mux_src_ready;                                                                                // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                                              // rsp_mux:src_channel -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                        // rsp_mux:src_startofpacket -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                          // rsp_mux:src_endofpacket -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:rp_endofpacket
	wire  [255:0] m1_clock_bridge_comm_s0_agent_m0_readdata;                                                        // m1_clock_bridge_comm_s0_translator:uav_readdata -> m1_clock_bridge_comm_s0_agent:m0_readdata
	wire          m1_clock_bridge_comm_s0_agent_m0_waitrequest;                                                     // m1_clock_bridge_comm_s0_translator:uav_waitrequest -> m1_clock_bridge_comm_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_comm_s0_agent_m0_debugaccess;                                                     // m1_clock_bridge_comm_s0_agent:m0_debugaccess -> m1_clock_bridge_comm_s0_translator:uav_debugaccess
	wire   [63:0] m1_clock_bridge_comm_s0_agent_m0_address;                                                         // m1_clock_bridge_comm_s0_agent:m0_address -> m1_clock_bridge_comm_s0_translator:uav_address
	wire   [31:0] m1_clock_bridge_comm_s0_agent_m0_byteenable;                                                      // m1_clock_bridge_comm_s0_agent:m0_byteenable -> m1_clock_bridge_comm_s0_translator:uav_byteenable
	wire          m1_clock_bridge_comm_s0_agent_m0_read;                                                            // m1_clock_bridge_comm_s0_agent:m0_read -> m1_clock_bridge_comm_s0_translator:uav_read
	wire          m1_clock_bridge_comm_s0_agent_m0_readdatavalid;                                                   // m1_clock_bridge_comm_s0_translator:uav_readdatavalid -> m1_clock_bridge_comm_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_comm_s0_agent_m0_lock;                                                            // m1_clock_bridge_comm_s0_agent:m0_lock -> m1_clock_bridge_comm_s0_translator:uav_lock
	wire  [255:0] m1_clock_bridge_comm_s0_agent_m0_writedata;                                                       // m1_clock_bridge_comm_s0_agent:m0_writedata -> m1_clock_bridge_comm_s0_translator:uav_writedata
	wire          m1_clock_bridge_comm_s0_agent_m0_write;                                                           // m1_clock_bridge_comm_s0_agent:m0_write -> m1_clock_bridge_comm_s0_translator:uav_write
	wire    [7:0] m1_clock_bridge_comm_s0_agent_m0_burstcount;                                                      // m1_clock_bridge_comm_s0_agent:m0_burstcount -> m1_clock_bridge_comm_s0_translator:uav_burstcount
	wire          m1_clock_bridge_comm_s0_agent_rf_source_valid;                                                    // m1_clock_bridge_comm_s0_agent:rf_source_valid -> m1_clock_bridge_comm_s0_agent_rsp_fifo:in_valid
	wire  [391:0] m1_clock_bridge_comm_s0_agent_rf_source_data;                                                     // m1_clock_bridge_comm_s0_agent:rf_source_data -> m1_clock_bridge_comm_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_comm_s0_agent_rf_source_ready;                                                    // m1_clock_bridge_comm_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_comm_s0_agent:rf_source_ready
	wire          m1_clock_bridge_comm_s0_agent_rf_source_startofpacket;                                            // m1_clock_bridge_comm_s0_agent:rf_source_startofpacket -> m1_clock_bridge_comm_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_comm_s0_agent_rf_source_endofpacket;                                              // m1_clock_bridge_comm_s0_agent:rf_source_endofpacket -> m1_clock_bridge_comm_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_comm_s0_agent_rsp_fifo_out_valid;                                                 // m1_clock_bridge_comm_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_comm_s0_agent:rf_sink_valid
	wire  [391:0] m1_clock_bridge_comm_s0_agent_rsp_fifo_out_data;                                                  // m1_clock_bridge_comm_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_comm_s0_agent:rf_sink_data
	wire          m1_clock_bridge_comm_s0_agent_rsp_fifo_out_ready;                                                 // m1_clock_bridge_comm_s0_agent:rf_sink_ready -> m1_clock_bridge_comm_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_comm_s0_agent_rsp_fifo_out_startofpacket;                                         // m1_clock_bridge_comm_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_comm_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_comm_s0_agent_rsp_fifo_out_endofpacket;                                           // m1_clock_bridge_comm_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_comm_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_comm_s0_agent_rdata_fifo_src_valid;                                               // m1_clock_bridge_comm_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_comm_s0_agent_rdata_fifo:in_valid
	wire  [257:0] m1_clock_bridge_comm_s0_agent_rdata_fifo_src_data;                                                // m1_clock_bridge_comm_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_comm_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_comm_s0_agent_rdata_fifo_src_ready;                                               // m1_clock_bridge_comm_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_comm_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                                // cmd_mux:src_valid -> m1_clock_bridge_comm_s0_agent:cp_valid
	wire  [390:0] cmd_mux_src_data;                                                                                 // cmd_mux:src_data -> m1_clock_bridge_comm_s0_agent:cp_data
	wire          cmd_mux_src_ready;                                                                                // m1_clock_bridge_comm_s0_agent:cp_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                                              // cmd_mux:src_channel -> m1_clock_bridge_comm_s0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                        // cmd_mux:src_startofpacket -> m1_clock_bridge_comm_s0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                          // cmd_mux:src_endofpacket -> m1_clock_bridge_comm_s0_agent:cp_endofpacket
	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_valid;                                     // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:cp_valid -> router:sink_valid
	wire  [390:0] avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_data;                                      // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:cp_data -> router:sink_data
	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_ready;                                     // router:sink_ready -> Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:cp_ready
	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_startofpacket;                             // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:cp_startofpacket -> router:sink_startofpacket
	wire          avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_endofpacket;                               // Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [390:0] router_src_data;                                                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                                 // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          m1_clock_bridge_comm_s0_agent_rp_valid;                                                           // m1_clock_bridge_comm_s0_agent:rp_valid -> router_001:sink_valid
	wire  [390:0] m1_clock_bridge_comm_s0_agent_rp_data;                                                            // m1_clock_bridge_comm_s0_agent:rp_data -> router_001:sink_data
	wire          m1_clock_bridge_comm_s0_agent_rp_ready;                                                           // router_001:sink_ready -> m1_clock_bridge_comm_s0_agent:rp_ready
	wire          m1_clock_bridge_comm_s0_agent_rp_startofpacket;                                                   // m1_clock_bridge_comm_s0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          m1_clock_bridge_comm_s0_agent_rp_endofpacket;                                                     // m1_clock_bridge_comm_s0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                             // router_001:src_valid -> rsp_demux:sink_valid
	wire  [390:0] router_001_src_data;                                                                              // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                                             // rsp_demux:sink_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                                           // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                                     // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                       // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                             // cmd_demux:src0_valid -> crosser:in_valid
	wire  [390:0] cmd_demux_src0_data;                                                                              // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                             // crosser:in_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                                           // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                     // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                       // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                                // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [390:0] crosser_out_data;                                                                                 // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                                // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [0:0] crosser_out_channel;                                                                              // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                        // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                          // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                             // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [390:0] rsp_demux_src0_data;                                                                              // rsp_demux:src0_data -> crosser_001:in_data
	wire          rsp_demux_src0_ready;                                                                             // crosser_001:in_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                                           // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                     // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                       // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                            // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [390:0] crosser_001_out_data;                                                                             // crosser_001:out_data -> rsp_mux:sink0_data
	wire          crosser_001_out_ready;                                                                            // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire    [0:0] crosser_001_out_channel;                                                                          // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_startofpacket;                                                                    // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                      // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          m1_clock_bridge_comm_s0_agent_rdata_fifo_out_valid;                                               // m1_clock_bridge_comm_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] m1_clock_bridge_comm_s0_agent_rdata_fifo_out_data;                                                // m1_clock_bridge_comm_s0_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          m1_clock_bridge_comm_s0_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter:in_0_ready -> m1_clock_bridge_comm_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                    // avalon_st_adapter:out_0_valid -> m1_clock_bridge_comm_s0_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                                                     // avalon_st_adapter:out_0_data -> m1_clock_bridge_comm_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                    // m1_clock_bridge_comm_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                    // avalon_st_adapter:out_0_error -> m1_clock_bridge_comm_s0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) avalon_mm_master_arbiter_comm_avalon_mm_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                       clk.clk
		.reset                  (Avalon_MM_Master_Arbiter_COMM_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                  //                     reset.reset
		.uav_address            (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_address),                                                                                                                                                                            // avalon_universal_master_0.address
		.uav_burstcount         (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                         //                          .burstcount
		.uav_read               (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_read),                                                                                                                                                                               //                          .read
		.uav_write              (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_write),                                                                                                                                                                              //                          .write
		.uav_waitrequest        (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                        //                          .waitrequest
		.uav_readdatavalid      (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                      //                          .readdatavalid
		.uav_byteenable         (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                         //                          .byteenable
		.uav_readdata           (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_readdata),                                                                                                                                                                           //                          .readdata
		.uav_writedata          (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_writedata),                                                                                                                                                                          //                          .writedata
		.uav_lock               (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_lock),                                                                                                                                                                               //                          .lock
		.uav_debugaccess        (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                        //                          .debugaccess
		.av_address             (Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_address),                                                                                                                                                                                                                 //      avalon_anti_master_0.address
		.av_waitrequest         (Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_waitrequest),                                                                                                                                                                                                             //                          .waitrequest
		.av_read                (Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_read),                                                                                                                                                                                                                    //                          .read
		.av_readdata            (Avalon_MM_Master_Arbiter_COMM_avalon_mm_slave_readdata),                                                                                                                                                                                                                //                          .readdata
		.av_burstcount          (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (8),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_comm_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                           //                      clk.clk
		.reset                  (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_comm_s0_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_comm_s0_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (m1_clock_bridge_comm_s0_agent_m0_read),                     //                         .read
		.uav_write              (m1_clock_bridge_comm_s0_agent_m0_write),                    //                         .write
		.uav_waitrequest        (m1_clock_bridge_comm_s0_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_comm_s0_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_comm_s0_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (m1_clock_bridge_comm_s0_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (m1_clock_bridge_comm_s0_agent_m0_writedata),                //                         .writedata
		.uav_lock               (m1_clock_bridge_comm_s0_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (m1_clock_bridge_comm_s0_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (m1_clock_bridge_comm_s0_address),                           //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_comm_s0_write),                             //                         .write
		.av_read                (m1_clock_bridge_comm_s0_read),                              //                         .read
		.av_readdata            (m1_clock_bridge_comm_s0_readdata),                          //                         .readdata
		.av_writedata           (m1_clock_bridge_comm_s0_writedata),                         //                         .writedata
		.av_burstcount          (m1_clock_bridge_comm_s0_burstcount),                        //                         .burstcount
		.av_byteenable          (m1_clock_bridge_comm_s0_byteenable),                        //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_comm_s0_readdatavalid),                     //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_comm_s0_waitrequest),                       //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_comm_s0_debugaccess),                       //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (390),
		.PKT_ORI_BURST_SIZE_L      (388),
		.PKT_RESPONSE_STATUS_H     (387),
		.PKT_RESPONSE_STATUS_L     (386),
		.PKT_QOS_H                 (375),
		.PKT_QOS_L                 (375),
		.PKT_DATA_SIDEBAND_H       (373),
		.PKT_DATA_SIDEBAND_L       (373),
		.PKT_ADDR_SIDEBAND_H       (372),
		.PKT_ADDR_SIDEBAND_L       (372),
		.PKT_BURST_TYPE_H          (371),
		.PKT_BURST_TYPE_L          (370),
		.PKT_CACHE_H               (385),
		.PKT_CACHE_L               (382),
		.PKT_THREAD_ID_H           (378),
		.PKT_THREAD_ID_L           (378),
		.PKT_BURST_SIZE_H          (369),
		.PKT_BURST_SIZE_L          (367),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (374),
		.PKT_PROTECTION_H          (381),
		.PKT_PROTECTION_L          (379),
		.PKT_BURSTWRAP_H           (366),
		.PKT_BURSTWRAP_L           (366),
		.PKT_BYTE_CNT_H            (365),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (376),
		.PKT_SRC_ID_L              (376),
		.PKT_DEST_ID_H             (377),
		.PKT_DEST_ID_L             (377),
		.ST_DATA_W                 (391),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) avalon_mm_master_arbiter_comm_avalon_mm_slave_agent (
		.clk                   (clk_100_clk_clk),                                                                                  //       clk.clk
		.reset                 (Avalon_MM_Master_Arbiter_COMM_reset_sink_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (avalon_mm_master_arbiter_comm_avalon_mm_slave_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_valid),                                     //        cp.valid
		.cp_data               (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_data),                                      //          .data
		.cp_startofpacket      (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                                //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                                 //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                              //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                                          //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                                //          .ready
		.av_response           (),                                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (390),
		.PKT_ORI_BURST_SIZE_L      (388),
		.PKT_RESPONSE_STATUS_H     (387),
		.PKT_RESPONSE_STATUS_L     (386),
		.PKT_BURST_SIZE_H          (369),
		.PKT_BURST_SIZE_L          (367),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (374),
		.PKT_PROTECTION_H          (381),
		.PKT_PROTECTION_L          (379),
		.PKT_BURSTWRAP_H           (366),
		.PKT_BURSTWRAP_L           (366),
		.PKT_BYTE_CNT_H            (365),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (376),
		.PKT_SRC_ID_L              (376),
		.PKT_DEST_ID_H             (377),
		.PKT_DEST_ID_L             (377),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (391),
		.AVS_BURSTCOUNT_W          (8),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_comm_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                           //             clk.clk
		.reset                   (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (m1_clock_bridge_comm_s0_agent_m0_address),                  //              m0.address
		.m0_burstcount           (m1_clock_bridge_comm_s0_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (m1_clock_bridge_comm_s0_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_comm_s0_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (m1_clock_bridge_comm_s0_agent_m0_lock),                     //                .lock
		.m0_readdata             (m1_clock_bridge_comm_s0_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_comm_s0_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (m1_clock_bridge_comm_s0_agent_m0_read),                     //                .read
		.m0_waitrequest          (m1_clock_bridge_comm_s0_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (m1_clock_bridge_comm_s0_agent_m0_writedata),                //                .writedata
		.m0_write                (m1_clock_bridge_comm_s0_agent_m0_write),                    //                .write
		.rp_endofpacket          (m1_clock_bridge_comm_s0_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_comm_s0_agent_rp_ready),                    //                .ready
		.rp_valid                (m1_clock_bridge_comm_s0_agent_rp_valid),                    //                .valid
		.rp_data                 (m1_clock_bridge_comm_s0_agent_rp_data),                     //                .data
		.rp_startofpacket        (m1_clock_bridge_comm_s0_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                       //                .channel
		.rf_sink_ready           (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (m1_clock_bridge_comm_s0_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_comm_s0_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (m1_clock_bridge_comm_s0_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_comm_s0_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (m1_clock_bridge_comm_s0_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_comm_s0_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_comm_s0_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_comm_s0_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (392),
		.FIFO_DEPTH          (17),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset             (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_s0_agent_rf_source_data),              //        in.data
		.in_valid          (m1_clock_bridge_comm_s0_agent_rf_source_valid),             //          .valid
		.in_ready          (m1_clock_bridge_comm_s0_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (m1_clock_bridge_comm_s0_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_comm_s0_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_comm_s0_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (32),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_comm_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset             (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_comm_s0_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (m1_clock_bridge_comm_s0_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (m1_clock_bridge_comm_s0_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (m1_clock_bridge_comm_s0_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (m1_clock_bridge_comm_s0_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (m1_clock_bridge_comm_s0_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_1_router router (
		.sink_ready         (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_ready),         //      sink.ready
		.sink_valid         (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_valid),         //          .valid
		.sink_data          (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_data),          //          .data
		.sink_startofpacket (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (avalon_mm_master_arbiter_comm_avalon_mm_slave_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                      //       clk.clk
		.reset              (Avalon_MM_Master_Arbiter_COMM_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                     //       src.ready
		.src_valid          (router_src_valid),                                                     //          .valid
		.src_data           (router_src_data),                                                      //          .data
		.src_channel        (router_src_channel),                                                   //          .channel
		.src_startofpacket  (router_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (m1_clock_bridge_comm_s0_agent_rp_ready),                    //      sink.ready
		.sink_valid         (m1_clock_bridge_comm_s0_agent_rp_valid),                    //          .valid
		.sink_data          (m1_clock_bridge_comm_s0_agent_rp_data),                     //          .data
		.sink_startofpacket (m1_clock_bridge_comm_s0_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_comm_s0_agent_rp_endofpacket),              //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                      //       src.ready
		.src_valid          (router_001_src_valid),                                      //          .valid
		.src_data           (router_001_src_data),                                       //          .data
		.src_channel        (router_001_src_channel),                                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_100_clk_clk),                                                      //       clk.clk
		.reset              (Avalon_MM_Master_Arbiter_COMM_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                     //      sink.ready
		.sink_channel       (router_src_channel),                                                   //          .channel
		.sink_data          (router_src_data),                                                      //          .data
		.sink_startofpacket (router_src_startofpacket),                                             //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                               //          .endofpacket
		.sink_valid         (router_src_valid),                                                     //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                 //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                 //          .valid
		.src0_data          (cmd_demux_src0_data),                                                  //          .data
		.src0_channel       (cmd_demux_src0_channel),                                               //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                            //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset               (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                         //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                         //          .valid
		.sink0_channel       (crosser_out_channel),                                       //          .channel
		.sink0_data          (crosser_out_data),                                          //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_demux rsp_demux (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                           //       clk.clk
		.reset              (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                      //      sink.ready
		.sink_channel       (router_001_src_channel),                                    //          .channel
		.sink_data          (router_001_src_data),                                       //          .data
		.sink_startofpacket (router_001_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_001_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_100_clk_clk),                                                      //       clk.clk
		.reset               (Avalon_MM_Master_Arbiter_COMM_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_src_data),                                                     //          .data
		.src_channel         (rsp_mux_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                                //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                                //          .valid
		.sink0_channel       (crosser_001_out_channel),                                              //          .channel
		.sink0_data          (crosser_001_out_data),                                                 //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                           //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (391),
		.BITS_PER_SYMBOL     (391),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_100_clk_clk),                                                      //        in_clk.clk
		.in_reset          (Avalon_MM_Master_Arbiter_COMM_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                                 //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                                 //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                           //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                               //              .channel
		.in_data           (cmd_demux_src0_data),                                                  //              .data
		.out_ready         (crosser_out_ready),                                                    //           out.ready
		.out_valid         (crosser_out_valid),                                                    //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                            //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                              //              .endofpacket
		.out_channel       (crosser_out_channel),                                                  //              .channel
		.out_data          (crosser_out_data),                                                     //              .data
		.in_empty          (1'b0),                                                                 //   (terminated)
		.in_error          (1'b0),                                                                 //   (terminated)
		.out_empty         (),                                                                     //   (terminated)
		.out_error         ()                                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (391),
		.BITS_PER_SYMBOL     (391),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                      //       out_clk.clk
		.out_reset         (Avalon_MM_Master_Arbiter_COMM_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                 //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                                 //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                         //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                           //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                               //              .channel
		.in_data           (rsp_demux_src0_data),                                                  //              .data
		.out_ready         (crosser_001_out_ready),                                                //           out.ready
		.out_valid         (crosser_001_out_valid),                                                //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                        //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                          //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                              //              .channel
		.out_data          (crosser_001_out_data),                                                 //              .data
		.in_empty          (1'b0),                                                                 //   (terminated)
		.in_error          (1'b0),                                                                 //   (terminated)
		.out_empty         (),                                                                     //   (terminated)
		.out_error         ()                                                                      //   (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_comm_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_comm_s0_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (m1_clock_bridge_comm_s0_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (m1_clock_bridge_comm_s0_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

endmodule
