// MebX_Qsys_Project_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module MebX_Qsys_Project_mm_interconnect_1 (
		input  wire         clk_100_clk_clk,                                             //                                           clk_100_clk.clk
		input  wire         ext_flash_reset_reset_bridge_in_reset_reset,                 //                 ext_flash_reset_reset_bridge_in_reset.reset
		input  wire         jtag_uart_0_reset_reset_bridge_in_reset_reset,               //               jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire         nios2_gen2_0_reset_reset_bridge_in_reset_reset,              //              nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire         rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset, // rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset.reset
		input  wire         rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset, // rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset.reset
		input  wire         rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset, // rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset.reset
		input  wire         rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset, // rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset.reset
		input  wire         rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset, // rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset.reset
		input  wire         rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset, // rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset.reset
		input  wire [31:0]  nios2_gen2_0_data_master_address,                            //                              nios2_gen2_0_data_master.address
		output wire         nios2_gen2_0_data_master_waitrequest,                        //                                                      .waitrequest
		input  wire [3:0]   nios2_gen2_0_data_master_byteenable,                         //                                                      .byteenable
		input  wire         nios2_gen2_0_data_master_read,                               //                                                      .read
		output wire [31:0]  nios2_gen2_0_data_master_readdata,                           //                                                      .readdata
		input  wire         nios2_gen2_0_data_master_write,                              //                                                      .write
		input  wire [31:0]  nios2_gen2_0_data_master_writedata,                          //                                                      .writedata
		input  wire         nios2_gen2_0_data_master_debugaccess,                        //                                                      .debugaccess
		input  wire [31:0]  nios2_gen2_0_instruction_master_address,                     //                       nios2_gen2_0_instruction_master.address
		output wire         nios2_gen2_0_instruction_master_waitrequest,                 //                                                      .waitrequest
		input  wire [3:0]   nios2_gen2_0_instruction_master_burstcount,                  //                                                      .burstcount
		input  wire         nios2_gen2_0_instruction_master_read,                        //                                                      .read
		output wire [31:0]  nios2_gen2_0_instruction_master_readdata,                    //                                                      .readdata
		output wire         nios2_gen2_0_instruction_master_readdatavalid,               //                                                      .readdatavalid
		output wire [11:0]  clock_bridge_afi_50_s0_address,                              //                                clock_bridge_afi_50_s0.address
		output wire         clock_bridge_afi_50_s0_write,                                //                                                      .write
		output wire         clock_bridge_afi_50_s0_read,                                 //                                                      .read
		input  wire [31:0]  clock_bridge_afi_50_s0_readdata,                             //                                                      .readdata
		output wire [31:0]  clock_bridge_afi_50_s0_writedata,                            //                                                      .writedata
		output wire [0:0]   clock_bridge_afi_50_s0_burstcount,                           //                                                      .burstcount
		output wire [3:0]   clock_bridge_afi_50_s0_byteenable,                           //                                                      .byteenable
		input  wire         clock_bridge_afi_50_s0_readdatavalid,                        //                                                      .readdatavalid
		input  wire         clock_bridge_afi_50_s0_waitrequest,                          //                                                      .waitrequest
		output wire         clock_bridge_afi_50_s0_debugaccess,                          //                                                      .debugaccess
		output wire [7:0]   COMM_Pedreiro_v1_01_1_avalon_slave_windowing_address,        //          COMM_Pedreiro_v1_01_1_avalon_slave_windowing.address
		output wire         COMM_Pedreiro_v1_01_1_avalon_slave_windowing_write,          //                                                      .write
		output wire         COMM_Pedreiro_v1_01_1_avalon_slave_windowing_read,           //                                                      .read
		input  wire [31:0]  COMM_Pedreiro_v1_01_1_avalon_slave_windowing_readdata,       //                                                      .readdata
		output wire [31:0]  COMM_Pedreiro_v1_01_1_avalon_slave_windowing_writedata,      //                                                      .writedata
		output wire [3:0]   COMM_Pedreiro_v1_01_1_avalon_slave_windowing_byteenable,     //                                                      .byteenable
		input  wire         COMM_Pedreiro_v1_01_1_avalon_slave_windowing_waitrequest,    //                                                      .waitrequest
		output wire [7:0]   COMM_Pedreiro_v1_01_2_avalon_slave_windowing_address,        //          COMM_Pedreiro_v1_01_2_avalon_slave_windowing.address
		output wire         COMM_Pedreiro_v1_01_2_avalon_slave_windowing_write,          //                                                      .write
		output wire         COMM_Pedreiro_v1_01_2_avalon_slave_windowing_read,           //                                                      .read
		input  wire [31:0]  COMM_Pedreiro_v1_01_2_avalon_slave_windowing_readdata,       //                                                      .readdata
		output wire [31:0]  COMM_Pedreiro_v1_01_2_avalon_slave_windowing_writedata,      //                                                      .writedata
		output wire [3:0]   COMM_Pedreiro_v1_01_2_avalon_slave_windowing_byteenable,     //                                                      .byteenable
		input  wire         COMM_Pedreiro_v1_01_2_avalon_slave_windowing_waitrequest,    //                                                      .waitrequest
		output wire [7:0]   COMM_Pedreiro_v1_01_3_avalon_slave_windowing_address,        //          COMM_Pedreiro_v1_01_3_avalon_slave_windowing.address
		output wire         COMM_Pedreiro_v1_01_3_avalon_slave_windowing_write,          //                                                      .write
		output wire         COMM_Pedreiro_v1_01_3_avalon_slave_windowing_read,           //                                                      .read
		input  wire [31:0]  COMM_Pedreiro_v1_01_3_avalon_slave_windowing_readdata,       //                                                      .readdata
		output wire [31:0]  COMM_Pedreiro_v1_01_3_avalon_slave_windowing_writedata,      //                                                      .writedata
		output wire [3:0]   COMM_Pedreiro_v1_01_3_avalon_slave_windowing_byteenable,     //                                                      .byteenable
		input  wire         COMM_Pedreiro_v1_01_3_avalon_slave_windowing_waitrequest,    //                                                      .waitrequest
		output wire [7:0]   COMM_Pedreiro_v1_01_4_avalon_slave_windowing_address,        //          COMM_Pedreiro_v1_01_4_avalon_slave_windowing.address
		output wire         COMM_Pedreiro_v1_01_4_avalon_slave_windowing_write,          //                                                      .write
		output wire         COMM_Pedreiro_v1_01_4_avalon_slave_windowing_read,           //                                                      .read
		input  wire [31:0]  COMM_Pedreiro_v1_01_4_avalon_slave_windowing_readdata,       //                                                      .readdata
		output wire [31:0]  COMM_Pedreiro_v1_01_4_avalon_slave_windowing_writedata,      //                                                      .writedata
		output wire [3:0]   COMM_Pedreiro_v1_01_4_avalon_slave_windowing_byteenable,     //                                                      .byteenable
		input  wire         COMM_Pedreiro_v1_01_4_avalon_slave_windowing_waitrequest,    //                                                      .waitrequest
		output wire [7:0]   COMM_Pedreiro_v1_01_5_avalon_slave_windowing_address,        //          COMM_Pedreiro_v1_01_5_avalon_slave_windowing.address
		output wire         COMM_Pedreiro_v1_01_5_avalon_slave_windowing_write,          //                                                      .write
		output wire         COMM_Pedreiro_v1_01_5_avalon_slave_windowing_read,           //                                                      .read
		input  wire [31:0]  COMM_Pedreiro_v1_01_5_avalon_slave_windowing_readdata,       //                                                      .readdata
		output wire [31:0]  COMM_Pedreiro_v1_01_5_avalon_slave_windowing_writedata,      //                                                      .writedata
		output wire [3:0]   COMM_Pedreiro_v1_01_5_avalon_slave_windowing_byteenable,     //                                                      .byteenable
		input  wire         COMM_Pedreiro_v1_01_5_avalon_slave_windowing_waitrequest,    //                                                      .waitrequest
		output wire [7:0]   COMM_Pedreiro_v1_01_6_avalon_slave_windowing_address,        //          COMM_Pedreiro_v1_01_6_avalon_slave_windowing.address
		output wire         COMM_Pedreiro_v1_01_6_avalon_slave_windowing_write,          //                                                      .write
		output wire         COMM_Pedreiro_v1_01_6_avalon_slave_windowing_read,           //                                                      .read
		input  wire [31:0]  COMM_Pedreiro_v1_01_6_avalon_slave_windowing_readdata,       //                                                      .readdata
		output wire [31:0]  COMM_Pedreiro_v1_01_6_avalon_slave_windowing_writedata,      //                                                      .writedata
		output wire [3:0]   COMM_Pedreiro_v1_01_6_avalon_slave_windowing_byteenable,     //                                                      .byteenable
		input  wire         COMM_Pedreiro_v1_01_6_avalon_slave_windowing_waitrequest,    //                                                      .waitrequest
		output wire         ddr2_address_span_extender_cntl_write,                       //                       ddr2_address_span_extender_cntl.write
		output wire         ddr2_address_span_extender_cntl_read,                        //                                                      .read
		input  wire [63:0]  ddr2_address_span_extender_cntl_readdata,                    //                                                      .readdata
		output wire [63:0]  ddr2_address_span_extender_cntl_writedata,                   //                                                      .writedata
		output wire [7:0]   ddr2_address_span_extender_cntl_byteenable,                  //                                                      .byteenable
		output wire [28:0]  ddr2_address_span_extender_windowed_slave_address,           //             ddr2_address_span_extender_windowed_slave.address
		output wire         ddr2_address_span_extender_windowed_slave_write,             //                                                      .write
		output wire         ddr2_address_span_extender_windowed_slave_read,              //                                                      .read
		input  wire [31:0]  ddr2_address_span_extender_windowed_slave_readdata,          //                                                      .readdata
		output wire [31:0]  ddr2_address_span_extender_windowed_slave_writedata,         //                                                      .writedata
		output wire [7:0]   ddr2_address_span_extender_windowed_slave_burstcount,        //                                                      .burstcount
		output wire [3:0]   ddr2_address_span_extender_windowed_slave_byteenable,        //                                                      .byteenable
		input  wire         ddr2_address_span_extender_windowed_slave_readdatavalid,     //                                                      .readdatavalid
		input  wire         ddr2_address_span_extender_windowed_slave_waitrequest,       //                                                      .waitrequest
		output wire [2:0]   dma_comm_1_left_csr_address,                                 //                                   dma_comm_1_left_csr.address
		output wire         dma_comm_1_left_csr_write,                                   //                                                      .write
		output wire         dma_comm_1_left_csr_read,                                    //                                                      .read
		input  wire [31:0]  dma_comm_1_left_csr_readdata,                                //                                                      .readdata
		output wire [31:0]  dma_comm_1_left_csr_writedata,                               //                                                      .writedata
		output wire [3:0]   dma_comm_1_left_csr_byteenable,                              //                                                      .byteenable
		output wire         dma_comm_1_left_descriptor_slave_write,                      //                      dma_comm_1_left_descriptor_slave.write
		output wire [255:0] dma_comm_1_left_descriptor_slave_writedata,                  //                                                      .writedata
		output wire [31:0]  dma_comm_1_left_descriptor_slave_byteenable,                 //                                                      .byteenable
		input  wire         dma_comm_1_left_descriptor_slave_waitrequest,                //                                                      .waitrequest
		output wire [2:0]   dma_comm_1_right_csr_address,                                //                                  dma_comm_1_right_csr.address
		output wire         dma_comm_1_right_csr_write,                                  //                                                      .write
		output wire         dma_comm_1_right_csr_read,                                   //                                                      .read
		input  wire [31:0]  dma_comm_1_right_csr_readdata,                               //                                                      .readdata
		output wire [31:0]  dma_comm_1_right_csr_writedata,                              //                                                      .writedata
		output wire [3:0]   dma_comm_1_right_csr_byteenable,                             //                                                      .byteenable
		output wire         dma_comm_1_right_descriptor_slave_write,                     //                     dma_comm_1_right_descriptor_slave.write
		output wire [255:0] dma_comm_1_right_descriptor_slave_writedata,                 //                                                      .writedata
		output wire [31:0]  dma_comm_1_right_descriptor_slave_byteenable,                //                                                      .byteenable
		input  wire         dma_comm_1_right_descriptor_slave_waitrequest,               //                                                      .waitrequest
		output wire [2:0]   dma_comm_2_left_csr_address,                                 //                                   dma_comm_2_left_csr.address
		output wire         dma_comm_2_left_csr_write,                                   //                                                      .write
		output wire         dma_comm_2_left_csr_read,                                    //                                                      .read
		input  wire [31:0]  dma_comm_2_left_csr_readdata,                                //                                                      .readdata
		output wire [31:0]  dma_comm_2_left_csr_writedata,                               //                                                      .writedata
		output wire [3:0]   dma_comm_2_left_csr_byteenable,                              //                                                      .byteenable
		output wire         dma_comm_2_left_descriptor_slave_write,                      //                      dma_comm_2_left_descriptor_slave.write
		output wire [255:0] dma_comm_2_left_descriptor_slave_writedata,                  //                                                      .writedata
		output wire [31:0]  dma_comm_2_left_descriptor_slave_byteenable,                 //                                                      .byteenable
		input  wire         dma_comm_2_left_descriptor_slave_waitrequest,                //                                                      .waitrequest
		output wire [2:0]   dma_comm_2_right_csr_address,                                //                                  dma_comm_2_right_csr.address
		output wire         dma_comm_2_right_csr_write,                                  //                                                      .write
		output wire         dma_comm_2_right_csr_read,                                   //                                                      .read
		input  wire [31:0]  dma_comm_2_right_csr_readdata,                               //                                                      .readdata
		output wire [31:0]  dma_comm_2_right_csr_writedata,                              //                                                      .writedata
		output wire [3:0]   dma_comm_2_right_csr_byteenable,                             //                                                      .byteenable
		output wire         dma_comm_2_right_descriptor_slave_write,                     //                     dma_comm_2_right_descriptor_slave.write
		output wire [255:0] dma_comm_2_right_descriptor_slave_writedata,                 //                                                      .writedata
		output wire [31:0]  dma_comm_2_right_descriptor_slave_byteenable,                //                                                      .byteenable
		input  wire         dma_comm_2_right_descriptor_slave_waitrequest,               //                                                      .waitrequest
		output wire [2:0]   dma_comm_3_left_csr_address,                                 //                                   dma_comm_3_left_csr.address
		output wire         dma_comm_3_left_csr_write,                                   //                                                      .write
		output wire         dma_comm_3_left_csr_read,                                    //                                                      .read
		input  wire [31:0]  dma_comm_3_left_csr_readdata,                                //                                                      .readdata
		output wire [31:0]  dma_comm_3_left_csr_writedata,                               //                                                      .writedata
		output wire [3:0]   dma_comm_3_left_csr_byteenable,                              //                                                      .byteenable
		output wire         dma_comm_3_left_descriptor_slave_write,                      //                      dma_comm_3_left_descriptor_slave.write
		output wire [255:0] dma_comm_3_left_descriptor_slave_writedata,                  //                                                      .writedata
		output wire [31:0]  dma_comm_3_left_descriptor_slave_byteenable,                 //                                                      .byteenable
		input  wire         dma_comm_3_left_descriptor_slave_waitrequest,                //                                                      .waitrequest
		output wire [2:0]   dma_comm_3_right_csr_address,                                //                                  dma_comm_3_right_csr.address
		output wire         dma_comm_3_right_csr_write,                                  //                                                      .write
		output wire         dma_comm_3_right_csr_read,                                   //                                                      .read
		input  wire [31:0]  dma_comm_3_right_csr_readdata,                               //                                                      .readdata
		output wire [31:0]  dma_comm_3_right_csr_writedata,                              //                                                      .writedata
		output wire [3:0]   dma_comm_3_right_csr_byteenable,                             //                                                      .byteenable
		output wire         dma_comm_3_right_descriptor_slave_write,                     //                     dma_comm_3_right_descriptor_slave.write
		output wire [255:0] dma_comm_3_right_descriptor_slave_writedata,                 //                                                      .writedata
		output wire [31:0]  dma_comm_3_right_descriptor_slave_byteenable,                //                                                      .byteenable
		input  wire         dma_comm_3_right_descriptor_slave_waitrequest,               //                                                      .waitrequest
		output wire [2:0]   dma_comm_4_left_csr_address,                                 //                                   dma_comm_4_left_csr.address
		output wire         dma_comm_4_left_csr_write,                                   //                                                      .write
		output wire         dma_comm_4_left_csr_read,                                    //                                                      .read
		input  wire [31:0]  dma_comm_4_left_csr_readdata,                                //                                                      .readdata
		output wire [31:0]  dma_comm_4_left_csr_writedata,                               //                                                      .writedata
		output wire [3:0]   dma_comm_4_left_csr_byteenable,                              //                                                      .byteenable
		output wire         dma_comm_4_left_descriptor_slave_write,                      //                      dma_comm_4_left_descriptor_slave.write
		output wire [255:0] dma_comm_4_left_descriptor_slave_writedata,                  //                                                      .writedata
		output wire [31:0]  dma_comm_4_left_descriptor_slave_byteenable,                 //                                                      .byteenable
		input  wire         dma_comm_4_left_descriptor_slave_waitrequest,                //                                                      .waitrequest
		output wire [2:0]   dma_comm_4_right_csr_address,                                //                                  dma_comm_4_right_csr.address
		output wire         dma_comm_4_right_csr_write,                                  //                                                      .write
		output wire         dma_comm_4_right_csr_read,                                   //                                                      .read
		input  wire [31:0]  dma_comm_4_right_csr_readdata,                               //                                                      .readdata
		output wire [31:0]  dma_comm_4_right_csr_writedata,                              //                                                      .writedata
		output wire [3:0]   dma_comm_4_right_csr_byteenable,                             //                                                      .byteenable
		output wire         dma_comm_4_right_descriptor_slave_write,                     //                     dma_comm_4_right_descriptor_slave.write
		output wire [255:0] dma_comm_4_right_descriptor_slave_writedata,                 //                                                      .writedata
		output wire [31:0]  dma_comm_4_right_descriptor_slave_byteenable,                //                                                      .byteenable
		input  wire         dma_comm_4_right_descriptor_slave_waitrequest,               //                                                      .waitrequest
		output wire [2:0]   dma_comm_5_left_csr_address,                                 //                                   dma_comm_5_left_csr.address
		output wire         dma_comm_5_left_csr_write,                                   //                                                      .write
		output wire         dma_comm_5_left_csr_read,                                    //                                                      .read
		input  wire [31:0]  dma_comm_5_left_csr_readdata,                                //                                                      .readdata
		output wire [31:0]  dma_comm_5_left_csr_writedata,                               //                                                      .writedata
		output wire [3:0]   dma_comm_5_left_csr_byteenable,                              //                                                      .byteenable
		output wire         dma_comm_5_left_descriptor_slave_write,                      //                      dma_comm_5_left_descriptor_slave.write
		output wire [255:0] dma_comm_5_left_descriptor_slave_writedata,                  //                                                      .writedata
		output wire [31:0]  dma_comm_5_left_descriptor_slave_byteenable,                 //                                                      .byteenable
		input  wire         dma_comm_5_left_descriptor_slave_waitrequest,                //                                                      .waitrequest
		output wire [2:0]   dma_comm_5_right_csr_address,                                //                                  dma_comm_5_right_csr.address
		output wire         dma_comm_5_right_csr_write,                                  //                                                      .write
		output wire         dma_comm_5_right_csr_read,                                   //                                                      .read
		input  wire [31:0]  dma_comm_5_right_csr_readdata,                               //                                                      .readdata
		output wire [31:0]  dma_comm_5_right_csr_writedata,                              //                                                      .writedata
		output wire [3:0]   dma_comm_5_right_csr_byteenable,                             //                                                      .byteenable
		output wire         dma_comm_5_right_descriptor_slave_write,                     //                     dma_comm_5_right_descriptor_slave.write
		output wire [255:0] dma_comm_5_right_descriptor_slave_writedata,                 //                                                      .writedata
		output wire [31:0]  dma_comm_5_right_descriptor_slave_byteenable,                //                                                      .byteenable
		input  wire         dma_comm_5_right_descriptor_slave_waitrequest,               //                                                      .waitrequest
		output wire [2:0]   dma_comm_6_left_csr_address,                                 //                                   dma_comm_6_left_csr.address
		output wire         dma_comm_6_left_csr_write,                                   //                                                      .write
		output wire         dma_comm_6_left_csr_read,                                    //                                                      .read
		input  wire [31:0]  dma_comm_6_left_csr_readdata,                                //                                                      .readdata
		output wire [31:0]  dma_comm_6_left_csr_writedata,                               //                                                      .writedata
		output wire [3:0]   dma_comm_6_left_csr_byteenable,                              //                                                      .byteenable
		output wire         dma_comm_6_left_descriptor_slave_write,                      //                      dma_comm_6_left_descriptor_slave.write
		output wire [255:0] dma_comm_6_left_descriptor_slave_writedata,                  //                                                      .writedata
		output wire [31:0]  dma_comm_6_left_descriptor_slave_byteenable,                 //                                                      .byteenable
		input  wire         dma_comm_6_left_descriptor_slave_waitrequest,                //                                                      .waitrequest
		output wire [2:0]   dma_comm_6_right_csr_address,                                //                                  dma_comm_6_right_csr.address
		output wire         dma_comm_6_right_csr_write,                                  //                                                      .write
		output wire         dma_comm_6_right_csr_read,                                   //                                                      .read
		input  wire [31:0]  dma_comm_6_right_csr_readdata,                               //                                                      .readdata
		output wire [31:0]  dma_comm_6_right_csr_writedata,                              //                                                      .writedata
		output wire [3:0]   dma_comm_6_right_csr_byteenable,                             //                                                      .byteenable
		output wire         dma_comm_6_right_descriptor_slave_write,                     //                     dma_comm_6_right_descriptor_slave.write
		output wire [255:0] dma_comm_6_right_descriptor_slave_writedata,                 //                                                      .writedata
		output wire [31:0]  dma_comm_6_right_descriptor_slave_byteenable,                //                                                      .byteenable
		input  wire         dma_comm_6_right_descriptor_slave_waitrequest,               //                                                      .waitrequest
		output wire [2:0]   dma_ftdi_rx_usb3_csr_address,                                //                                  dma_ftdi_rx_usb3_csr.address
		output wire         dma_ftdi_rx_usb3_csr_write,                                  //                                                      .write
		output wire         dma_ftdi_rx_usb3_csr_read,                                   //                                                      .read
		input  wire [31:0]  dma_ftdi_rx_usb3_csr_readdata,                               //                                                      .readdata
		output wire [31:0]  dma_ftdi_rx_usb3_csr_writedata,                              //                                                      .writedata
		output wire [3:0]   dma_ftdi_rx_usb3_csr_byteenable,                             //                                                      .byteenable
		output wire         dma_ftdi_rx_usb3_descriptor_slave_write,                     //                     dma_ftdi_rx_usb3_descriptor_slave.write
		output wire [255:0] dma_ftdi_rx_usb3_descriptor_slave_writedata,                 //                                                      .writedata
		output wire [31:0]  dma_ftdi_rx_usb3_descriptor_slave_byteenable,                //                                                      .byteenable
		input  wire         dma_ftdi_rx_usb3_descriptor_slave_waitrequest,               //                                                      .waitrequest
		output wire [2:0]   dma_ftdi_tx_usb3_csr_address,                                //                                  dma_ftdi_tx_usb3_csr.address
		output wire         dma_ftdi_tx_usb3_csr_write,                                  //                                                      .write
		output wire         dma_ftdi_tx_usb3_csr_read,                                   //                                                      .read
		input  wire [31:0]  dma_ftdi_tx_usb3_csr_readdata,                               //                                                      .readdata
		output wire [31:0]  dma_ftdi_tx_usb3_csr_writedata,                              //                                                      .writedata
		output wire [3:0]   dma_ftdi_tx_usb3_csr_byteenable,                             //                                                      .byteenable
		output wire         dma_ftdi_tx_usb3_descriptor_slave_write,                     //                     dma_ftdi_tx_usb3_descriptor_slave.write
		output wire [255:0] dma_ftdi_tx_usb3_descriptor_slave_writedata,                 //                                                      .writedata
		output wire [31:0]  dma_ftdi_tx_usb3_descriptor_slave_byteenable,                //                                                      .byteenable
		input  wire         dma_ftdi_tx_usb3_descriptor_slave_waitrequest,               //                                                      .waitrequest
		output wire [25:0]  ext_flash_uas_address,                                       //                                         ext_flash_uas.address
		output wire         ext_flash_uas_write,                                         //                                                      .write
		output wire         ext_flash_uas_read,                                          //                                                      .read
		input  wire [15:0]  ext_flash_uas_readdata,                                      //                                                      .readdata
		output wire [15:0]  ext_flash_uas_writedata,                                     //                                                      .writedata
		output wire [1:0]   ext_flash_uas_burstcount,                                    //                                                      .burstcount
		output wire [1:0]   ext_flash_uas_byteenable,                                    //                                                      .byteenable
		input  wire         ext_flash_uas_readdatavalid,                                 //                                                      .readdatavalid
		input  wire         ext_flash_uas_waitrequest,                                   //                                                      .waitrequest
		output wire         ext_flash_uas_lock,                                          //                                                      .lock
		output wire         ext_flash_uas_debugaccess,                                   //                                                      .debugaccess
		output wire [7:0]   FTDI_USB3_0_avalon_slave_config_address,                     //                       FTDI_USB3_0_avalon_slave_config.address
		output wire         FTDI_USB3_0_avalon_slave_config_write,                       //                                                      .write
		output wire         FTDI_USB3_0_avalon_slave_config_read,                        //                                                      .read
		input  wire [31:0]  FTDI_USB3_0_avalon_slave_config_readdata,                    //                                                      .readdata
		output wire [31:0]  FTDI_USB3_0_avalon_slave_config_writedata,                   //                                                      .writedata
		output wire [3:0]   FTDI_USB3_0_avalon_slave_config_byteenable,                  //                                                      .byteenable
		input  wire         FTDI_USB3_0_avalon_slave_config_waitrequest,                 //                                                      .waitrequest
		output wire [0:0]   jtag_uart_0_avalon_jtag_slave_address,                       //                         jtag_uart_0_avalon_jtag_slave.address
		output wire         jtag_uart_0_avalon_jtag_slave_write,                         //                                                      .write
		output wire         jtag_uart_0_avalon_jtag_slave_read,                          //                                                      .read
		input  wire [31:0]  jtag_uart_0_avalon_jtag_slave_readdata,                      //                                                      .readdata
		output wire [31:0]  jtag_uart_0_avalon_jtag_slave_writedata,                     //                                                      .writedata
		input  wire         jtag_uart_0_avalon_jtag_slave_waitrequest,                   //                                                      .waitrequest
		output wire         jtag_uart_0_avalon_jtag_slave_chipselect,                    //                                                      .chipselect
		output wire [8:0]   nios2_gen2_0_debug_mem_slave_address,                        //                          nios2_gen2_0_debug_mem_slave.address
		output wire         nios2_gen2_0_debug_mem_slave_write,                          //                                                      .write
		output wire         nios2_gen2_0_debug_mem_slave_read,                           //                                                      .read
		input  wire [31:0]  nios2_gen2_0_debug_mem_slave_readdata,                       //                                                      .readdata
		output wire [31:0]  nios2_gen2_0_debug_mem_slave_writedata,                      //                                                      .writedata
		output wire [3:0]   nios2_gen2_0_debug_mem_slave_byteenable,                     //                                                      .byteenable
		input  wire         nios2_gen2_0_debug_mem_slave_waitrequest,                    //                                                      .waitrequest
		output wire         nios2_gen2_0_debug_mem_slave_debugaccess,                    //                                                      .debugaccess
		output wire [17:0]  onchip_memory_s1_address,                                    //                                      onchip_memory_s1.address
		output wire         onchip_memory_s1_write,                                      //                                                      .write
		input  wire [31:0]  onchip_memory_s1_readdata,                                   //                                                      .readdata
		output wire [31:0]  onchip_memory_s1_writedata,                                  //                                                      .writedata
		output wire [3:0]   onchip_memory_s1_byteenable,                                 //                                                      .byteenable
		output wire         onchip_memory_s1_chipselect,                                 //                                                      .chipselect
		output wire         onchip_memory_s1_clken,                                      //                                                      .clken
		output wire [11:0]  rmap_mem_nfee_comm_1_avalon_rmap_slave_0_address,            //              rmap_mem_nfee_comm_1_avalon_rmap_slave_0.address
		output wire         rmap_mem_nfee_comm_1_avalon_rmap_slave_0_write,              //                                                      .write
		output wire         rmap_mem_nfee_comm_1_avalon_rmap_slave_0_read,               //                                                      .read
		input  wire [31:0]  rmap_mem_nfee_comm_1_avalon_rmap_slave_0_readdata,           //                                                      .readdata
		output wire [31:0]  rmap_mem_nfee_comm_1_avalon_rmap_slave_0_writedata,          //                                                      .writedata
		output wire [3:0]   rmap_mem_nfee_comm_1_avalon_rmap_slave_0_byteenable,         //                                                      .byteenable
		input  wire         rmap_mem_nfee_comm_1_avalon_rmap_slave_0_waitrequest,        //                                                      .waitrequest
		output wire [11:0]  rmap_mem_nfee_comm_2_avalon_rmap_slave_0_address,            //              rmap_mem_nfee_comm_2_avalon_rmap_slave_0.address
		output wire         rmap_mem_nfee_comm_2_avalon_rmap_slave_0_write,              //                                                      .write
		output wire         rmap_mem_nfee_comm_2_avalon_rmap_slave_0_read,               //                                                      .read
		input  wire [31:0]  rmap_mem_nfee_comm_2_avalon_rmap_slave_0_readdata,           //                                                      .readdata
		output wire [31:0]  rmap_mem_nfee_comm_2_avalon_rmap_slave_0_writedata,          //                                                      .writedata
		output wire [3:0]   rmap_mem_nfee_comm_2_avalon_rmap_slave_0_byteenable,         //                                                      .byteenable
		input  wire         rmap_mem_nfee_comm_2_avalon_rmap_slave_0_waitrequest,        //                                                      .waitrequest
		output wire [11:0]  rmap_mem_nfee_comm_3_avalon_rmap_slave_0_address,            //              rmap_mem_nfee_comm_3_avalon_rmap_slave_0.address
		output wire         rmap_mem_nfee_comm_3_avalon_rmap_slave_0_write,              //                                                      .write
		output wire         rmap_mem_nfee_comm_3_avalon_rmap_slave_0_read,               //                                                      .read
		input  wire [31:0]  rmap_mem_nfee_comm_3_avalon_rmap_slave_0_readdata,           //                                                      .readdata
		output wire [31:0]  rmap_mem_nfee_comm_3_avalon_rmap_slave_0_writedata,          //                                                      .writedata
		output wire [3:0]   rmap_mem_nfee_comm_3_avalon_rmap_slave_0_byteenable,         //                                                      .byteenable
		input  wire         rmap_mem_nfee_comm_3_avalon_rmap_slave_0_waitrequest,        //                                                      .waitrequest
		output wire [11:0]  rmap_mem_nfee_comm_4_avalon_rmap_slave_0_address,            //              rmap_mem_nfee_comm_4_avalon_rmap_slave_0.address
		output wire         rmap_mem_nfee_comm_4_avalon_rmap_slave_0_write,              //                                                      .write
		output wire         rmap_mem_nfee_comm_4_avalon_rmap_slave_0_read,               //                                                      .read
		input  wire [31:0]  rmap_mem_nfee_comm_4_avalon_rmap_slave_0_readdata,           //                                                      .readdata
		output wire [31:0]  rmap_mem_nfee_comm_4_avalon_rmap_slave_0_writedata,          //                                                      .writedata
		output wire [3:0]   rmap_mem_nfee_comm_4_avalon_rmap_slave_0_byteenable,         //                                                      .byteenable
		input  wire         rmap_mem_nfee_comm_4_avalon_rmap_slave_0_waitrequest,        //                                                      .waitrequest
		output wire [11:0]  rmap_mem_nfee_comm_5_avalon_rmap_slave_0_address,            //              rmap_mem_nfee_comm_5_avalon_rmap_slave_0.address
		output wire         rmap_mem_nfee_comm_5_avalon_rmap_slave_0_write,              //                                                      .write
		output wire         rmap_mem_nfee_comm_5_avalon_rmap_slave_0_read,               //                                                      .read
		input  wire [31:0]  rmap_mem_nfee_comm_5_avalon_rmap_slave_0_readdata,           //                                                      .readdata
		output wire [31:0]  rmap_mem_nfee_comm_5_avalon_rmap_slave_0_writedata,          //                                                      .writedata
		output wire [3:0]   rmap_mem_nfee_comm_5_avalon_rmap_slave_0_byteenable,         //                                                      .byteenable
		input  wire         rmap_mem_nfee_comm_5_avalon_rmap_slave_0_waitrequest,        //                                                      .waitrequest
		output wire [11:0]  rmap_mem_nfee_comm_6_avalon_rmap_slave_0_address,            //              rmap_mem_nfee_comm_6_avalon_rmap_slave_0.address
		output wire         rmap_mem_nfee_comm_6_avalon_rmap_slave_0_write,              //                                                      .write
		output wire         rmap_mem_nfee_comm_6_avalon_rmap_slave_0_read,               //                                                      .read
		input  wire [31:0]  rmap_mem_nfee_comm_6_avalon_rmap_slave_0_readdata,           //                                                      .readdata
		output wire [31:0]  rmap_mem_nfee_comm_6_avalon_rmap_slave_0_writedata,          //                                                      .writedata
		output wire [3:0]   rmap_mem_nfee_comm_6_avalon_rmap_slave_0_byteenable,         //                                                      .byteenable
		input  wire         rmap_mem_nfee_comm_6_avalon_rmap_slave_0_waitrequest,        //                                                      .waitrequest
		output wire [0:0]   sysid_qsys_control_slave_address,                            //                              sysid_qsys_control_slave.address
		input  wire [31:0]  sysid_qsys_control_slave_readdata                            //                                                      .readdata
	);

	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [123:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [48:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [5:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [124:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [124:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [123:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [48:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_readdata;                         // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_readdata -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_readdata
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_waitrequest;                      // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_waitrequest -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_waitrequest
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_debugaccess;                      // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_debugaccess -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_debugaccess
	wire   [31:0] rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_address;                          // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_address -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_address
	wire    [3:0] rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_byteenable;                       // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_byteenable -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_byteenable
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_read;                             // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_read -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_read
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_readdatavalid;                    // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_readdatavalid -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_readdatavalid
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_lock;                             // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_lock -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_lock
	wire   [31:0] rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_writedata;                        // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_writedata -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_writedata
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_write;                            // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_write -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_write
	wire    [2:0] rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_burstcount;                       // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:m0_burstcount -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator:uav_burstcount
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_valid;                     // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_source_valid -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_data;                      // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_source_data -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:in_data
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_ready;                     // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:in_ready -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_source_ready
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_startofpacket;             // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_source_startofpacket -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_endofpacket;               // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_source_endofpacket -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_valid;                  // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:out_valid -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_sink_valid
	wire  [124:0] rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_data;                   // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:out_data -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_sink_data
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_ready;                  // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_sink_ready -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:out_ready
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket;          // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:out_startofpacket -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_sink_startofpacket
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket;            // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo:out_endofpacket -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                              // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [48:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:cp_endofpacket
	wire   [31:0] rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_readdata;                         // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_readdata -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_readdata
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_waitrequest;                      // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_waitrequest -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_waitrequest
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_debugaccess;                      // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_debugaccess -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_debugaccess
	wire   [31:0] rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_address;                          // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_address -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_address
	wire    [3:0] rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_byteenable;                       // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_byteenable -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_byteenable
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_read;                             // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_read -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_read
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_readdatavalid;                    // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_readdatavalid -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_readdatavalid
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_lock;                             // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_lock -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_lock
	wire   [31:0] rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_writedata;                        // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_writedata -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_writedata
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_write;                            // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_write -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_write
	wire    [2:0] rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_burstcount;                       // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:m0_burstcount -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator:uav_burstcount
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_valid;                     // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_source_valid -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_data;                      // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_source_data -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:in_data
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_ready;                     // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:in_ready -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_source_ready
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_startofpacket;             // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_source_startofpacket -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_endofpacket;               // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_source_endofpacket -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_valid;                  // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:out_valid -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_sink_valid
	wire  [124:0] rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_data;                   // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:out_data -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_sink_data
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_ready;                  // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_sink_ready -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:out_ready
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket;          // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:out_startofpacket -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_sink_startofpacket
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket;            // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo:out_endofpacket -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [48:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:cp_endofpacket
	wire   [31:0] rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_readdata;                         // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_readdata -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_readdata
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_waitrequest;                      // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_waitrequest -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_waitrequest
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_debugaccess;                      // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_debugaccess -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_debugaccess
	wire   [31:0] rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_address;                          // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_address -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_address
	wire    [3:0] rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_byteenable;                       // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_byteenable -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_byteenable
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_read;                             // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_read -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_read
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_readdatavalid;                    // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_readdatavalid -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_readdatavalid
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_lock;                             // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_lock -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_lock
	wire   [31:0] rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_writedata;                        // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_writedata -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_writedata
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_write;                            // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_write -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_write
	wire    [2:0] rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_burstcount;                       // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:m0_burstcount -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator:uav_burstcount
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_valid;                     // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_source_valid -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_data;                      // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_source_data -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:in_data
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_ready;                     // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:in_ready -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_source_ready
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_startofpacket;             // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_source_startofpacket -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_endofpacket;               // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_source_endofpacket -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_valid;                  // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:out_valid -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_sink_valid
	wire  [124:0] rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_data;                   // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:out_data -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_sink_data
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_ready;                  // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_sink_ready -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:out_ready
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket;          // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:out_startofpacket -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_sink_startofpacket
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket;            // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo:out_endofpacket -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [48:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:cp_endofpacket
	wire   [31:0] rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_readdata;                         // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_readdata -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_readdata
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_waitrequest;                      // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_waitrequest -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_waitrequest
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_debugaccess;                      // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_debugaccess -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_debugaccess
	wire   [31:0] rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_address;                          // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_address -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_address
	wire    [3:0] rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_byteenable;                       // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_byteenable -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_byteenable
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_read;                             // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_read -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_read
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_readdatavalid;                    // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_readdatavalid -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_readdatavalid
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_lock;                             // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_lock -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_lock
	wire   [31:0] rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_writedata;                        // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_writedata -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_writedata
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_write;                            // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_write -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_write
	wire    [2:0] rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_burstcount;                       // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:m0_burstcount -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator:uav_burstcount
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_valid;                     // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_source_valid -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_data;                      // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_source_data -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:in_data
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_ready;                     // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:in_ready -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_source_ready
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_startofpacket;             // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_source_startofpacket -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_endofpacket;               // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_source_endofpacket -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_valid;                  // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:out_valid -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_sink_valid
	wire  [124:0] rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_data;                   // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:out_data -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_sink_data
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_ready;                  // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_sink_ready -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:out_ready
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket;          // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:out_startofpacket -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_sink_startofpacket
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket;            // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo:out_endofpacket -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [48:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:cp_endofpacket
	wire   [31:0] rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_readdata;                         // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_readdata -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_readdata
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_waitrequest;                      // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_waitrequest -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_waitrequest
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_debugaccess;                      // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_debugaccess -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_debugaccess
	wire   [31:0] rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_address;                          // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_address -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_address
	wire    [3:0] rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_byteenable;                       // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_byteenable -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_byteenable
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_read;                             // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_read -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_read
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_readdatavalid;                    // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_readdatavalid -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_readdatavalid
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_lock;                             // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_lock -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_lock
	wire   [31:0] rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_writedata;                        // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_writedata -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_writedata
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_write;                            // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_write -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_write
	wire    [2:0] rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_burstcount;                       // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:m0_burstcount -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator:uav_burstcount
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_valid;                     // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_source_valid -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_data;                      // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_source_data -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:in_data
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_ready;                     // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:in_ready -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_source_ready
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_startofpacket;             // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_source_startofpacket -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_endofpacket;               // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_source_endofpacket -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_valid;                  // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:out_valid -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_sink_valid
	wire  [124:0] rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_data;                   // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:out_data -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_sink_data
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_ready;                  // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_sink_ready -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:out_ready
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket;          // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:out_startofpacket -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_sink_startofpacket
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket;            // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo:out_endofpacket -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [48:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:cp_endofpacket
	wire   [31:0] rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_readdata;                         // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_readdata -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_readdata
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_waitrequest;                      // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_waitrequest -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_waitrequest
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_debugaccess;                      // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_debugaccess -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_debugaccess
	wire   [31:0] rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_address;                          // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_address -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_address
	wire    [3:0] rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_byteenable;                       // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_byteenable -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_byteenable
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_read;                             // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_read -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_read
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_readdatavalid;                    // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_readdatavalid -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_readdatavalid
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_lock;                             // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_lock -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_lock
	wire   [31:0] rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_writedata;                        // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_writedata -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_writedata
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_write;                            // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_write -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_write
	wire    [2:0] rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_burstcount;                       // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:m0_burstcount -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator:uav_burstcount
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_valid;                     // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_source_valid -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_data;                      // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_source_data -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:in_data
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_ready;                     // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:in_ready -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_source_ready
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_startofpacket;             // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_source_startofpacket -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_endofpacket;               // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_source_endofpacket -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_valid;                  // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:out_valid -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_sink_valid
	wire  [124:0] rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_data;                   // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:out_data -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_sink_data
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_ready;                  // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_sink_ready -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:out_ready
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket;          // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:out_startofpacket -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_sink_startofpacket
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket;            // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo:out_endofpacket -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [48:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:cp_endofpacket
	wire   [31:0] ftdi_usb3_0_avalon_slave_config_agent_m0_readdata;                                  // FTDI_USB3_0_avalon_slave_config_translator:uav_readdata -> FTDI_USB3_0_avalon_slave_config_agent:m0_readdata
	wire          ftdi_usb3_0_avalon_slave_config_agent_m0_waitrequest;                               // FTDI_USB3_0_avalon_slave_config_translator:uav_waitrequest -> FTDI_USB3_0_avalon_slave_config_agent:m0_waitrequest
	wire          ftdi_usb3_0_avalon_slave_config_agent_m0_debugaccess;                               // FTDI_USB3_0_avalon_slave_config_agent:m0_debugaccess -> FTDI_USB3_0_avalon_slave_config_translator:uav_debugaccess
	wire   [31:0] ftdi_usb3_0_avalon_slave_config_agent_m0_address;                                   // FTDI_USB3_0_avalon_slave_config_agent:m0_address -> FTDI_USB3_0_avalon_slave_config_translator:uav_address
	wire    [3:0] ftdi_usb3_0_avalon_slave_config_agent_m0_byteenable;                                // FTDI_USB3_0_avalon_slave_config_agent:m0_byteenable -> FTDI_USB3_0_avalon_slave_config_translator:uav_byteenable
	wire          ftdi_usb3_0_avalon_slave_config_agent_m0_read;                                      // FTDI_USB3_0_avalon_slave_config_agent:m0_read -> FTDI_USB3_0_avalon_slave_config_translator:uav_read
	wire          ftdi_usb3_0_avalon_slave_config_agent_m0_readdatavalid;                             // FTDI_USB3_0_avalon_slave_config_translator:uav_readdatavalid -> FTDI_USB3_0_avalon_slave_config_agent:m0_readdatavalid
	wire          ftdi_usb3_0_avalon_slave_config_agent_m0_lock;                                      // FTDI_USB3_0_avalon_slave_config_agent:m0_lock -> FTDI_USB3_0_avalon_slave_config_translator:uav_lock
	wire   [31:0] ftdi_usb3_0_avalon_slave_config_agent_m0_writedata;                                 // FTDI_USB3_0_avalon_slave_config_agent:m0_writedata -> FTDI_USB3_0_avalon_slave_config_translator:uav_writedata
	wire          ftdi_usb3_0_avalon_slave_config_agent_m0_write;                                     // FTDI_USB3_0_avalon_slave_config_agent:m0_write -> FTDI_USB3_0_avalon_slave_config_translator:uav_write
	wire    [2:0] ftdi_usb3_0_avalon_slave_config_agent_m0_burstcount;                                // FTDI_USB3_0_avalon_slave_config_agent:m0_burstcount -> FTDI_USB3_0_avalon_slave_config_translator:uav_burstcount
	wire          ftdi_usb3_0_avalon_slave_config_agent_rf_source_valid;                              // FTDI_USB3_0_avalon_slave_config_agent:rf_source_valid -> FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:in_valid
	wire  [124:0] ftdi_usb3_0_avalon_slave_config_agent_rf_source_data;                               // FTDI_USB3_0_avalon_slave_config_agent:rf_source_data -> FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:in_data
	wire          ftdi_usb3_0_avalon_slave_config_agent_rf_source_ready;                              // FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:in_ready -> FTDI_USB3_0_avalon_slave_config_agent:rf_source_ready
	wire          ftdi_usb3_0_avalon_slave_config_agent_rf_source_startofpacket;                      // FTDI_USB3_0_avalon_slave_config_agent:rf_source_startofpacket -> FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:in_startofpacket
	wire          ftdi_usb3_0_avalon_slave_config_agent_rf_source_endofpacket;                        // FTDI_USB3_0_avalon_slave_config_agent:rf_source_endofpacket -> FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:in_endofpacket
	wire          ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_valid;                           // FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:out_valid -> FTDI_USB3_0_avalon_slave_config_agent:rf_sink_valid
	wire  [124:0] ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_data;                            // FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:out_data -> FTDI_USB3_0_avalon_slave_config_agent:rf_sink_data
	wire          ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_ready;                           // FTDI_USB3_0_avalon_slave_config_agent:rf_sink_ready -> FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:out_ready
	wire          ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_startofpacket;                   // FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:out_startofpacket -> FTDI_USB3_0_avalon_slave_config_agent:rf_sink_startofpacket
	wire          ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_endofpacket;                     // FTDI_USB3_0_avalon_slave_config_agent_rsp_fifo:out_endofpacket -> FTDI_USB3_0_avalon_slave_config_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> FTDI_USB3_0_avalon_slave_config_agent:cp_valid
	wire  [123:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> FTDI_USB3_0_avalon_slave_config_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // FTDI_USB3_0_avalon_slave_config_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [48:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> FTDI_USB3_0_avalon_slave_config_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> FTDI_USB3_0_avalon_slave_config_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> FTDI_USB3_0_avalon_slave_config_agent:cp_endofpacket
	wire   [31:0] comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_readdata;                     // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_readdata -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_readdata
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_waitrequest;                  // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_waitrequest -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_waitrequest
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_debugaccess;                  // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_debugaccess -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_debugaccess
	wire   [31:0] comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_address;                      // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_address -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_address
	wire    [3:0] comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_byteenable;                   // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_byteenable -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_byteenable
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_read;                         // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_read -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_read
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_readdatavalid;                // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_readdatavalid -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_readdatavalid
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_lock;                         // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_lock -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_lock
	wire   [31:0] comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_writedata;                    // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_writedata -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_writedata
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_write;                        // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_write -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_write
	wire    [2:0] comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_burstcount;                   // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:m0_burstcount -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_translator:uav_burstcount
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_valid;                 // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_source_valid -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:in_valid
	wire  [124:0] comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_data;                  // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_source_data -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:in_data
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_ready;                 // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:in_ready -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_source_ready
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_startofpacket;         // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_source_startofpacket -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:in_startofpacket
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_endofpacket;           // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_source_endofpacket -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:in_endofpacket
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_valid;              // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:out_valid -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_sink_valid
	wire  [124:0] comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_data;               // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:out_data -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_sink_data
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_ready;              // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_sink_ready -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:out_ready
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket;      // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:out_startofpacket -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_sink_startofpacket
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket;        // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo:out_endofpacket -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:cp_valid
	wire  [123:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                              // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [48:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:cp_endofpacket
	wire   [31:0] comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_readdata;                     // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_readdata -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_readdata
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_waitrequest;                  // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_waitrequest -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_waitrequest
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_debugaccess;                  // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_debugaccess -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_debugaccess
	wire   [31:0] comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_address;                      // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_address -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_address
	wire    [3:0] comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_byteenable;                   // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_byteenable -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_byteenable
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_read;                         // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_read -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_read
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_readdatavalid;                // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_readdatavalid -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_readdatavalid
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_lock;                         // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_lock -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_lock
	wire   [31:0] comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_writedata;                    // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_writedata -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_writedata
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_write;                        // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_write -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_write
	wire    [2:0] comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_burstcount;                   // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:m0_burstcount -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_translator:uav_burstcount
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_valid;                 // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_source_valid -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:in_valid
	wire  [124:0] comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_data;                  // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_source_data -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:in_data
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_ready;                 // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:in_ready -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_source_ready
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_startofpacket;         // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_source_startofpacket -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:in_startofpacket
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_endofpacket;           // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_source_endofpacket -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:in_endofpacket
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_valid;              // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:out_valid -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_sink_valid
	wire  [124:0] comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_data;               // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:out_data -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_sink_data
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_ready;              // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_sink_ready -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:out_ready
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket;      // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:out_startofpacket -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_sink_startofpacket
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket;        // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo:out_endofpacket -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:cp_valid
	wire  [123:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                              // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [48:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:cp_endofpacket
	wire   [31:0] comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_readdata;                     // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_readdata -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_readdata
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_waitrequest;                  // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_waitrequest -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_waitrequest
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_debugaccess;                  // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_debugaccess -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_debugaccess
	wire   [31:0] comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_address;                      // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_address -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_address
	wire    [3:0] comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_byteenable;                   // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_byteenable -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_byteenable
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_read;                         // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_read -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_read
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_readdatavalid;                // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_readdatavalid -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_readdatavalid
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_lock;                         // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_lock -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_lock
	wire   [31:0] comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_writedata;                    // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_writedata -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_writedata
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_write;                        // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_write -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_write
	wire    [2:0] comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_burstcount;                   // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:m0_burstcount -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_translator:uav_burstcount
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_valid;                 // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_source_valid -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:in_valid
	wire  [124:0] comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_data;                  // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_source_data -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:in_data
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_ready;                 // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:in_ready -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_source_ready
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_startofpacket;         // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_source_startofpacket -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:in_startofpacket
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_endofpacket;           // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_source_endofpacket -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:in_endofpacket
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_valid;              // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:out_valid -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_sink_valid
	wire  [124:0] comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_data;               // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:out_data -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_sink_data
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_ready;              // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_sink_ready -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:out_ready
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket;      // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:out_startofpacket -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_sink_startofpacket
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket;        // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo:out_endofpacket -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:cp_valid
	wire  [123:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                              // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [48:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:cp_endofpacket
	wire   [31:0] comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_readdata;                     // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_readdata -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_readdata
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_waitrequest;                  // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_waitrequest -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_waitrequest
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_debugaccess;                  // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_debugaccess -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_debugaccess
	wire   [31:0] comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_address;                      // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_address -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_address
	wire    [3:0] comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_byteenable;                   // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_byteenable -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_byteenable
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_read;                         // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_read -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_read
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_readdatavalid;                // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_readdatavalid -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_readdatavalid
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_lock;                         // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_lock -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_lock
	wire   [31:0] comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_writedata;                    // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_writedata -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_writedata
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_write;                        // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_write -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_write
	wire    [2:0] comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_burstcount;                   // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:m0_burstcount -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_translator:uav_burstcount
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_valid;                 // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_source_valid -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:in_valid
	wire  [124:0] comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_data;                  // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_source_data -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:in_data
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_ready;                 // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:in_ready -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_source_ready
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_startofpacket;         // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_source_startofpacket -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:in_startofpacket
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_endofpacket;           // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_source_endofpacket -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:in_endofpacket
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_valid;              // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:out_valid -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_sink_valid
	wire  [124:0] comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_data;               // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:out_data -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_sink_data
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_ready;              // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_sink_ready -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:out_ready
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket;      // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:out_startofpacket -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_sink_startofpacket
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket;        // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo:out_endofpacket -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:cp_valid
	wire  [123:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                              // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [48:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:cp_endofpacket
	wire   [31:0] comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_readdata;                     // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_readdata -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_readdata
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_waitrequest;                  // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_waitrequest -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_waitrequest
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_debugaccess;                  // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_debugaccess -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_debugaccess
	wire   [31:0] comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_address;                      // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_address -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_address
	wire    [3:0] comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_byteenable;                   // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_byteenable -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_byteenable
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_read;                         // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_read -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_read
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_readdatavalid;                // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_readdatavalid -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_readdatavalid
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_lock;                         // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_lock -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_lock
	wire   [31:0] comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_writedata;                    // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_writedata -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_writedata
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_write;                        // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_write -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_write
	wire    [2:0] comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_burstcount;                   // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:m0_burstcount -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_translator:uav_burstcount
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_valid;                 // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_source_valid -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:in_valid
	wire  [124:0] comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_data;                  // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_source_data -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:in_data
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_ready;                 // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:in_ready -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_source_ready
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_startofpacket;         // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_source_startofpacket -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:in_startofpacket
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_endofpacket;           // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_source_endofpacket -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:in_endofpacket
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_valid;              // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:out_valid -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_sink_valid
	wire  [124:0] comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_data;               // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:out_data -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_sink_data
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_ready;              // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_sink_ready -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:out_ready
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket;      // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:out_startofpacket -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_sink_startofpacket
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket;        // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo:out_endofpacket -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:cp_valid
	wire  [123:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                              // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [48:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:cp_endofpacket
	wire   [31:0] comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_readdata;                     // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_readdata -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_readdata
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_waitrequest;                  // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_waitrequest -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_waitrequest
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_debugaccess;                  // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_debugaccess -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_debugaccess
	wire   [31:0] comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_address;                      // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_address -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_address
	wire    [3:0] comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_byteenable;                   // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_byteenable -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_byteenable
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_read;                         // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_read -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_read
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_readdatavalid;                // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_readdatavalid -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_readdatavalid
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_lock;                         // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_lock -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_lock
	wire   [31:0] comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_writedata;                    // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_writedata -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_writedata
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_write;                        // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_write -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_write
	wire    [2:0] comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_burstcount;                   // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:m0_burstcount -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_translator:uav_burstcount
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_valid;                 // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_source_valid -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:in_valid
	wire  [124:0] comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_data;                  // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_source_data -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:in_data
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_ready;                 // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:in_ready -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_source_ready
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_startofpacket;         // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_source_startofpacket -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:in_startofpacket
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_endofpacket;           // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_source_endofpacket -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:in_endofpacket
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_valid;              // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:out_valid -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_sink_valid
	wire  [124:0] comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_data;               // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:out_data -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_sink_data
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_ready;              // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_sink_ready -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:out_ready
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket;      // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:out_startofpacket -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_sink_startofpacket
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket;        // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo:out_endofpacket -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:cp_valid
	wire  [123:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                              // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [48:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:cp_endofpacket
	wire   [63:0] ddr2_address_span_extender_cntl_agent_m0_readdata;                                  // ddr2_address_span_extender_cntl_translator:uav_readdata -> ddr2_address_span_extender_cntl_agent:m0_readdata
	wire          ddr2_address_span_extender_cntl_agent_m0_waitrequest;                               // ddr2_address_span_extender_cntl_translator:uav_waitrequest -> ddr2_address_span_extender_cntl_agent:m0_waitrequest
	wire          ddr2_address_span_extender_cntl_agent_m0_debugaccess;                               // ddr2_address_span_extender_cntl_agent:m0_debugaccess -> ddr2_address_span_extender_cntl_translator:uav_debugaccess
	wire   [31:0] ddr2_address_span_extender_cntl_agent_m0_address;                                   // ddr2_address_span_extender_cntl_agent:m0_address -> ddr2_address_span_extender_cntl_translator:uav_address
	wire    [7:0] ddr2_address_span_extender_cntl_agent_m0_byteenable;                                // ddr2_address_span_extender_cntl_agent:m0_byteenable -> ddr2_address_span_extender_cntl_translator:uav_byteenable
	wire          ddr2_address_span_extender_cntl_agent_m0_read;                                      // ddr2_address_span_extender_cntl_agent:m0_read -> ddr2_address_span_extender_cntl_translator:uav_read
	wire          ddr2_address_span_extender_cntl_agent_m0_readdatavalid;                             // ddr2_address_span_extender_cntl_translator:uav_readdatavalid -> ddr2_address_span_extender_cntl_agent:m0_readdatavalid
	wire          ddr2_address_span_extender_cntl_agent_m0_lock;                                      // ddr2_address_span_extender_cntl_agent:m0_lock -> ddr2_address_span_extender_cntl_translator:uav_lock
	wire   [63:0] ddr2_address_span_extender_cntl_agent_m0_writedata;                                 // ddr2_address_span_extender_cntl_agent:m0_writedata -> ddr2_address_span_extender_cntl_translator:uav_writedata
	wire          ddr2_address_span_extender_cntl_agent_m0_write;                                     // ddr2_address_span_extender_cntl_agent:m0_write -> ddr2_address_span_extender_cntl_translator:uav_write
	wire    [3:0] ddr2_address_span_extender_cntl_agent_m0_burstcount;                                // ddr2_address_span_extender_cntl_agent:m0_burstcount -> ddr2_address_span_extender_cntl_translator:uav_burstcount
	wire          ddr2_address_span_extender_cntl_agent_rf_source_valid;                              // ddr2_address_span_extender_cntl_agent:rf_source_valid -> ddr2_address_span_extender_cntl_agent_rsp_fifo:in_valid
	wire  [160:0] ddr2_address_span_extender_cntl_agent_rf_source_data;                               // ddr2_address_span_extender_cntl_agent:rf_source_data -> ddr2_address_span_extender_cntl_agent_rsp_fifo:in_data
	wire          ddr2_address_span_extender_cntl_agent_rf_source_ready;                              // ddr2_address_span_extender_cntl_agent_rsp_fifo:in_ready -> ddr2_address_span_extender_cntl_agent:rf_source_ready
	wire          ddr2_address_span_extender_cntl_agent_rf_source_startofpacket;                      // ddr2_address_span_extender_cntl_agent:rf_source_startofpacket -> ddr2_address_span_extender_cntl_agent_rsp_fifo:in_startofpacket
	wire          ddr2_address_span_extender_cntl_agent_rf_source_endofpacket;                        // ddr2_address_span_extender_cntl_agent:rf_source_endofpacket -> ddr2_address_span_extender_cntl_agent_rsp_fifo:in_endofpacket
	wire          ddr2_address_span_extender_cntl_agent_rsp_fifo_out_valid;                           // ddr2_address_span_extender_cntl_agent_rsp_fifo:out_valid -> ddr2_address_span_extender_cntl_agent:rf_sink_valid
	wire  [160:0] ddr2_address_span_extender_cntl_agent_rsp_fifo_out_data;                            // ddr2_address_span_extender_cntl_agent_rsp_fifo:out_data -> ddr2_address_span_extender_cntl_agent:rf_sink_data
	wire          ddr2_address_span_extender_cntl_agent_rsp_fifo_out_ready;                           // ddr2_address_span_extender_cntl_agent:rf_sink_ready -> ddr2_address_span_extender_cntl_agent_rsp_fifo:out_ready
	wire          ddr2_address_span_extender_cntl_agent_rsp_fifo_out_startofpacket;                   // ddr2_address_span_extender_cntl_agent_rsp_fifo:out_startofpacket -> ddr2_address_span_extender_cntl_agent:rf_sink_startofpacket
	wire          ddr2_address_span_extender_cntl_agent_rsp_fifo_out_endofpacket;                     // ddr2_address_span_extender_cntl_agent_rsp_fifo:out_endofpacket -> ddr2_address_span_extender_cntl_agent:rf_sink_endofpacket
	wire          ddr2_address_span_extender_cntl_agent_rdata_fifo_src_valid;                         // ddr2_address_span_extender_cntl_agent:rdata_fifo_src_valid -> ddr2_address_span_extender_cntl_agent_rdata_fifo:in_valid
	wire   [65:0] ddr2_address_span_extender_cntl_agent_rdata_fifo_src_data;                          // ddr2_address_span_extender_cntl_agent:rdata_fifo_src_data -> ddr2_address_span_extender_cntl_agent_rdata_fifo:in_data
	wire          ddr2_address_span_extender_cntl_agent_rdata_fifo_src_ready;                         // ddr2_address_span_extender_cntl_agent_rdata_fifo:in_ready -> ddr2_address_span_extender_cntl_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                         // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                                      // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                                      // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_control_slave_agent_m0_address;                                          // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                       // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                             // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                                    // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                             // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                        // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                            // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                       // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                                     // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [124:0] sysid_qsys_control_slave_agent_rf_source_data;                                      // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                                     // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                             // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                               // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                  // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [124:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                   // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                  // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                          // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                            // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [123:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                              // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [48:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire   [31:0] dma_comm_1_left_csr_agent_m0_readdata;                                              // dma_comm_1_left_csr_translator:uav_readdata -> dma_comm_1_left_csr_agent:m0_readdata
	wire          dma_comm_1_left_csr_agent_m0_waitrequest;                                           // dma_comm_1_left_csr_translator:uav_waitrequest -> dma_comm_1_left_csr_agent:m0_waitrequest
	wire          dma_comm_1_left_csr_agent_m0_debugaccess;                                           // dma_comm_1_left_csr_agent:m0_debugaccess -> dma_comm_1_left_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_1_left_csr_agent_m0_address;                                               // dma_comm_1_left_csr_agent:m0_address -> dma_comm_1_left_csr_translator:uav_address
	wire    [3:0] dma_comm_1_left_csr_agent_m0_byteenable;                                            // dma_comm_1_left_csr_agent:m0_byteenable -> dma_comm_1_left_csr_translator:uav_byteenable
	wire          dma_comm_1_left_csr_agent_m0_read;                                                  // dma_comm_1_left_csr_agent:m0_read -> dma_comm_1_left_csr_translator:uav_read
	wire          dma_comm_1_left_csr_agent_m0_readdatavalid;                                         // dma_comm_1_left_csr_translator:uav_readdatavalid -> dma_comm_1_left_csr_agent:m0_readdatavalid
	wire          dma_comm_1_left_csr_agent_m0_lock;                                                  // dma_comm_1_left_csr_agent:m0_lock -> dma_comm_1_left_csr_translator:uav_lock
	wire   [31:0] dma_comm_1_left_csr_agent_m0_writedata;                                             // dma_comm_1_left_csr_agent:m0_writedata -> dma_comm_1_left_csr_translator:uav_writedata
	wire          dma_comm_1_left_csr_agent_m0_write;                                                 // dma_comm_1_left_csr_agent:m0_write -> dma_comm_1_left_csr_translator:uav_write
	wire    [2:0] dma_comm_1_left_csr_agent_m0_burstcount;                                            // dma_comm_1_left_csr_agent:m0_burstcount -> dma_comm_1_left_csr_translator:uav_burstcount
	wire          dma_comm_1_left_csr_agent_rf_source_valid;                                          // dma_comm_1_left_csr_agent:rf_source_valid -> dma_comm_1_left_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_1_left_csr_agent_rf_source_data;                                           // dma_comm_1_left_csr_agent:rf_source_data -> dma_comm_1_left_csr_agent_rsp_fifo:in_data
	wire          dma_comm_1_left_csr_agent_rf_source_ready;                                          // dma_comm_1_left_csr_agent_rsp_fifo:in_ready -> dma_comm_1_left_csr_agent:rf_source_ready
	wire          dma_comm_1_left_csr_agent_rf_source_startofpacket;                                  // dma_comm_1_left_csr_agent:rf_source_startofpacket -> dma_comm_1_left_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_1_left_csr_agent_rf_source_endofpacket;                                    // dma_comm_1_left_csr_agent:rf_source_endofpacket -> dma_comm_1_left_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_1_left_csr_agent_rsp_fifo_out_valid;                                       // dma_comm_1_left_csr_agent_rsp_fifo:out_valid -> dma_comm_1_left_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_1_left_csr_agent_rsp_fifo_out_data;                                        // dma_comm_1_left_csr_agent_rsp_fifo:out_data -> dma_comm_1_left_csr_agent:rf_sink_data
	wire          dma_comm_1_left_csr_agent_rsp_fifo_out_ready;                                       // dma_comm_1_left_csr_agent:rf_sink_ready -> dma_comm_1_left_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_1_left_csr_agent_rsp_fifo_out_startofpacket;                               // dma_comm_1_left_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_1_left_csr_agent:rf_sink_startofpacket
	wire          dma_comm_1_left_csr_agent_rsp_fifo_out_endofpacket;                                 // dma_comm_1_left_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_1_left_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> dma_comm_1_left_csr_agent:cp_valid
	wire  [123:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> dma_comm_1_left_csr_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                              // dma_comm_1_left_csr_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [48:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> dma_comm_1_left_csr_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> dma_comm_1_left_csr_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> dma_comm_1_left_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_1_right_csr_agent_m0_readdata;                                             // dma_comm_1_right_csr_translator:uav_readdata -> dma_comm_1_right_csr_agent:m0_readdata
	wire          dma_comm_1_right_csr_agent_m0_waitrequest;                                          // dma_comm_1_right_csr_translator:uav_waitrequest -> dma_comm_1_right_csr_agent:m0_waitrequest
	wire          dma_comm_1_right_csr_agent_m0_debugaccess;                                          // dma_comm_1_right_csr_agent:m0_debugaccess -> dma_comm_1_right_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_1_right_csr_agent_m0_address;                                              // dma_comm_1_right_csr_agent:m0_address -> dma_comm_1_right_csr_translator:uav_address
	wire    [3:0] dma_comm_1_right_csr_agent_m0_byteenable;                                           // dma_comm_1_right_csr_agent:m0_byteenable -> dma_comm_1_right_csr_translator:uav_byteenable
	wire          dma_comm_1_right_csr_agent_m0_read;                                                 // dma_comm_1_right_csr_agent:m0_read -> dma_comm_1_right_csr_translator:uav_read
	wire          dma_comm_1_right_csr_agent_m0_readdatavalid;                                        // dma_comm_1_right_csr_translator:uav_readdatavalid -> dma_comm_1_right_csr_agent:m0_readdatavalid
	wire          dma_comm_1_right_csr_agent_m0_lock;                                                 // dma_comm_1_right_csr_agent:m0_lock -> dma_comm_1_right_csr_translator:uav_lock
	wire   [31:0] dma_comm_1_right_csr_agent_m0_writedata;                                            // dma_comm_1_right_csr_agent:m0_writedata -> dma_comm_1_right_csr_translator:uav_writedata
	wire          dma_comm_1_right_csr_agent_m0_write;                                                // dma_comm_1_right_csr_agent:m0_write -> dma_comm_1_right_csr_translator:uav_write
	wire    [2:0] dma_comm_1_right_csr_agent_m0_burstcount;                                           // dma_comm_1_right_csr_agent:m0_burstcount -> dma_comm_1_right_csr_translator:uav_burstcount
	wire          dma_comm_1_right_csr_agent_rf_source_valid;                                         // dma_comm_1_right_csr_agent:rf_source_valid -> dma_comm_1_right_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_1_right_csr_agent_rf_source_data;                                          // dma_comm_1_right_csr_agent:rf_source_data -> dma_comm_1_right_csr_agent_rsp_fifo:in_data
	wire          dma_comm_1_right_csr_agent_rf_source_ready;                                         // dma_comm_1_right_csr_agent_rsp_fifo:in_ready -> dma_comm_1_right_csr_agent:rf_source_ready
	wire          dma_comm_1_right_csr_agent_rf_source_startofpacket;                                 // dma_comm_1_right_csr_agent:rf_source_startofpacket -> dma_comm_1_right_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_1_right_csr_agent_rf_source_endofpacket;                                   // dma_comm_1_right_csr_agent:rf_source_endofpacket -> dma_comm_1_right_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_1_right_csr_agent_rsp_fifo_out_valid;                                      // dma_comm_1_right_csr_agent_rsp_fifo:out_valid -> dma_comm_1_right_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_1_right_csr_agent_rsp_fifo_out_data;                                       // dma_comm_1_right_csr_agent_rsp_fifo:out_data -> dma_comm_1_right_csr_agent:rf_sink_data
	wire          dma_comm_1_right_csr_agent_rsp_fifo_out_ready;                                      // dma_comm_1_right_csr_agent:rf_sink_ready -> dma_comm_1_right_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_1_right_csr_agent_rsp_fifo_out_startofpacket;                              // dma_comm_1_right_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_1_right_csr_agent:rf_sink_startofpacket
	wire          dma_comm_1_right_csr_agent_rsp_fifo_out_endofpacket;                                // dma_comm_1_right_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_1_right_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> dma_comm_1_right_csr_agent:cp_valid
	wire  [123:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> dma_comm_1_right_csr_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                              // dma_comm_1_right_csr_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [48:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> dma_comm_1_right_csr_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> dma_comm_1_right_csr_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> dma_comm_1_right_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_2_left_csr_agent_m0_readdata;                                              // dma_comm_2_left_csr_translator:uav_readdata -> dma_comm_2_left_csr_agent:m0_readdata
	wire          dma_comm_2_left_csr_agent_m0_waitrequest;                                           // dma_comm_2_left_csr_translator:uav_waitrequest -> dma_comm_2_left_csr_agent:m0_waitrequest
	wire          dma_comm_2_left_csr_agent_m0_debugaccess;                                           // dma_comm_2_left_csr_agent:m0_debugaccess -> dma_comm_2_left_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_2_left_csr_agent_m0_address;                                               // dma_comm_2_left_csr_agent:m0_address -> dma_comm_2_left_csr_translator:uav_address
	wire    [3:0] dma_comm_2_left_csr_agent_m0_byteenable;                                            // dma_comm_2_left_csr_agent:m0_byteenable -> dma_comm_2_left_csr_translator:uav_byteenable
	wire          dma_comm_2_left_csr_agent_m0_read;                                                  // dma_comm_2_left_csr_agent:m0_read -> dma_comm_2_left_csr_translator:uav_read
	wire          dma_comm_2_left_csr_agent_m0_readdatavalid;                                         // dma_comm_2_left_csr_translator:uav_readdatavalid -> dma_comm_2_left_csr_agent:m0_readdatavalid
	wire          dma_comm_2_left_csr_agent_m0_lock;                                                  // dma_comm_2_left_csr_agent:m0_lock -> dma_comm_2_left_csr_translator:uav_lock
	wire   [31:0] dma_comm_2_left_csr_agent_m0_writedata;                                             // dma_comm_2_left_csr_agent:m0_writedata -> dma_comm_2_left_csr_translator:uav_writedata
	wire          dma_comm_2_left_csr_agent_m0_write;                                                 // dma_comm_2_left_csr_agent:m0_write -> dma_comm_2_left_csr_translator:uav_write
	wire    [2:0] dma_comm_2_left_csr_agent_m0_burstcount;                                            // dma_comm_2_left_csr_agent:m0_burstcount -> dma_comm_2_left_csr_translator:uav_burstcount
	wire          dma_comm_2_left_csr_agent_rf_source_valid;                                          // dma_comm_2_left_csr_agent:rf_source_valid -> dma_comm_2_left_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_2_left_csr_agent_rf_source_data;                                           // dma_comm_2_left_csr_agent:rf_source_data -> dma_comm_2_left_csr_agent_rsp_fifo:in_data
	wire          dma_comm_2_left_csr_agent_rf_source_ready;                                          // dma_comm_2_left_csr_agent_rsp_fifo:in_ready -> dma_comm_2_left_csr_agent:rf_source_ready
	wire          dma_comm_2_left_csr_agent_rf_source_startofpacket;                                  // dma_comm_2_left_csr_agent:rf_source_startofpacket -> dma_comm_2_left_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_2_left_csr_agent_rf_source_endofpacket;                                    // dma_comm_2_left_csr_agent:rf_source_endofpacket -> dma_comm_2_left_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_2_left_csr_agent_rsp_fifo_out_valid;                                       // dma_comm_2_left_csr_agent_rsp_fifo:out_valid -> dma_comm_2_left_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_2_left_csr_agent_rsp_fifo_out_data;                                        // dma_comm_2_left_csr_agent_rsp_fifo:out_data -> dma_comm_2_left_csr_agent:rf_sink_data
	wire          dma_comm_2_left_csr_agent_rsp_fifo_out_ready;                                       // dma_comm_2_left_csr_agent:rf_sink_ready -> dma_comm_2_left_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_2_left_csr_agent_rsp_fifo_out_startofpacket;                               // dma_comm_2_left_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_2_left_csr_agent:rf_sink_startofpacket
	wire          dma_comm_2_left_csr_agent_rsp_fifo_out_endofpacket;                                 // dma_comm_2_left_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_2_left_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> dma_comm_2_left_csr_agent:cp_valid
	wire  [123:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> dma_comm_2_left_csr_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                              // dma_comm_2_left_csr_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [48:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> dma_comm_2_left_csr_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> dma_comm_2_left_csr_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> dma_comm_2_left_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_2_right_csr_agent_m0_readdata;                                             // dma_comm_2_right_csr_translator:uav_readdata -> dma_comm_2_right_csr_agent:m0_readdata
	wire          dma_comm_2_right_csr_agent_m0_waitrequest;                                          // dma_comm_2_right_csr_translator:uav_waitrequest -> dma_comm_2_right_csr_agent:m0_waitrequest
	wire          dma_comm_2_right_csr_agent_m0_debugaccess;                                          // dma_comm_2_right_csr_agent:m0_debugaccess -> dma_comm_2_right_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_2_right_csr_agent_m0_address;                                              // dma_comm_2_right_csr_agent:m0_address -> dma_comm_2_right_csr_translator:uav_address
	wire    [3:0] dma_comm_2_right_csr_agent_m0_byteenable;                                           // dma_comm_2_right_csr_agent:m0_byteenable -> dma_comm_2_right_csr_translator:uav_byteenable
	wire          dma_comm_2_right_csr_agent_m0_read;                                                 // dma_comm_2_right_csr_agent:m0_read -> dma_comm_2_right_csr_translator:uav_read
	wire          dma_comm_2_right_csr_agent_m0_readdatavalid;                                        // dma_comm_2_right_csr_translator:uav_readdatavalid -> dma_comm_2_right_csr_agent:m0_readdatavalid
	wire          dma_comm_2_right_csr_agent_m0_lock;                                                 // dma_comm_2_right_csr_agent:m0_lock -> dma_comm_2_right_csr_translator:uav_lock
	wire   [31:0] dma_comm_2_right_csr_agent_m0_writedata;                                            // dma_comm_2_right_csr_agent:m0_writedata -> dma_comm_2_right_csr_translator:uav_writedata
	wire          dma_comm_2_right_csr_agent_m0_write;                                                // dma_comm_2_right_csr_agent:m0_write -> dma_comm_2_right_csr_translator:uav_write
	wire    [2:0] dma_comm_2_right_csr_agent_m0_burstcount;                                           // dma_comm_2_right_csr_agent:m0_burstcount -> dma_comm_2_right_csr_translator:uav_burstcount
	wire          dma_comm_2_right_csr_agent_rf_source_valid;                                         // dma_comm_2_right_csr_agent:rf_source_valid -> dma_comm_2_right_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_2_right_csr_agent_rf_source_data;                                          // dma_comm_2_right_csr_agent:rf_source_data -> dma_comm_2_right_csr_agent_rsp_fifo:in_data
	wire          dma_comm_2_right_csr_agent_rf_source_ready;                                         // dma_comm_2_right_csr_agent_rsp_fifo:in_ready -> dma_comm_2_right_csr_agent:rf_source_ready
	wire          dma_comm_2_right_csr_agent_rf_source_startofpacket;                                 // dma_comm_2_right_csr_agent:rf_source_startofpacket -> dma_comm_2_right_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_2_right_csr_agent_rf_source_endofpacket;                                   // dma_comm_2_right_csr_agent:rf_source_endofpacket -> dma_comm_2_right_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_2_right_csr_agent_rsp_fifo_out_valid;                                      // dma_comm_2_right_csr_agent_rsp_fifo:out_valid -> dma_comm_2_right_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_2_right_csr_agent_rsp_fifo_out_data;                                       // dma_comm_2_right_csr_agent_rsp_fifo:out_data -> dma_comm_2_right_csr_agent:rf_sink_data
	wire          dma_comm_2_right_csr_agent_rsp_fifo_out_ready;                                      // dma_comm_2_right_csr_agent:rf_sink_ready -> dma_comm_2_right_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_2_right_csr_agent_rsp_fifo_out_startofpacket;                              // dma_comm_2_right_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_2_right_csr_agent:rf_sink_startofpacket
	wire          dma_comm_2_right_csr_agent_rsp_fifo_out_endofpacket;                                // dma_comm_2_right_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_2_right_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                              // cmd_mux_019:src_valid -> dma_comm_2_right_csr_agent:cp_valid
	wire  [123:0] cmd_mux_019_src_data;                                                               // cmd_mux_019:src_data -> dma_comm_2_right_csr_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                              // dma_comm_2_right_csr_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [48:0] cmd_mux_019_src_channel;                                                            // cmd_mux_019:src_channel -> dma_comm_2_right_csr_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                      // cmd_mux_019:src_startofpacket -> dma_comm_2_right_csr_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                        // cmd_mux_019:src_endofpacket -> dma_comm_2_right_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_3_left_csr_agent_m0_readdata;                                              // dma_comm_3_left_csr_translator:uav_readdata -> dma_comm_3_left_csr_agent:m0_readdata
	wire          dma_comm_3_left_csr_agent_m0_waitrequest;                                           // dma_comm_3_left_csr_translator:uav_waitrequest -> dma_comm_3_left_csr_agent:m0_waitrequest
	wire          dma_comm_3_left_csr_agent_m0_debugaccess;                                           // dma_comm_3_left_csr_agent:m0_debugaccess -> dma_comm_3_left_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_3_left_csr_agent_m0_address;                                               // dma_comm_3_left_csr_agent:m0_address -> dma_comm_3_left_csr_translator:uav_address
	wire    [3:0] dma_comm_3_left_csr_agent_m0_byteenable;                                            // dma_comm_3_left_csr_agent:m0_byteenable -> dma_comm_3_left_csr_translator:uav_byteenable
	wire          dma_comm_3_left_csr_agent_m0_read;                                                  // dma_comm_3_left_csr_agent:m0_read -> dma_comm_3_left_csr_translator:uav_read
	wire          dma_comm_3_left_csr_agent_m0_readdatavalid;                                         // dma_comm_3_left_csr_translator:uav_readdatavalid -> dma_comm_3_left_csr_agent:m0_readdatavalid
	wire          dma_comm_3_left_csr_agent_m0_lock;                                                  // dma_comm_3_left_csr_agent:m0_lock -> dma_comm_3_left_csr_translator:uav_lock
	wire   [31:0] dma_comm_3_left_csr_agent_m0_writedata;                                             // dma_comm_3_left_csr_agent:m0_writedata -> dma_comm_3_left_csr_translator:uav_writedata
	wire          dma_comm_3_left_csr_agent_m0_write;                                                 // dma_comm_3_left_csr_agent:m0_write -> dma_comm_3_left_csr_translator:uav_write
	wire    [2:0] dma_comm_3_left_csr_agent_m0_burstcount;                                            // dma_comm_3_left_csr_agent:m0_burstcount -> dma_comm_3_left_csr_translator:uav_burstcount
	wire          dma_comm_3_left_csr_agent_rf_source_valid;                                          // dma_comm_3_left_csr_agent:rf_source_valid -> dma_comm_3_left_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_3_left_csr_agent_rf_source_data;                                           // dma_comm_3_left_csr_agent:rf_source_data -> dma_comm_3_left_csr_agent_rsp_fifo:in_data
	wire          dma_comm_3_left_csr_agent_rf_source_ready;                                          // dma_comm_3_left_csr_agent_rsp_fifo:in_ready -> dma_comm_3_left_csr_agent:rf_source_ready
	wire          dma_comm_3_left_csr_agent_rf_source_startofpacket;                                  // dma_comm_3_left_csr_agent:rf_source_startofpacket -> dma_comm_3_left_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_3_left_csr_agent_rf_source_endofpacket;                                    // dma_comm_3_left_csr_agent:rf_source_endofpacket -> dma_comm_3_left_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_3_left_csr_agent_rsp_fifo_out_valid;                                       // dma_comm_3_left_csr_agent_rsp_fifo:out_valid -> dma_comm_3_left_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_3_left_csr_agent_rsp_fifo_out_data;                                        // dma_comm_3_left_csr_agent_rsp_fifo:out_data -> dma_comm_3_left_csr_agent:rf_sink_data
	wire          dma_comm_3_left_csr_agent_rsp_fifo_out_ready;                                       // dma_comm_3_left_csr_agent:rf_sink_ready -> dma_comm_3_left_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_3_left_csr_agent_rsp_fifo_out_startofpacket;                               // dma_comm_3_left_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_3_left_csr_agent:rf_sink_startofpacket
	wire          dma_comm_3_left_csr_agent_rsp_fifo_out_endofpacket;                                 // dma_comm_3_left_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_3_left_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                              // cmd_mux_020:src_valid -> dma_comm_3_left_csr_agent:cp_valid
	wire  [123:0] cmd_mux_020_src_data;                                                               // cmd_mux_020:src_data -> dma_comm_3_left_csr_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                              // dma_comm_3_left_csr_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [48:0] cmd_mux_020_src_channel;                                                            // cmd_mux_020:src_channel -> dma_comm_3_left_csr_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                      // cmd_mux_020:src_startofpacket -> dma_comm_3_left_csr_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                        // cmd_mux_020:src_endofpacket -> dma_comm_3_left_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_3_right_csr_agent_m0_readdata;                                             // dma_comm_3_right_csr_translator:uav_readdata -> dma_comm_3_right_csr_agent:m0_readdata
	wire          dma_comm_3_right_csr_agent_m0_waitrequest;                                          // dma_comm_3_right_csr_translator:uav_waitrequest -> dma_comm_3_right_csr_agent:m0_waitrequest
	wire          dma_comm_3_right_csr_agent_m0_debugaccess;                                          // dma_comm_3_right_csr_agent:m0_debugaccess -> dma_comm_3_right_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_3_right_csr_agent_m0_address;                                              // dma_comm_3_right_csr_agent:m0_address -> dma_comm_3_right_csr_translator:uav_address
	wire    [3:0] dma_comm_3_right_csr_agent_m0_byteenable;                                           // dma_comm_3_right_csr_agent:m0_byteenable -> dma_comm_3_right_csr_translator:uav_byteenable
	wire          dma_comm_3_right_csr_agent_m0_read;                                                 // dma_comm_3_right_csr_agent:m0_read -> dma_comm_3_right_csr_translator:uav_read
	wire          dma_comm_3_right_csr_agent_m0_readdatavalid;                                        // dma_comm_3_right_csr_translator:uav_readdatavalid -> dma_comm_3_right_csr_agent:m0_readdatavalid
	wire          dma_comm_3_right_csr_agent_m0_lock;                                                 // dma_comm_3_right_csr_agent:m0_lock -> dma_comm_3_right_csr_translator:uav_lock
	wire   [31:0] dma_comm_3_right_csr_agent_m0_writedata;                                            // dma_comm_3_right_csr_agent:m0_writedata -> dma_comm_3_right_csr_translator:uav_writedata
	wire          dma_comm_3_right_csr_agent_m0_write;                                                // dma_comm_3_right_csr_agent:m0_write -> dma_comm_3_right_csr_translator:uav_write
	wire    [2:0] dma_comm_3_right_csr_agent_m0_burstcount;                                           // dma_comm_3_right_csr_agent:m0_burstcount -> dma_comm_3_right_csr_translator:uav_burstcount
	wire          dma_comm_3_right_csr_agent_rf_source_valid;                                         // dma_comm_3_right_csr_agent:rf_source_valid -> dma_comm_3_right_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_3_right_csr_agent_rf_source_data;                                          // dma_comm_3_right_csr_agent:rf_source_data -> dma_comm_3_right_csr_agent_rsp_fifo:in_data
	wire          dma_comm_3_right_csr_agent_rf_source_ready;                                         // dma_comm_3_right_csr_agent_rsp_fifo:in_ready -> dma_comm_3_right_csr_agent:rf_source_ready
	wire          dma_comm_3_right_csr_agent_rf_source_startofpacket;                                 // dma_comm_3_right_csr_agent:rf_source_startofpacket -> dma_comm_3_right_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_3_right_csr_agent_rf_source_endofpacket;                                   // dma_comm_3_right_csr_agent:rf_source_endofpacket -> dma_comm_3_right_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_3_right_csr_agent_rsp_fifo_out_valid;                                      // dma_comm_3_right_csr_agent_rsp_fifo:out_valid -> dma_comm_3_right_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_3_right_csr_agent_rsp_fifo_out_data;                                       // dma_comm_3_right_csr_agent_rsp_fifo:out_data -> dma_comm_3_right_csr_agent:rf_sink_data
	wire          dma_comm_3_right_csr_agent_rsp_fifo_out_ready;                                      // dma_comm_3_right_csr_agent:rf_sink_ready -> dma_comm_3_right_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_3_right_csr_agent_rsp_fifo_out_startofpacket;                              // dma_comm_3_right_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_3_right_csr_agent:rf_sink_startofpacket
	wire          dma_comm_3_right_csr_agent_rsp_fifo_out_endofpacket;                                // dma_comm_3_right_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_3_right_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                              // cmd_mux_021:src_valid -> dma_comm_3_right_csr_agent:cp_valid
	wire  [123:0] cmd_mux_021_src_data;                                                               // cmd_mux_021:src_data -> dma_comm_3_right_csr_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                              // dma_comm_3_right_csr_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [48:0] cmd_mux_021_src_channel;                                                            // cmd_mux_021:src_channel -> dma_comm_3_right_csr_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                      // cmd_mux_021:src_startofpacket -> dma_comm_3_right_csr_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                        // cmd_mux_021:src_endofpacket -> dma_comm_3_right_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_4_left_csr_agent_m0_readdata;                                              // dma_comm_4_left_csr_translator:uav_readdata -> dma_comm_4_left_csr_agent:m0_readdata
	wire          dma_comm_4_left_csr_agent_m0_waitrequest;                                           // dma_comm_4_left_csr_translator:uav_waitrequest -> dma_comm_4_left_csr_agent:m0_waitrequest
	wire          dma_comm_4_left_csr_agent_m0_debugaccess;                                           // dma_comm_4_left_csr_agent:m0_debugaccess -> dma_comm_4_left_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_4_left_csr_agent_m0_address;                                               // dma_comm_4_left_csr_agent:m0_address -> dma_comm_4_left_csr_translator:uav_address
	wire    [3:0] dma_comm_4_left_csr_agent_m0_byteenable;                                            // dma_comm_4_left_csr_agent:m0_byteenable -> dma_comm_4_left_csr_translator:uav_byteenable
	wire          dma_comm_4_left_csr_agent_m0_read;                                                  // dma_comm_4_left_csr_agent:m0_read -> dma_comm_4_left_csr_translator:uav_read
	wire          dma_comm_4_left_csr_agent_m0_readdatavalid;                                         // dma_comm_4_left_csr_translator:uav_readdatavalid -> dma_comm_4_left_csr_agent:m0_readdatavalid
	wire          dma_comm_4_left_csr_agent_m0_lock;                                                  // dma_comm_4_left_csr_agent:m0_lock -> dma_comm_4_left_csr_translator:uav_lock
	wire   [31:0] dma_comm_4_left_csr_agent_m0_writedata;                                             // dma_comm_4_left_csr_agent:m0_writedata -> dma_comm_4_left_csr_translator:uav_writedata
	wire          dma_comm_4_left_csr_agent_m0_write;                                                 // dma_comm_4_left_csr_agent:m0_write -> dma_comm_4_left_csr_translator:uav_write
	wire    [2:0] dma_comm_4_left_csr_agent_m0_burstcount;                                            // dma_comm_4_left_csr_agent:m0_burstcount -> dma_comm_4_left_csr_translator:uav_burstcount
	wire          dma_comm_4_left_csr_agent_rf_source_valid;                                          // dma_comm_4_left_csr_agent:rf_source_valid -> dma_comm_4_left_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_4_left_csr_agent_rf_source_data;                                           // dma_comm_4_left_csr_agent:rf_source_data -> dma_comm_4_left_csr_agent_rsp_fifo:in_data
	wire          dma_comm_4_left_csr_agent_rf_source_ready;                                          // dma_comm_4_left_csr_agent_rsp_fifo:in_ready -> dma_comm_4_left_csr_agent:rf_source_ready
	wire          dma_comm_4_left_csr_agent_rf_source_startofpacket;                                  // dma_comm_4_left_csr_agent:rf_source_startofpacket -> dma_comm_4_left_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_4_left_csr_agent_rf_source_endofpacket;                                    // dma_comm_4_left_csr_agent:rf_source_endofpacket -> dma_comm_4_left_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_4_left_csr_agent_rsp_fifo_out_valid;                                       // dma_comm_4_left_csr_agent_rsp_fifo:out_valid -> dma_comm_4_left_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_4_left_csr_agent_rsp_fifo_out_data;                                        // dma_comm_4_left_csr_agent_rsp_fifo:out_data -> dma_comm_4_left_csr_agent:rf_sink_data
	wire          dma_comm_4_left_csr_agent_rsp_fifo_out_ready;                                       // dma_comm_4_left_csr_agent:rf_sink_ready -> dma_comm_4_left_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_4_left_csr_agent_rsp_fifo_out_startofpacket;                               // dma_comm_4_left_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_4_left_csr_agent:rf_sink_startofpacket
	wire          dma_comm_4_left_csr_agent_rsp_fifo_out_endofpacket;                                 // dma_comm_4_left_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_4_left_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                              // cmd_mux_022:src_valid -> dma_comm_4_left_csr_agent:cp_valid
	wire  [123:0] cmd_mux_022_src_data;                                                               // cmd_mux_022:src_data -> dma_comm_4_left_csr_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                              // dma_comm_4_left_csr_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [48:0] cmd_mux_022_src_channel;                                                            // cmd_mux_022:src_channel -> dma_comm_4_left_csr_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                      // cmd_mux_022:src_startofpacket -> dma_comm_4_left_csr_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                        // cmd_mux_022:src_endofpacket -> dma_comm_4_left_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_4_right_csr_agent_m0_readdata;                                             // dma_comm_4_right_csr_translator:uav_readdata -> dma_comm_4_right_csr_agent:m0_readdata
	wire          dma_comm_4_right_csr_agent_m0_waitrequest;                                          // dma_comm_4_right_csr_translator:uav_waitrequest -> dma_comm_4_right_csr_agent:m0_waitrequest
	wire          dma_comm_4_right_csr_agent_m0_debugaccess;                                          // dma_comm_4_right_csr_agent:m0_debugaccess -> dma_comm_4_right_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_4_right_csr_agent_m0_address;                                              // dma_comm_4_right_csr_agent:m0_address -> dma_comm_4_right_csr_translator:uav_address
	wire    [3:0] dma_comm_4_right_csr_agent_m0_byteenable;                                           // dma_comm_4_right_csr_agent:m0_byteenable -> dma_comm_4_right_csr_translator:uav_byteenable
	wire          dma_comm_4_right_csr_agent_m0_read;                                                 // dma_comm_4_right_csr_agent:m0_read -> dma_comm_4_right_csr_translator:uav_read
	wire          dma_comm_4_right_csr_agent_m0_readdatavalid;                                        // dma_comm_4_right_csr_translator:uav_readdatavalid -> dma_comm_4_right_csr_agent:m0_readdatavalid
	wire          dma_comm_4_right_csr_agent_m0_lock;                                                 // dma_comm_4_right_csr_agent:m0_lock -> dma_comm_4_right_csr_translator:uav_lock
	wire   [31:0] dma_comm_4_right_csr_agent_m0_writedata;                                            // dma_comm_4_right_csr_agent:m0_writedata -> dma_comm_4_right_csr_translator:uav_writedata
	wire          dma_comm_4_right_csr_agent_m0_write;                                                // dma_comm_4_right_csr_agent:m0_write -> dma_comm_4_right_csr_translator:uav_write
	wire    [2:0] dma_comm_4_right_csr_agent_m0_burstcount;                                           // dma_comm_4_right_csr_agent:m0_burstcount -> dma_comm_4_right_csr_translator:uav_burstcount
	wire          dma_comm_4_right_csr_agent_rf_source_valid;                                         // dma_comm_4_right_csr_agent:rf_source_valid -> dma_comm_4_right_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_4_right_csr_agent_rf_source_data;                                          // dma_comm_4_right_csr_agent:rf_source_data -> dma_comm_4_right_csr_agent_rsp_fifo:in_data
	wire          dma_comm_4_right_csr_agent_rf_source_ready;                                         // dma_comm_4_right_csr_agent_rsp_fifo:in_ready -> dma_comm_4_right_csr_agent:rf_source_ready
	wire          dma_comm_4_right_csr_agent_rf_source_startofpacket;                                 // dma_comm_4_right_csr_agent:rf_source_startofpacket -> dma_comm_4_right_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_4_right_csr_agent_rf_source_endofpacket;                                   // dma_comm_4_right_csr_agent:rf_source_endofpacket -> dma_comm_4_right_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_4_right_csr_agent_rsp_fifo_out_valid;                                      // dma_comm_4_right_csr_agent_rsp_fifo:out_valid -> dma_comm_4_right_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_4_right_csr_agent_rsp_fifo_out_data;                                       // dma_comm_4_right_csr_agent_rsp_fifo:out_data -> dma_comm_4_right_csr_agent:rf_sink_data
	wire          dma_comm_4_right_csr_agent_rsp_fifo_out_ready;                                      // dma_comm_4_right_csr_agent:rf_sink_ready -> dma_comm_4_right_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_4_right_csr_agent_rsp_fifo_out_startofpacket;                              // dma_comm_4_right_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_4_right_csr_agent:rf_sink_startofpacket
	wire          dma_comm_4_right_csr_agent_rsp_fifo_out_endofpacket;                                // dma_comm_4_right_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_4_right_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                              // cmd_mux_023:src_valid -> dma_comm_4_right_csr_agent:cp_valid
	wire  [123:0] cmd_mux_023_src_data;                                                               // cmd_mux_023:src_data -> dma_comm_4_right_csr_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                              // dma_comm_4_right_csr_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [48:0] cmd_mux_023_src_channel;                                                            // cmd_mux_023:src_channel -> dma_comm_4_right_csr_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                      // cmd_mux_023:src_startofpacket -> dma_comm_4_right_csr_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                        // cmd_mux_023:src_endofpacket -> dma_comm_4_right_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_5_left_csr_agent_m0_readdata;                                              // dma_comm_5_left_csr_translator:uav_readdata -> dma_comm_5_left_csr_agent:m0_readdata
	wire          dma_comm_5_left_csr_agent_m0_waitrequest;                                           // dma_comm_5_left_csr_translator:uav_waitrequest -> dma_comm_5_left_csr_agent:m0_waitrequest
	wire          dma_comm_5_left_csr_agent_m0_debugaccess;                                           // dma_comm_5_left_csr_agent:m0_debugaccess -> dma_comm_5_left_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_5_left_csr_agent_m0_address;                                               // dma_comm_5_left_csr_agent:m0_address -> dma_comm_5_left_csr_translator:uav_address
	wire    [3:0] dma_comm_5_left_csr_agent_m0_byteenable;                                            // dma_comm_5_left_csr_agent:m0_byteenable -> dma_comm_5_left_csr_translator:uav_byteenable
	wire          dma_comm_5_left_csr_agent_m0_read;                                                  // dma_comm_5_left_csr_agent:m0_read -> dma_comm_5_left_csr_translator:uav_read
	wire          dma_comm_5_left_csr_agent_m0_readdatavalid;                                         // dma_comm_5_left_csr_translator:uav_readdatavalid -> dma_comm_5_left_csr_agent:m0_readdatavalid
	wire          dma_comm_5_left_csr_agent_m0_lock;                                                  // dma_comm_5_left_csr_agent:m0_lock -> dma_comm_5_left_csr_translator:uav_lock
	wire   [31:0] dma_comm_5_left_csr_agent_m0_writedata;                                             // dma_comm_5_left_csr_agent:m0_writedata -> dma_comm_5_left_csr_translator:uav_writedata
	wire          dma_comm_5_left_csr_agent_m0_write;                                                 // dma_comm_5_left_csr_agent:m0_write -> dma_comm_5_left_csr_translator:uav_write
	wire    [2:0] dma_comm_5_left_csr_agent_m0_burstcount;                                            // dma_comm_5_left_csr_agent:m0_burstcount -> dma_comm_5_left_csr_translator:uav_burstcount
	wire          dma_comm_5_left_csr_agent_rf_source_valid;                                          // dma_comm_5_left_csr_agent:rf_source_valid -> dma_comm_5_left_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_5_left_csr_agent_rf_source_data;                                           // dma_comm_5_left_csr_agent:rf_source_data -> dma_comm_5_left_csr_agent_rsp_fifo:in_data
	wire          dma_comm_5_left_csr_agent_rf_source_ready;                                          // dma_comm_5_left_csr_agent_rsp_fifo:in_ready -> dma_comm_5_left_csr_agent:rf_source_ready
	wire          dma_comm_5_left_csr_agent_rf_source_startofpacket;                                  // dma_comm_5_left_csr_agent:rf_source_startofpacket -> dma_comm_5_left_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_5_left_csr_agent_rf_source_endofpacket;                                    // dma_comm_5_left_csr_agent:rf_source_endofpacket -> dma_comm_5_left_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_5_left_csr_agent_rsp_fifo_out_valid;                                       // dma_comm_5_left_csr_agent_rsp_fifo:out_valid -> dma_comm_5_left_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_5_left_csr_agent_rsp_fifo_out_data;                                        // dma_comm_5_left_csr_agent_rsp_fifo:out_data -> dma_comm_5_left_csr_agent:rf_sink_data
	wire          dma_comm_5_left_csr_agent_rsp_fifo_out_ready;                                       // dma_comm_5_left_csr_agent:rf_sink_ready -> dma_comm_5_left_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_5_left_csr_agent_rsp_fifo_out_startofpacket;                               // dma_comm_5_left_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_5_left_csr_agent:rf_sink_startofpacket
	wire          dma_comm_5_left_csr_agent_rsp_fifo_out_endofpacket;                                 // dma_comm_5_left_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_5_left_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_024_src_valid;                                                              // cmd_mux_024:src_valid -> dma_comm_5_left_csr_agent:cp_valid
	wire  [123:0] cmd_mux_024_src_data;                                                               // cmd_mux_024:src_data -> dma_comm_5_left_csr_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                              // dma_comm_5_left_csr_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [48:0] cmd_mux_024_src_channel;                                                            // cmd_mux_024:src_channel -> dma_comm_5_left_csr_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                      // cmd_mux_024:src_startofpacket -> dma_comm_5_left_csr_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                        // cmd_mux_024:src_endofpacket -> dma_comm_5_left_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_5_right_csr_agent_m0_readdata;                                             // dma_comm_5_right_csr_translator:uav_readdata -> dma_comm_5_right_csr_agent:m0_readdata
	wire          dma_comm_5_right_csr_agent_m0_waitrequest;                                          // dma_comm_5_right_csr_translator:uav_waitrequest -> dma_comm_5_right_csr_agent:m0_waitrequest
	wire          dma_comm_5_right_csr_agent_m0_debugaccess;                                          // dma_comm_5_right_csr_agent:m0_debugaccess -> dma_comm_5_right_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_5_right_csr_agent_m0_address;                                              // dma_comm_5_right_csr_agent:m0_address -> dma_comm_5_right_csr_translator:uav_address
	wire    [3:0] dma_comm_5_right_csr_agent_m0_byteenable;                                           // dma_comm_5_right_csr_agent:m0_byteenable -> dma_comm_5_right_csr_translator:uav_byteenable
	wire          dma_comm_5_right_csr_agent_m0_read;                                                 // dma_comm_5_right_csr_agent:m0_read -> dma_comm_5_right_csr_translator:uav_read
	wire          dma_comm_5_right_csr_agent_m0_readdatavalid;                                        // dma_comm_5_right_csr_translator:uav_readdatavalid -> dma_comm_5_right_csr_agent:m0_readdatavalid
	wire          dma_comm_5_right_csr_agent_m0_lock;                                                 // dma_comm_5_right_csr_agent:m0_lock -> dma_comm_5_right_csr_translator:uav_lock
	wire   [31:0] dma_comm_5_right_csr_agent_m0_writedata;                                            // dma_comm_5_right_csr_agent:m0_writedata -> dma_comm_5_right_csr_translator:uav_writedata
	wire          dma_comm_5_right_csr_agent_m0_write;                                                // dma_comm_5_right_csr_agent:m0_write -> dma_comm_5_right_csr_translator:uav_write
	wire    [2:0] dma_comm_5_right_csr_agent_m0_burstcount;                                           // dma_comm_5_right_csr_agent:m0_burstcount -> dma_comm_5_right_csr_translator:uav_burstcount
	wire          dma_comm_5_right_csr_agent_rf_source_valid;                                         // dma_comm_5_right_csr_agent:rf_source_valid -> dma_comm_5_right_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_5_right_csr_agent_rf_source_data;                                          // dma_comm_5_right_csr_agent:rf_source_data -> dma_comm_5_right_csr_agent_rsp_fifo:in_data
	wire          dma_comm_5_right_csr_agent_rf_source_ready;                                         // dma_comm_5_right_csr_agent_rsp_fifo:in_ready -> dma_comm_5_right_csr_agent:rf_source_ready
	wire          dma_comm_5_right_csr_agent_rf_source_startofpacket;                                 // dma_comm_5_right_csr_agent:rf_source_startofpacket -> dma_comm_5_right_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_5_right_csr_agent_rf_source_endofpacket;                                   // dma_comm_5_right_csr_agent:rf_source_endofpacket -> dma_comm_5_right_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_5_right_csr_agent_rsp_fifo_out_valid;                                      // dma_comm_5_right_csr_agent_rsp_fifo:out_valid -> dma_comm_5_right_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_5_right_csr_agent_rsp_fifo_out_data;                                       // dma_comm_5_right_csr_agent_rsp_fifo:out_data -> dma_comm_5_right_csr_agent:rf_sink_data
	wire          dma_comm_5_right_csr_agent_rsp_fifo_out_ready;                                      // dma_comm_5_right_csr_agent:rf_sink_ready -> dma_comm_5_right_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_5_right_csr_agent_rsp_fifo_out_startofpacket;                              // dma_comm_5_right_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_5_right_csr_agent:rf_sink_startofpacket
	wire          dma_comm_5_right_csr_agent_rsp_fifo_out_endofpacket;                                // dma_comm_5_right_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_5_right_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_025_src_valid;                                                              // cmd_mux_025:src_valid -> dma_comm_5_right_csr_agent:cp_valid
	wire  [123:0] cmd_mux_025_src_data;                                                               // cmd_mux_025:src_data -> dma_comm_5_right_csr_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                              // dma_comm_5_right_csr_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [48:0] cmd_mux_025_src_channel;                                                            // cmd_mux_025:src_channel -> dma_comm_5_right_csr_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                      // cmd_mux_025:src_startofpacket -> dma_comm_5_right_csr_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                        // cmd_mux_025:src_endofpacket -> dma_comm_5_right_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_6_left_csr_agent_m0_readdata;                                              // dma_comm_6_left_csr_translator:uav_readdata -> dma_comm_6_left_csr_agent:m0_readdata
	wire          dma_comm_6_left_csr_agent_m0_waitrequest;                                           // dma_comm_6_left_csr_translator:uav_waitrequest -> dma_comm_6_left_csr_agent:m0_waitrequest
	wire          dma_comm_6_left_csr_agent_m0_debugaccess;                                           // dma_comm_6_left_csr_agent:m0_debugaccess -> dma_comm_6_left_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_6_left_csr_agent_m0_address;                                               // dma_comm_6_left_csr_agent:m0_address -> dma_comm_6_left_csr_translator:uav_address
	wire    [3:0] dma_comm_6_left_csr_agent_m0_byteenable;                                            // dma_comm_6_left_csr_agent:m0_byteenable -> dma_comm_6_left_csr_translator:uav_byteenable
	wire          dma_comm_6_left_csr_agent_m0_read;                                                  // dma_comm_6_left_csr_agent:m0_read -> dma_comm_6_left_csr_translator:uav_read
	wire          dma_comm_6_left_csr_agent_m0_readdatavalid;                                         // dma_comm_6_left_csr_translator:uav_readdatavalid -> dma_comm_6_left_csr_agent:m0_readdatavalid
	wire          dma_comm_6_left_csr_agent_m0_lock;                                                  // dma_comm_6_left_csr_agent:m0_lock -> dma_comm_6_left_csr_translator:uav_lock
	wire   [31:0] dma_comm_6_left_csr_agent_m0_writedata;                                             // dma_comm_6_left_csr_agent:m0_writedata -> dma_comm_6_left_csr_translator:uav_writedata
	wire          dma_comm_6_left_csr_agent_m0_write;                                                 // dma_comm_6_left_csr_agent:m0_write -> dma_comm_6_left_csr_translator:uav_write
	wire    [2:0] dma_comm_6_left_csr_agent_m0_burstcount;                                            // dma_comm_6_left_csr_agent:m0_burstcount -> dma_comm_6_left_csr_translator:uav_burstcount
	wire          dma_comm_6_left_csr_agent_rf_source_valid;                                          // dma_comm_6_left_csr_agent:rf_source_valid -> dma_comm_6_left_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_6_left_csr_agent_rf_source_data;                                           // dma_comm_6_left_csr_agent:rf_source_data -> dma_comm_6_left_csr_agent_rsp_fifo:in_data
	wire          dma_comm_6_left_csr_agent_rf_source_ready;                                          // dma_comm_6_left_csr_agent_rsp_fifo:in_ready -> dma_comm_6_left_csr_agent:rf_source_ready
	wire          dma_comm_6_left_csr_agent_rf_source_startofpacket;                                  // dma_comm_6_left_csr_agent:rf_source_startofpacket -> dma_comm_6_left_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_6_left_csr_agent_rf_source_endofpacket;                                    // dma_comm_6_left_csr_agent:rf_source_endofpacket -> dma_comm_6_left_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_6_left_csr_agent_rsp_fifo_out_valid;                                       // dma_comm_6_left_csr_agent_rsp_fifo:out_valid -> dma_comm_6_left_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_6_left_csr_agent_rsp_fifo_out_data;                                        // dma_comm_6_left_csr_agent_rsp_fifo:out_data -> dma_comm_6_left_csr_agent:rf_sink_data
	wire          dma_comm_6_left_csr_agent_rsp_fifo_out_ready;                                       // dma_comm_6_left_csr_agent:rf_sink_ready -> dma_comm_6_left_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_6_left_csr_agent_rsp_fifo_out_startofpacket;                               // dma_comm_6_left_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_6_left_csr_agent:rf_sink_startofpacket
	wire          dma_comm_6_left_csr_agent_rsp_fifo_out_endofpacket;                                 // dma_comm_6_left_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_6_left_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_026_src_valid;                                                              // cmd_mux_026:src_valid -> dma_comm_6_left_csr_agent:cp_valid
	wire  [123:0] cmd_mux_026_src_data;                                                               // cmd_mux_026:src_data -> dma_comm_6_left_csr_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                              // dma_comm_6_left_csr_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [48:0] cmd_mux_026_src_channel;                                                            // cmd_mux_026:src_channel -> dma_comm_6_left_csr_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                      // cmd_mux_026:src_startofpacket -> dma_comm_6_left_csr_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                        // cmd_mux_026:src_endofpacket -> dma_comm_6_left_csr_agent:cp_endofpacket
	wire   [31:0] dma_comm_6_right_csr_agent_m0_readdata;                                             // dma_comm_6_right_csr_translator:uav_readdata -> dma_comm_6_right_csr_agent:m0_readdata
	wire          dma_comm_6_right_csr_agent_m0_waitrequest;                                          // dma_comm_6_right_csr_translator:uav_waitrequest -> dma_comm_6_right_csr_agent:m0_waitrequest
	wire          dma_comm_6_right_csr_agent_m0_debugaccess;                                          // dma_comm_6_right_csr_agent:m0_debugaccess -> dma_comm_6_right_csr_translator:uav_debugaccess
	wire   [31:0] dma_comm_6_right_csr_agent_m0_address;                                              // dma_comm_6_right_csr_agent:m0_address -> dma_comm_6_right_csr_translator:uav_address
	wire    [3:0] dma_comm_6_right_csr_agent_m0_byteenable;                                           // dma_comm_6_right_csr_agent:m0_byteenable -> dma_comm_6_right_csr_translator:uav_byteenable
	wire          dma_comm_6_right_csr_agent_m0_read;                                                 // dma_comm_6_right_csr_agent:m0_read -> dma_comm_6_right_csr_translator:uav_read
	wire          dma_comm_6_right_csr_agent_m0_readdatavalid;                                        // dma_comm_6_right_csr_translator:uav_readdatavalid -> dma_comm_6_right_csr_agent:m0_readdatavalid
	wire          dma_comm_6_right_csr_agent_m0_lock;                                                 // dma_comm_6_right_csr_agent:m0_lock -> dma_comm_6_right_csr_translator:uav_lock
	wire   [31:0] dma_comm_6_right_csr_agent_m0_writedata;                                            // dma_comm_6_right_csr_agent:m0_writedata -> dma_comm_6_right_csr_translator:uav_writedata
	wire          dma_comm_6_right_csr_agent_m0_write;                                                // dma_comm_6_right_csr_agent:m0_write -> dma_comm_6_right_csr_translator:uav_write
	wire    [2:0] dma_comm_6_right_csr_agent_m0_burstcount;                                           // dma_comm_6_right_csr_agent:m0_burstcount -> dma_comm_6_right_csr_translator:uav_burstcount
	wire          dma_comm_6_right_csr_agent_rf_source_valid;                                         // dma_comm_6_right_csr_agent:rf_source_valid -> dma_comm_6_right_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_comm_6_right_csr_agent_rf_source_data;                                          // dma_comm_6_right_csr_agent:rf_source_data -> dma_comm_6_right_csr_agent_rsp_fifo:in_data
	wire          dma_comm_6_right_csr_agent_rf_source_ready;                                         // dma_comm_6_right_csr_agent_rsp_fifo:in_ready -> dma_comm_6_right_csr_agent:rf_source_ready
	wire          dma_comm_6_right_csr_agent_rf_source_startofpacket;                                 // dma_comm_6_right_csr_agent:rf_source_startofpacket -> dma_comm_6_right_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_6_right_csr_agent_rf_source_endofpacket;                                   // dma_comm_6_right_csr_agent:rf_source_endofpacket -> dma_comm_6_right_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_6_right_csr_agent_rsp_fifo_out_valid;                                      // dma_comm_6_right_csr_agent_rsp_fifo:out_valid -> dma_comm_6_right_csr_agent:rf_sink_valid
	wire  [124:0] dma_comm_6_right_csr_agent_rsp_fifo_out_data;                                       // dma_comm_6_right_csr_agent_rsp_fifo:out_data -> dma_comm_6_right_csr_agent:rf_sink_data
	wire          dma_comm_6_right_csr_agent_rsp_fifo_out_ready;                                      // dma_comm_6_right_csr_agent:rf_sink_ready -> dma_comm_6_right_csr_agent_rsp_fifo:out_ready
	wire          dma_comm_6_right_csr_agent_rsp_fifo_out_startofpacket;                              // dma_comm_6_right_csr_agent_rsp_fifo:out_startofpacket -> dma_comm_6_right_csr_agent:rf_sink_startofpacket
	wire          dma_comm_6_right_csr_agent_rsp_fifo_out_endofpacket;                                // dma_comm_6_right_csr_agent_rsp_fifo:out_endofpacket -> dma_comm_6_right_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_027_src_valid;                                                              // cmd_mux_027:src_valid -> dma_comm_6_right_csr_agent:cp_valid
	wire  [123:0] cmd_mux_027_src_data;                                                               // cmd_mux_027:src_data -> dma_comm_6_right_csr_agent:cp_data
	wire          cmd_mux_027_src_ready;                                                              // dma_comm_6_right_csr_agent:cp_ready -> cmd_mux_027:src_ready
	wire   [48:0] cmd_mux_027_src_channel;                                                            // cmd_mux_027:src_channel -> dma_comm_6_right_csr_agent:cp_channel
	wire          cmd_mux_027_src_startofpacket;                                                      // cmd_mux_027:src_startofpacket -> dma_comm_6_right_csr_agent:cp_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                        // cmd_mux_027:src_endofpacket -> dma_comm_6_right_csr_agent:cp_endofpacket
	wire   [31:0] dma_ftdi_rx_usb3_csr_agent_m0_readdata;                                             // dma_ftdi_rx_usb3_csr_translator:uav_readdata -> dma_ftdi_rx_usb3_csr_agent:m0_readdata
	wire          dma_ftdi_rx_usb3_csr_agent_m0_waitrequest;                                          // dma_ftdi_rx_usb3_csr_translator:uav_waitrequest -> dma_ftdi_rx_usb3_csr_agent:m0_waitrequest
	wire          dma_ftdi_rx_usb3_csr_agent_m0_debugaccess;                                          // dma_ftdi_rx_usb3_csr_agent:m0_debugaccess -> dma_ftdi_rx_usb3_csr_translator:uav_debugaccess
	wire   [31:0] dma_ftdi_rx_usb3_csr_agent_m0_address;                                              // dma_ftdi_rx_usb3_csr_agent:m0_address -> dma_ftdi_rx_usb3_csr_translator:uav_address
	wire    [3:0] dma_ftdi_rx_usb3_csr_agent_m0_byteenable;                                           // dma_ftdi_rx_usb3_csr_agent:m0_byteenable -> dma_ftdi_rx_usb3_csr_translator:uav_byteenable
	wire          dma_ftdi_rx_usb3_csr_agent_m0_read;                                                 // dma_ftdi_rx_usb3_csr_agent:m0_read -> dma_ftdi_rx_usb3_csr_translator:uav_read
	wire          dma_ftdi_rx_usb3_csr_agent_m0_readdatavalid;                                        // dma_ftdi_rx_usb3_csr_translator:uav_readdatavalid -> dma_ftdi_rx_usb3_csr_agent:m0_readdatavalid
	wire          dma_ftdi_rx_usb3_csr_agent_m0_lock;                                                 // dma_ftdi_rx_usb3_csr_agent:m0_lock -> dma_ftdi_rx_usb3_csr_translator:uav_lock
	wire   [31:0] dma_ftdi_rx_usb3_csr_agent_m0_writedata;                                            // dma_ftdi_rx_usb3_csr_agent:m0_writedata -> dma_ftdi_rx_usb3_csr_translator:uav_writedata
	wire          dma_ftdi_rx_usb3_csr_agent_m0_write;                                                // dma_ftdi_rx_usb3_csr_agent:m0_write -> dma_ftdi_rx_usb3_csr_translator:uav_write
	wire    [2:0] dma_ftdi_rx_usb3_csr_agent_m0_burstcount;                                           // dma_ftdi_rx_usb3_csr_agent:m0_burstcount -> dma_ftdi_rx_usb3_csr_translator:uav_burstcount
	wire          dma_ftdi_rx_usb3_csr_agent_rf_source_valid;                                         // dma_ftdi_rx_usb3_csr_agent:rf_source_valid -> dma_ftdi_rx_usb3_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_ftdi_rx_usb3_csr_agent_rf_source_data;                                          // dma_ftdi_rx_usb3_csr_agent:rf_source_data -> dma_ftdi_rx_usb3_csr_agent_rsp_fifo:in_data
	wire          dma_ftdi_rx_usb3_csr_agent_rf_source_ready;                                         // dma_ftdi_rx_usb3_csr_agent_rsp_fifo:in_ready -> dma_ftdi_rx_usb3_csr_agent:rf_source_ready
	wire          dma_ftdi_rx_usb3_csr_agent_rf_source_startofpacket;                                 // dma_ftdi_rx_usb3_csr_agent:rf_source_startofpacket -> dma_ftdi_rx_usb3_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_ftdi_rx_usb3_csr_agent_rf_source_endofpacket;                                   // dma_ftdi_rx_usb3_csr_agent:rf_source_endofpacket -> dma_ftdi_rx_usb3_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_valid;                                      // dma_ftdi_rx_usb3_csr_agent_rsp_fifo:out_valid -> dma_ftdi_rx_usb3_csr_agent:rf_sink_valid
	wire  [124:0] dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_data;                                       // dma_ftdi_rx_usb3_csr_agent_rsp_fifo:out_data -> dma_ftdi_rx_usb3_csr_agent:rf_sink_data
	wire          dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_ready;                                      // dma_ftdi_rx_usb3_csr_agent:rf_sink_ready -> dma_ftdi_rx_usb3_csr_agent_rsp_fifo:out_ready
	wire          dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_startofpacket;                              // dma_ftdi_rx_usb3_csr_agent_rsp_fifo:out_startofpacket -> dma_ftdi_rx_usb3_csr_agent:rf_sink_startofpacket
	wire          dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_endofpacket;                                // dma_ftdi_rx_usb3_csr_agent_rsp_fifo:out_endofpacket -> dma_ftdi_rx_usb3_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_028_src_valid;                                                              // cmd_mux_028:src_valid -> dma_ftdi_rx_usb3_csr_agent:cp_valid
	wire  [123:0] cmd_mux_028_src_data;                                                               // cmd_mux_028:src_data -> dma_ftdi_rx_usb3_csr_agent:cp_data
	wire          cmd_mux_028_src_ready;                                                              // dma_ftdi_rx_usb3_csr_agent:cp_ready -> cmd_mux_028:src_ready
	wire   [48:0] cmd_mux_028_src_channel;                                                            // cmd_mux_028:src_channel -> dma_ftdi_rx_usb3_csr_agent:cp_channel
	wire          cmd_mux_028_src_startofpacket;                                                      // cmd_mux_028:src_startofpacket -> dma_ftdi_rx_usb3_csr_agent:cp_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                        // cmd_mux_028:src_endofpacket -> dma_ftdi_rx_usb3_csr_agent:cp_endofpacket
	wire   [31:0] dma_ftdi_tx_usb3_csr_agent_m0_readdata;                                             // dma_ftdi_tx_usb3_csr_translator:uav_readdata -> dma_ftdi_tx_usb3_csr_agent:m0_readdata
	wire          dma_ftdi_tx_usb3_csr_agent_m0_waitrequest;                                          // dma_ftdi_tx_usb3_csr_translator:uav_waitrequest -> dma_ftdi_tx_usb3_csr_agent:m0_waitrequest
	wire          dma_ftdi_tx_usb3_csr_agent_m0_debugaccess;                                          // dma_ftdi_tx_usb3_csr_agent:m0_debugaccess -> dma_ftdi_tx_usb3_csr_translator:uav_debugaccess
	wire   [31:0] dma_ftdi_tx_usb3_csr_agent_m0_address;                                              // dma_ftdi_tx_usb3_csr_agent:m0_address -> dma_ftdi_tx_usb3_csr_translator:uav_address
	wire    [3:0] dma_ftdi_tx_usb3_csr_agent_m0_byteenable;                                           // dma_ftdi_tx_usb3_csr_agent:m0_byteenable -> dma_ftdi_tx_usb3_csr_translator:uav_byteenable
	wire          dma_ftdi_tx_usb3_csr_agent_m0_read;                                                 // dma_ftdi_tx_usb3_csr_agent:m0_read -> dma_ftdi_tx_usb3_csr_translator:uav_read
	wire          dma_ftdi_tx_usb3_csr_agent_m0_readdatavalid;                                        // dma_ftdi_tx_usb3_csr_translator:uav_readdatavalid -> dma_ftdi_tx_usb3_csr_agent:m0_readdatavalid
	wire          dma_ftdi_tx_usb3_csr_agent_m0_lock;                                                 // dma_ftdi_tx_usb3_csr_agent:m0_lock -> dma_ftdi_tx_usb3_csr_translator:uav_lock
	wire   [31:0] dma_ftdi_tx_usb3_csr_agent_m0_writedata;                                            // dma_ftdi_tx_usb3_csr_agent:m0_writedata -> dma_ftdi_tx_usb3_csr_translator:uav_writedata
	wire          dma_ftdi_tx_usb3_csr_agent_m0_write;                                                // dma_ftdi_tx_usb3_csr_agent:m0_write -> dma_ftdi_tx_usb3_csr_translator:uav_write
	wire    [2:0] dma_ftdi_tx_usb3_csr_agent_m0_burstcount;                                           // dma_ftdi_tx_usb3_csr_agent:m0_burstcount -> dma_ftdi_tx_usb3_csr_translator:uav_burstcount
	wire          dma_ftdi_tx_usb3_csr_agent_rf_source_valid;                                         // dma_ftdi_tx_usb3_csr_agent:rf_source_valid -> dma_ftdi_tx_usb3_csr_agent_rsp_fifo:in_valid
	wire  [124:0] dma_ftdi_tx_usb3_csr_agent_rf_source_data;                                          // dma_ftdi_tx_usb3_csr_agent:rf_source_data -> dma_ftdi_tx_usb3_csr_agent_rsp_fifo:in_data
	wire          dma_ftdi_tx_usb3_csr_agent_rf_source_ready;                                         // dma_ftdi_tx_usb3_csr_agent_rsp_fifo:in_ready -> dma_ftdi_tx_usb3_csr_agent:rf_source_ready
	wire          dma_ftdi_tx_usb3_csr_agent_rf_source_startofpacket;                                 // dma_ftdi_tx_usb3_csr_agent:rf_source_startofpacket -> dma_ftdi_tx_usb3_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_ftdi_tx_usb3_csr_agent_rf_source_endofpacket;                                   // dma_ftdi_tx_usb3_csr_agent:rf_source_endofpacket -> dma_ftdi_tx_usb3_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_valid;                                      // dma_ftdi_tx_usb3_csr_agent_rsp_fifo:out_valid -> dma_ftdi_tx_usb3_csr_agent:rf_sink_valid
	wire  [124:0] dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_data;                                       // dma_ftdi_tx_usb3_csr_agent_rsp_fifo:out_data -> dma_ftdi_tx_usb3_csr_agent:rf_sink_data
	wire          dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_ready;                                      // dma_ftdi_tx_usb3_csr_agent:rf_sink_ready -> dma_ftdi_tx_usb3_csr_agent_rsp_fifo:out_ready
	wire          dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_startofpacket;                              // dma_ftdi_tx_usb3_csr_agent_rsp_fifo:out_startofpacket -> dma_ftdi_tx_usb3_csr_agent:rf_sink_startofpacket
	wire          dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_endofpacket;                                // dma_ftdi_tx_usb3_csr_agent_rsp_fifo:out_endofpacket -> dma_ftdi_tx_usb3_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_029_src_valid;                                                              // cmd_mux_029:src_valid -> dma_ftdi_tx_usb3_csr_agent:cp_valid
	wire  [123:0] cmd_mux_029_src_data;                                                               // cmd_mux_029:src_data -> dma_ftdi_tx_usb3_csr_agent:cp_data
	wire          cmd_mux_029_src_ready;                                                              // dma_ftdi_tx_usb3_csr_agent:cp_ready -> cmd_mux_029:src_ready
	wire   [48:0] cmd_mux_029_src_channel;                                                            // cmd_mux_029:src_channel -> dma_ftdi_tx_usb3_csr_agent:cp_channel
	wire          cmd_mux_029_src_startofpacket;                                                      // cmd_mux_029:src_startofpacket -> dma_ftdi_tx_usb3_csr_agent:cp_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                        // cmd_mux_029:src_endofpacket -> dma_ftdi_tx_usb3_csr_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [124:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [124:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire  [255:0] dma_comm_1_left_descriptor_slave_agent_m0_readdata;                                 // dma_comm_1_left_descriptor_slave_translator:uav_readdata -> dma_comm_1_left_descriptor_slave_agent:m0_readdata
	wire          dma_comm_1_left_descriptor_slave_agent_m0_waitrequest;                              // dma_comm_1_left_descriptor_slave_translator:uav_waitrequest -> dma_comm_1_left_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_1_left_descriptor_slave_agent_m0_debugaccess;                              // dma_comm_1_left_descriptor_slave_agent:m0_debugaccess -> dma_comm_1_left_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_1_left_descriptor_slave_agent_m0_address;                                  // dma_comm_1_left_descriptor_slave_agent:m0_address -> dma_comm_1_left_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_1_left_descriptor_slave_agent_m0_byteenable;                               // dma_comm_1_left_descriptor_slave_agent:m0_byteenable -> dma_comm_1_left_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_1_left_descriptor_slave_agent_m0_read;                                     // dma_comm_1_left_descriptor_slave_agent:m0_read -> dma_comm_1_left_descriptor_slave_translator:uav_read
	wire          dma_comm_1_left_descriptor_slave_agent_m0_readdatavalid;                            // dma_comm_1_left_descriptor_slave_translator:uav_readdatavalid -> dma_comm_1_left_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_1_left_descriptor_slave_agent_m0_lock;                                     // dma_comm_1_left_descriptor_slave_agent:m0_lock -> dma_comm_1_left_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_1_left_descriptor_slave_agent_m0_writedata;                                // dma_comm_1_left_descriptor_slave_agent:m0_writedata -> dma_comm_1_left_descriptor_slave_translator:uav_writedata
	wire          dma_comm_1_left_descriptor_slave_agent_m0_write;                                    // dma_comm_1_left_descriptor_slave_agent:m0_write -> dma_comm_1_left_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_1_left_descriptor_slave_agent_m0_burstcount;                               // dma_comm_1_left_descriptor_slave_agent:m0_burstcount -> dma_comm_1_left_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_1_left_descriptor_slave_agent_rf_source_valid;                             // dma_comm_1_left_descriptor_slave_agent:rf_source_valid -> dma_comm_1_left_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_1_left_descriptor_slave_agent_rf_source_data;                              // dma_comm_1_left_descriptor_slave_agent:rf_source_data -> dma_comm_1_left_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_1_left_descriptor_slave_agent_rf_source_ready;                             // dma_comm_1_left_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_1_left_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_1_left_descriptor_slave_agent_rf_source_startofpacket;                     // dma_comm_1_left_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_1_left_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_1_left_descriptor_slave_agent_rf_source_endofpacket;                       // dma_comm_1_left_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_1_left_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_valid;                          // dma_comm_1_left_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_1_left_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_data;                           // dma_comm_1_left_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_1_left_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_ready;                          // dma_comm_1_left_descriptor_slave_agent:rf_sink_ready -> dma_comm_1_left_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_startofpacket;                  // dma_comm_1_left_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_1_left_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_endofpacket;                    // dma_comm_1_left_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_1_left_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_1_left_descriptor_slave_agent_rdata_fifo_src_valid;                        // dma_comm_1_left_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_1_left_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_1_left_descriptor_slave_agent_rdata_fifo_src_data;                         // dma_comm_1_left_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_1_left_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_1_left_descriptor_slave_agent_rdata_fifo_src_ready;                        // dma_comm_1_left_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_1_left_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_1_right_descriptor_slave_agent_m0_readdata;                                // dma_comm_1_right_descriptor_slave_translator:uav_readdata -> dma_comm_1_right_descriptor_slave_agent:m0_readdata
	wire          dma_comm_1_right_descriptor_slave_agent_m0_waitrequest;                             // dma_comm_1_right_descriptor_slave_translator:uav_waitrequest -> dma_comm_1_right_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_1_right_descriptor_slave_agent_m0_debugaccess;                             // dma_comm_1_right_descriptor_slave_agent:m0_debugaccess -> dma_comm_1_right_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_1_right_descriptor_slave_agent_m0_address;                                 // dma_comm_1_right_descriptor_slave_agent:m0_address -> dma_comm_1_right_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_1_right_descriptor_slave_agent_m0_byteenable;                              // dma_comm_1_right_descriptor_slave_agent:m0_byteenable -> dma_comm_1_right_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_1_right_descriptor_slave_agent_m0_read;                                    // dma_comm_1_right_descriptor_slave_agent:m0_read -> dma_comm_1_right_descriptor_slave_translator:uav_read
	wire          dma_comm_1_right_descriptor_slave_agent_m0_readdatavalid;                           // dma_comm_1_right_descriptor_slave_translator:uav_readdatavalid -> dma_comm_1_right_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_1_right_descriptor_slave_agent_m0_lock;                                    // dma_comm_1_right_descriptor_slave_agent:m0_lock -> dma_comm_1_right_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_1_right_descriptor_slave_agent_m0_writedata;                               // dma_comm_1_right_descriptor_slave_agent:m0_writedata -> dma_comm_1_right_descriptor_slave_translator:uav_writedata
	wire          dma_comm_1_right_descriptor_slave_agent_m0_write;                                   // dma_comm_1_right_descriptor_slave_agent:m0_write -> dma_comm_1_right_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_1_right_descriptor_slave_agent_m0_burstcount;                              // dma_comm_1_right_descriptor_slave_agent:m0_burstcount -> dma_comm_1_right_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_1_right_descriptor_slave_agent_rf_source_valid;                            // dma_comm_1_right_descriptor_slave_agent:rf_source_valid -> dma_comm_1_right_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_1_right_descriptor_slave_agent_rf_source_data;                             // dma_comm_1_right_descriptor_slave_agent:rf_source_data -> dma_comm_1_right_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_1_right_descriptor_slave_agent_rf_source_ready;                            // dma_comm_1_right_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_1_right_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_1_right_descriptor_slave_agent_rf_source_startofpacket;                    // dma_comm_1_right_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_1_right_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_1_right_descriptor_slave_agent_rf_source_endofpacket;                      // dma_comm_1_right_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_1_right_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_valid;                         // dma_comm_1_right_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_1_right_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_data;                          // dma_comm_1_right_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_1_right_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_ready;                         // dma_comm_1_right_descriptor_slave_agent:rf_sink_ready -> dma_comm_1_right_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_startofpacket;                 // dma_comm_1_right_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_1_right_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_endofpacket;                   // dma_comm_1_right_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_1_right_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_1_right_descriptor_slave_agent_rdata_fifo_src_valid;                       // dma_comm_1_right_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_1_right_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_1_right_descriptor_slave_agent_rdata_fifo_src_data;                        // dma_comm_1_right_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_1_right_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_1_right_descriptor_slave_agent_rdata_fifo_src_ready;                       // dma_comm_1_right_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_1_right_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_2_left_descriptor_slave_agent_m0_readdata;                                 // dma_comm_2_left_descriptor_slave_translator:uav_readdata -> dma_comm_2_left_descriptor_slave_agent:m0_readdata
	wire          dma_comm_2_left_descriptor_slave_agent_m0_waitrequest;                              // dma_comm_2_left_descriptor_slave_translator:uav_waitrequest -> dma_comm_2_left_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_2_left_descriptor_slave_agent_m0_debugaccess;                              // dma_comm_2_left_descriptor_slave_agent:m0_debugaccess -> dma_comm_2_left_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_2_left_descriptor_slave_agent_m0_address;                                  // dma_comm_2_left_descriptor_slave_agent:m0_address -> dma_comm_2_left_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_2_left_descriptor_slave_agent_m0_byteenable;                               // dma_comm_2_left_descriptor_slave_agent:m0_byteenable -> dma_comm_2_left_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_2_left_descriptor_slave_agent_m0_read;                                     // dma_comm_2_left_descriptor_slave_agent:m0_read -> dma_comm_2_left_descriptor_slave_translator:uav_read
	wire          dma_comm_2_left_descriptor_slave_agent_m0_readdatavalid;                            // dma_comm_2_left_descriptor_slave_translator:uav_readdatavalid -> dma_comm_2_left_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_2_left_descriptor_slave_agent_m0_lock;                                     // dma_comm_2_left_descriptor_slave_agent:m0_lock -> dma_comm_2_left_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_2_left_descriptor_slave_agent_m0_writedata;                                // dma_comm_2_left_descriptor_slave_agent:m0_writedata -> dma_comm_2_left_descriptor_slave_translator:uav_writedata
	wire          dma_comm_2_left_descriptor_slave_agent_m0_write;                                    // dma_comm_2_left_descriptor_slave_agent:m0_write -> dma_comm_2_left_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_2_left_descriptor_slave_agent_m0_burstcount;                               // dma_comm_2_left_descriptor_slave_agent:m0_burstcount -> dma_comm_2_left_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_2_left_descriptor_slave_agent_rf_source_valid;                             // dma_comm_2_left_descriptor_slave_agent:rf_source_valid -> dma_comm_2_left_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_2_left_descriptor_slave_agent_rf_source_data;                              // dma_comm_2_left_descriptor_slave_agent:rf_source_data -> dma_comm_2_left_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_2_left_descriptor_slave_agent_rf_source_ready;                             // dma_comm_2_left_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_2_left_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_2_left_descriptor_slave_agent_rf_source_startofpacket;                     // dma_comm_2_left_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_2_left_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_2_left_descriptor_slave_agent_rf_source_endofpacket;                       // dma_comm_2_left_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_2_left_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_valid;                          // dma_comm_2_left_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_2_left_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_data;                           // dma_comm_2_left_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_2_left_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_ready;                          // dma_comm_2_left_descriptor_slave_agent:rf_sink_ready -> dma_comm_2_left_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_startofpacket;                  // dma_comm_2_left_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_2_left_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_endofpacket;                    // dma_comm_2_left_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_2_left_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_2_left_descriptor_slave_agent_rdata_fifo_src_valid;                        // dma_comm_2_left_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_2_left_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_2_left_descriptor_slave_agent_rdata_fifo_src_data;                         // dma_comm_2_left_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_2_left_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_2_left_descriptor_slave_agent_rdata_fifo_src_ready;                        // dma_comm_2_left_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_2_left_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_2_right_descriptor_slave_agent_m0_readdata;                                // dma_comm_2_right_descriptor_slave_translator:uav_readdata -> dma_comm_2_right_descriptor_slave_agent:m0_readdata
	wire          dma_comm_2_right_descriptor_slave_agent_m0_waitrequest;                             // dma_comm_2_right_descriptor_slave_translator:uav_waitrequest -> dma_comm_2_right_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_2_right_descriptor_slave_agent_m0_debugaccess;                             // dma_comm_2_right_descriptor_slave_agent:m0_debugaccess -> dma_comm_2_right_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_2_right_descriptor_slave_agent_m0_address;                                 // dma_comm_2_right_descriptor_slave_agent:m0_address -> dma_comm_2_right_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_2_right_descriptor_slave_agent_m0_byteenable;                              // dma_comm_2_right_descriptor_slave_agent:m0_byteenable -> dma_comm_2_right_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_2_right_descriptor_slave_agent_m0_read;                                    // dma_comm_2_right_descriptor_slave_agent:m0_read -> dma_comm_2_right_descriptor_slave_translator:uav_read
	wire          dma_comm_2_right_descriptor_slave_agent_m0_readdatavalid;                           // dma_comm_2_right_descriptor_slave_translator:uav_readdatavalid -> dma_comm_2_right_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_2_right_descriptor_slave_agent_m0_lock;                                    // dma_comm_2_right_descriptor_slave_agent:m0_lock -> dma_comm_2_right_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_2_right_descriptor_slave_agent_m0_writedata;                               // dma_comm_2_right_descriptor_slave_agent:m0_writedata -> dma_comm_2_right_descriptor_slave_translator:uav_writedata
	wire          dma_comm_2_right_descriptor_slave_agent_m0_write;                                   // dma_comm_2_right_descriptor_slave_agent:m0_write -> dma_comm_2_right_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_2_right_descriptor_slave_agent_m0_burstcount;                              // dma_comm_2_right_descriptor_slave_agent:m0_burstcount -> dma_comm_2_right_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_2_right_descriptor_slave_agent_rf_source_valid;                            // dma_comm_2_right_descriptor_slave_agent:rf_source_valid -> dma_comm_2_right_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_2_right_descriptor_slave_agent_rf_source_data;                             // dma_comm_2_right_descriptor_slave_agent:rf_source_data -> dma_comm_2_right_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_2_right_descriptor_slave_agent_rf_source_ready;                            // dma_comm_2_right_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_2_right_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_2_right_descriptor_slave_agent_rf_source_startofpacket;                    // dma_comm_2_right_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_2_right_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_2_right_descriptor_slave_agent_rf_source_endofpacket;                      // dma_comm_2_right_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_2_right_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_valid;                         // dma_comm_2_right_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_2_right_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_data;                          // dma_comm_2_right_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_2_right_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_ready;                         // dma_comm_2_right_descriptor_slave_agent:rf_sink_ready -> dma_comm_2_right_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_startofpacket;                 // dma_comm_2_right_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_2_right_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_endofpacket;                   // dma_comm_2_right_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_2_right_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_2_right_descriptor_slave_agent_rdata_fifo_src_valid;                       // dma_comm_2_right_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_2_right_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_2_right_descriptor_slave_agent_rdata_fifo_src_data;                        // dma_comm_2_right_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_2_right_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_2_right_descriptor_slave_agent_rdata_fifo_src_ready;                       // dma_comm_2_right_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_2_right_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_3_left_descriptor_slave_agent_m0_readdata;                                 // dma_comm_3_left_descriptor_slave_translator:uav_readdata -> dma_comm_3_left_descriptor_slave_agent:m0_readdata
	wire          dma_comm_3_left_descriptor_slave_agent_m0_waitrequest;                              // dma_comm_3_left_descriptor_slave_translator:uav_waitrequest -> dma_comm_3_left_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_3_left_descriptor_slave_agent_m0_debugaccess;                              // dma_comm_3_left_descriptor_slave_agent:m0_debugaccess -> dma_comm_3_left_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_3_left_descriptor_slave_agent_m0_address;                                  // dma_comm_3_left_descriptor_slave_agent:m0_address -> dma_comm_3_left_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_3_left_descriptor_slave_agent_m0_byteenable;                               // dma_comm_3_left_descriptor_slave_agent:m0_byteenable -> dma_comm_3_left_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_3_left_descriptor_slave_agent_m0_read;                                     // dma_comm_3_left_descriptor_slave_agent:m0_read -> dma_comm_3_left_descriptor_slave_translator:uav_read
	wire          dma_comm_3_left_descriptor_slave_agent_m0_readdatavalid;                            // dma_comm_3_left_descriptor_slave_translator:uav_readdatavalid -> dma_comm_3_left_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_3_left_descriptor_slave_agent_m0_lock;                                     // dma_comm_3_left_descriptor_slave_agent:m0_lock -> dma_comm_3_left_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_3_left_descriptor_slave_agent_m0_writedata;                                // dma_comm_3_left_descriptor_slave_agent:m0_writedata -> dma_comm_3_left_descriptor_slave_translator:uav_writedata
	wire          dma_comm_3_left_descriptor_slave_agent_m0_write;                                    // dma_comm_3_left_descriptor_slave_agent:m0_write -> dma_comm_3_left_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_3_left_descriptor_slave_agent_m0_burstcount;                               // dma_comm_3_left_descriptor_slave_agent:m0_burstcount -> dma_comm_3_left_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_3_left_descriptor_slave_agent_rf_source_valid;                             // dma_comm_3_left_descriptor_slave_agent:rf_source_valid -> dma_comm_3_left_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_3_left_descriptor_slave_agent_rf_source_data;                              // dma_comm_3_left_descriptor_slave_agent:rf_source_data -> dma_comm_3_left_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_3_left_descriptor_slave_agent_rf_source_ready;                             // dma_comm_3_left_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_3_left_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_3_left_descriptor_slave_agent_rf_source_startofpacket;                     // dma_comm_3_left_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_3_left_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_3_left_descriptor_slave_agent_rf_source_endofpacket;                       // dma_comm_3_left_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_3_left_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_valid;                          // dma_comm_3_left_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_3_left_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_data;                           // dma_comm_3_left_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_3_left_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_ready;                          // dma_comm_3_left_descriptor_slave_agent:rf_sink_ready -> dma_comm_3_left_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_startofpacket;                  // dma_comm_3_left_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_3_left_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_endofpacket;                    // dma_comm_3_left_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_3_left_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_3_left_descriptor_slave_agent_rdata_fifo_src_valid;                        // dma_comm_3_left_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_3_left_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_3_left_descriptor_slave_agent_rdata_fifo_src_data;                         // dma_comm_3_left_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_3_left_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_3_left_descriptor_slave_agent_rdata_fifo_src_ready;                        // dma_comm_3_left_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_3_left_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_3_right_descriptor_slave_agent_m0_readdata;                                // dma_comm_3_right_descriptor_slave_translator:uav_readdata -> dma_comm_3_right_descriptor_slave_agent:m0_readdata
	wire          dma_comm_3_right_descriptor_slave_agent_m0_waitrequest;                             // dma_comm_3_right_descriptor_slave_translator:uav_waitrequest -> dma_comm_3_right_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_3_right_descriptor_slave_agent_m0_debugaccess;                             // dma_comm_3_right_descriptor_slave_agent:m0_debugaccess -> dma_comm_3_right_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_3_right_descriptor_slave_agent_m0_address;                                 // dma_comm_3_right_descriptor_slave_agent:m0_address -> dma_comm_3_right_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_3_right_descriptor_slave_agent_m0_byteenable;                              // dma_comm_3_right_descriptor_slave_agent:m0_byteenable -> dma_comm_3_right_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_3_right_descriptor_slave_agent_m0_read;                                    // dma_comm_3_right_descriptor_slave_agent:m0_read -> dma_comm_3_right_descriptor_slave_translator:uav_read
	wire          dma_comm_3_right_descriptor_slave_agent_m0_readdatavalid;                           // dma_comm_3_right_descriptor_slave_translator:uav_readdatavalid -> dma_comm_3_right_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_3_right_descriptor_slave_agent_m0_lock;                                    // dma_comm_3_right_descriptor_slave_agent:m0_lock -> dma_comm_3_right_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_3_right_descriptor_slave_agent_m0_writedata;                               // dma_comm_3_right_descriptor_slave_agent:m0_writedata -> dma_comm_3_right_descriptor_slave_translator:uav_writedata
	wire          dma_comm_3_right_descriptor_slave_agent_m0_write;                                   // dma_comm_3_right_descriptor_slave_agent:m0_write -> dma_comm_3_right_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_3_right_descriptor_slave_agent_m0_burstcount;                              // dma_comm_3_right_descriptor_slave_agent:m0_burstcount -> dma_comm_3_right_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_3_right_descriptor_slave_agent_rf_source_valid;                            // dma_comm_3_right_descriptor_slave_agent:rf_source_valid -> dma_comm_3_right_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_3_right_descriptor_slave_agent_rf_source_data;                             // dma_comm_3_right_descriptor_slave_agent:rf_source_data -> dma_comm_3_right_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_3_right_descriptor_slave_agent_rf_source_ready;                            // dma_comm_3_right_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_3_right_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_3_right_descriptor_slave_agent_rf_source_startofpacket;                    // dma_comm_3_right_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_3_right_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_3_right_descriptor_slave_agent_rf_source_endofpacket;                      // dma_comm_3_right_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_3_right_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_valid;                         // dma_comm_3_right_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_3_right_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_data;                          // dma_comm_3_right_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_3_right_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_ready;                         // dma_comm_3_right_descriptor_slave_agent:rf_sink_ready -> dma_comm_3_right_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_startofpacket;                 // dma_comm_3_right_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_3_right_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_endofpacket;                   // dma_comm_3_right_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_3_right_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_3_right_descriptor_slave_agent_rdata_fifo_src_valid;                       // dma_comm_3_right_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_3_right_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_3_right_descriptor_slave_agent_rdata_fifo_src_data;                        // dma_comm_3_right_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_3_right_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_3_right_descriptor_slave_agent_rdata_fifo_src_ready;                       // dma_comm_3_right_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_3_right_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_4_left_descriptor_slave_agent_m0_readdata;                                 // dma_comm_4_left_descriptor_slave_translator:uav_readdata -> dma_comm_4_left_descriptor_slave_agent:m0_readdata
	wire          dma_comm_4_left_descriptor_slave_agent_m0_waitrequest;                              // dma_comm_4_left_descriptor_slave_translator:uav_waitrequest -> dma_comm_4_left_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_4_left_descriptor_slave_agent_m0_debugaccess;                              // dma_comm_4_left_descriptor_slave_agent:m0_debugaccess -> dma_comm_4_left_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_4_left_descriptor_slave_agent_m0_address;                                  // dma_comm_4_left_descriptor_slave_agent:m0_address -> dma_comm_4_left_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_4_left_descriptor_slave_agent_m0_byteenable;                               // dma_comm_4_left_descriptor_slave_agent:m0_byteenable -> dma_comm_4_left_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_4_left_descriptor_slave_agent_m0_read;                                     // dma_comm_4_left_descriptor_slave_agent:m0_read -> dma_comm_4_left_descriptor_slave_translator:uav_read
	wire          dma_comm_4_left_descriptor_slave_agent_m0_readdatavalid;                            // dma_comm_4_left_descriptor_slave_translator:uav_readdatavalid -> dma_comm_4_left_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_4_left_descriptor_slave_agent_m0_lock;                                     // dma_comm_4_left_descriptor_slave_agent:m0_lock -> dma_comm_4_left_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_4_left_descriptor_slave_agent_m0_writedata;                                // dma_comm_4_left_descriptor_slave_agent:m0_writedata -> dma_comm_4_left_descriptor_slave_translator:uav_writedata
	wire          dma_comm_4_left_descriptor_slave_agent_m0_write;                                    // dma_comm_4_left_descriptor_slave_agent:m0_write -> dma_comm_4_left_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_4_left_descriptor_slave_agent_m0_burstcount;                               // dma_comm_4_left_descriptor_slave_agent:m0_burstcount -> dma_comm_4_left_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_4_left_descriptor_slave_agent_rf_source_valid;                             // dma_comm_4_left_descriptor_slave_agent:rf_source_valid -> dma_comm_4_left_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_4_left_descriptor_slave_agent_rf_source_data;                              // dma_comm_4_left_descriptor_slave_agent:rf_source_data -> dma_comm_4_left_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_4_left_descriptor_slave_agent_rf_source_ready;                             // dma_comm_4_left_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_4_left_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_4_left_descriptor_slave_agent_rf_source_startofpacket;                     // dma_comm_4_left_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_4_left_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_4_left_descriptor_slave_agent_rf_source_endofpacket;                       // dma_comm_4_left_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_4_left_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_valid;                          // dma_comm_4_left_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_4_left_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_data;                           // dma_comm_4_left_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_4_left_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_ready;                          // dma_comm_4_left_descriptor_slave_agent:rf_sink_ready -> dma_comm_4_left_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_startofpacket;                  // dma_comm_4_left_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_4_left_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_endofpacket;                    // dma_comm_4_left_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_4_left_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_4_left_descriptor_slave_agent_rdata_fifo_src_valid;                        // dma_comm_4_left_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_4_left_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_4_left_descriptor_slave_agent_rdata_fifo_src_data;                         // dma_comm_4_left_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_4_left_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_4_left_descriptor_slave_agent_rdata_fifo_src_ready;                        // dma_comm_4_left_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_4_left_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_4_right_descriptor_slave_agent_m0_readdata;                                // dma_comm_4_right_descriptor_slave_translator:uav_readdata -> dma_comm_4_right_descriptor_slave_agent:m0_readdata
	wire          dma_comm_4_right_descriptor_slave_agent_m0_waitrequest;                             // dma_comm_4_right_descriptor_slave_translator:uav_waitrequest -> dma_comm_4_right_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_4_right_descriptor_slave_agent_m0_debugaccess;                             // dma_comm_4_right_descriptor_slave_agent:m0_debugaccess -> dma_comm_4_right_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_4_right_descriptor_slave_agent_m0_address;                                 // dma_comm_4_right_descriptor_slave_agent:m0_address -> dma_comm_4_right_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_4_right_descriptor_slave_agent_m0_byteenable;                              // dma_comm_4_right_descriptor_slave_agent:m0_byteenable -> dma_comm_4_right_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_4_right_descriptor_slave_agent_m0_read;                                    // dma_comm_4_right_descriptor_slave_agent:m0_read -> dma_comm_4_right_descriptor_slave_translator:uav_read
	wire          dma_comm_4_right_descriptor_slave_agent_m0_readdatavalid;                           // dma_comm_4_right_descriptor_slave_translator:uav_readdatavalid -> dma_comm_4_right_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_4_right_descriptor_slave_agent_m0_lock;                                    // dma_comm_4_right_descriptor_slave_agent:m0_lock -> dma_comm_4_right_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_4_right_descriptor_slave_agent_m0_writedata;                               // dma_comm_4_right_descriptor_slave_agent:m0_writedata -> dma_comm_4_right_descriptor_slave_translator:uav_writedata
	wire          dma_comm_4_right_descriptor_slave_agent_m0_write;                                   // dma_comm_4_right_descriptor_slave_agent:m0_write -> dma_comm_4_right_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_4_right_descriptor_slave_agent_m0_burstcount;                              // dma_comm_4_right_descriptor_slave_agent:m0_burstcount -> dma_comm_4_right_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_4_right_descriptor_slave_agent_rf_source_valid;                            // dma_comm_4_right_descriptor_slave_agent:rf_source_valid -> dma_comm_4_right_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_4_right_descriptor_slave_agent_rf_source_data;                             // dma_comm_4_right_descriptor_slave_agent:rf_source_data -> dma_comm_4_right_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_4_right_descriptor_slave_agent_rf_source_ready;                            // dma_comm_4_right_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_4_right_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_4_right_descriptor_slave_agent_rf_source_startofpacket;                    // dma_comm_4_right_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_4_right_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_4_right_descriptor_slave_agent_rf_source_endofpacket;                      // dma_comm_4_right_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_4_right_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_valid;                         // dma_comm_4_right_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_4_right_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_data;                          // dma_comm_4_right_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_4_right_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_ready;                         // dma_comm_4_right_descriptor_slave_agent:rf_sink_ready -> dma_comm_4_right_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_startofpacket;                 // dma_comm_4_right_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_4_right_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_endofpacket;                   // dma_comm_4_right_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_4_right_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_4_right_descriptor_slave_agent_rdata_fifo_src_valid;                       // dma_comm_4_right_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_4_right_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_4_right_descriptor_slave_agent_rdata_fifo_src_data;                        // dma_comm_4_right_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_4_right_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_4_right_descriptor_slave_agent_rdata_fifo_src_ready;                       // dma_comm_4_right_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_4_right_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_5_left_descriptor_slave_agent_m0_readdata;                                 // dma_comm_5_left_descriptor_slave_translator:uav_readdata -> dma_comm_5_left_descriptor_slave_agent:m0_readdata
	wire          dma_comm_5_left_descriptor_slave_agent_m0_waitrequest;                              // dma_comm_5_left_descriptor_slave_translator:uav_waitrequest -> dma_comm_5_left_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_5_left_descriptor_slave_agent_m0_debugaccess;                              // dma_comm_5_left_descriptor_slave_agent:m0_debugaccess -> dma_comm_5_left_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_5_left_descriptor_slave_agent_m0_address;                                  // dma_comm_5_left_descriptor_slave_agent:m0_address -> dma_comm_5_left_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_5_left_descriptor_slave_agent_m0_byteenable;                               // dma_comm_5_left_descriptor_slave_agent:m0_byteenable -> dma_comm_5_left_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_5_left_descriptor_slave_agent_m0_read;                                     // dma_comm_5_left_descriptor_slave_agent:m0_read -> dma_comm_5_left_descriptor_slave_translator:uav_read
	wire          dma_comm_5_left_descriptor_slave_agent_m0_readdatavalid;                            // dma_comm_5_left_descriptor_slave_translator:uav_readdatavalid -> dma_comm_5_left_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_5_left_descriptor_slave_agent_m0_lock;                                     // dma_comm_5_left_descriptor_slave_agent:m0_lock -> dma_comm_5_left_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_5_left_descriptor_slave_agent_m0_writedata;                                // dma_comm_5_left_descriptor_slave_agent:m0_writedata -> dma_comm_5_left_descriptor_slave_translator:uav_writedata
	wire          dma_comm_5_left_descriptor_slave_agent_m0_write;                                    // dma_comm_5_left_descriptor_slave_agent:m0_write -> dma_comm_5_left_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_5_left_descriptor_slave_agent_m0_burstcount;                               // dma_comm_5_left_descriptor_slave_agent:m0_burstcount -> dma_comm_5_left_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_5_left_descriptor_slave_agent_rf_source_valid;                             // dma_comm_5_left_descriptor_slave_agent:rf_source_valid -> dma_comm_5_left_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_5_left_descriptor_slave_agent_rf_source_data;                              // dma_comm_5_left_descriptor_slave_agent:rf_source_data -> dma_comm_5_left_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_5_left_descriptor_slave_agent_rf_source_ready;                             // dma_comm_5_left_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_5_left_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_5_left_descriptor_slave_agent_rf_source_startofpacket;                     // dma_comm_5_left_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_5_left_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_5_left_descriptor_slave_agent_rf_source_endofpacket;                       // dma_comm_5_left_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_5_left_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_valid;                          // dma_comm_5_left_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_5_left_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_data;                           // dma_comm_5_left_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_5_left_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_ready;                          // dma_comm_5_left_descriptor_slave_agent:rf_sink_ready -> dma_comm_5_left_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_startofpacket;                  // dma_comm_5_left_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_5_left_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_endofpacket;                    // dma_comm_5_left_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_5_left_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_5_left_descriptor_slave_agent_rdata_fifo_src_valid;                        // dma_comm_5_left_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_5_left_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_5_left_descriptor_slave_agent_rdata_fifo_src_data;                         // dma_comm_5_left_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_5_left_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_5_left_descriptor_slave_agent_rdata_fifo_src_ready;                        // dma_comm_5_left_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_5_left_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_5_right_descriptor_slave_agent_m0_readdata;                                // dma_comm_5_right_descriptor_slave_translator:uav_readdata -> dma_comm_5_right_descriptor_slave_agent:m0_readdata
	wire          dma_comm_5_right_descriptor_slave_agent_m0_waitrequest;                             // dma_comm_5_right_descriptor_slave_translator:uav_waitrequest -> dma_comm_5_right_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_5_right_descriptor_slave_agent_m0_debugaccess;                             // dma_comm_5_right_descriptor_slave_agent:m0_debugaccess -> dma_comm_5_right_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_5_right_descriptor_slave_agent_m0_address;                                 // dma_comm_5_right_descriptor_slave_agent:m0_address -> dma_comm_5_right_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_5_right_descriptor_slave_agent_m0_byteenable;                              // dma_comm_5_right_descriptor_slave_agent:m0_byteenable -> dma_comm_5_right_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_5_right_descriptor_slave_agent_m0_read;                                    // dma_comm_5_right_descriptor_slave_agent:m0_read -> dma_comm_5_right_descriptor_slave_translator:uav_read
	wire          dma_comm_5_right_descriptor_slave_agent_m0_readdatavalid;                           // dma_comm_5_right_descriptor_slave_translator:uav_readdatavalid -> dma_comm_5_right_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_5_right_descriptor_slave_agent_m0_lock;                                    // dma_comm_5_right_descriptor_slave_agent:m0_lock -> dma_comm_5_right_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_5_right_descriptor_slave_agent_m0_writedata;                               // dma_comm_5_right_descriptor_slave_agent:m0_writedata -> dma_comm_5_right_descriptor_slave_translator:uav_writedata
	wire          dma_comm_5_right_descriptor_slave_agent_m0_write;                                   // dma_comm_5_right_descriptor_slave_agent:m0_write -> dma_comm_5_right_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_5_right_descriptor_slave_agent_m0_burstcount;                              // dma_comm_5_right_descriptor_slave_agent:m0_burstcount -> dma_comm_5_right_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_5_right_descriptor_slave_agent_rf_source_valid;                            // dma_comm_5_right_descriptor_slave_agent:rf_source_valid -> dma_comm_5_right_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_5_right_descriptor_slave_agent_rf_source_data;                             // dma_comm_5_right_descriptor_slave_agent:rf_source_data -> dma_comm_5_right_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_5_right_descriptor_slave_agent_rf_source_ready;                            // dma_comm_5_right_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_5_right_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_5_right_descriptor_slave_agent_rf_source_startofpacket;                    // dma_comm_5_right_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_5_right_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_5_right_descriptor_slave_agent_rf_source_endofpacket;                      // dma_comm_5_right_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_5_right_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_valid;                         // dma_comm_5_right_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_5_right_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_data;                          // dma_comm_5_right_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_5_right_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_ready;                         // dma_comm_5_right_descriptor_slave_agent:rf_sink_ready -> dma_comm_5_right_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_startofpacket;                 // dma_comm_5_right_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_5_right_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_endofpacket;                   // dma_comm_5_right_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_5_right_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_5_right_descriptor_slave_agent_rdata_fifo_src_valid;                       // dma_comm_5_right_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_5_right_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_5_right_descriptor_slave_agent_rdata_fifo_src_data;                        // dma_comm_5_right_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_5_right_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_5_right_descriptor_slave_agent_rdata_fifo_src_ready;                       // dma_comm_5_right_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_5_right_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_6_left_descriptor_slave_agent_m0_readdata;                                 // dma_comm_6_left_descriptor_slave_translator:uav_readdata -> dma_comm_6_left_descriptor_slave_agent:m0_readdata
	wire          dma_comm_6_left_descriptor_slave_agent_m0_waitrequest;                              // dma_comm_6_left_descriptor_slave_translator:uav_waitrequest -> dma_comm_6_left_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_6_left_descriptor_slave_agent_m0_debugaccess;                              // dma_comm_6_left_descriptor_slave_agent:m0_debugaccess -> dma_comm_6_left_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_6_left_descriptor_slave_agent_m0_address;                                  // dma_comm_6_left_descriptor_slave_agent:m0_address -> dma_comm_6_left_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_6_left_descriptor_slave_agent_m0_byteenable;                               // dma_comm_6_left_descriptor_slave_agent:m0_byteenable -> dma_comm_6_left_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_6_left_descriptor_slave_agent_m0_read;                                     // dma_comm_6_left_descriptor_slave_agent:m0_read -> dma_comm_6_left_descriptor_slave_translator:uav_read
	wire          dma_comm_6_left_descriptor_slave_agent_m0_readdatavalid;                            // dma_comm_6_left_descriptor_slave_translator:uav_readdatavalid -> dma_comm_6_left_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_6_left_descriptor_slave_agent_m0_lock;                                     // dma_comm_6_left_descriptor_slave_agent:m0_lock -> dma_comm_6_left_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_6_left_descriptor_slave_agent_m0_writedata;                                // dma_comm_6_left_descriptor_slave_agent:m0_writedata -> dma_comm_6_left_descriptor_slave_translator:uav_writedata
	wire          dma_comm_6_left_descriptor_slave_agent_m0_write;                                    // dma_comm_6_left_descriptor_slave_agent:m0_write -> dma_comm_6_left_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_6_left_descriptor_slave_agent_m0_burstcount;                               // dma_comm_6_left_descriptor_slave_agent:m0_burstcount -> dma_comm_6_left_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_6_left_descriptor_slave_agent_rf_source_valid;                             // dma_comm_6_left_descriptor_slave_agent:rf_source_valid -> dma_comm_6_left_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_6_left_descriptor_slave_agent_rf_source_data;                              // dma_comm_6_left_descriptor_slave_agent:rf_source_data -> dma_comm_6_left_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_6_left_descriptor_slave_agent_rf_source_ready;                             // dma_comm_6_left_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_6_left_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_6_left_descriptor_slave_agent_rf_source_startofpacket;                     // dma_comm_6_left_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_6_left_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_6_left_descriptor_slave_agent_rf_source_endofpacket;                       // dma_comm_6_left_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_6_left_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_valid;                          // dma_comm_6_left_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_6_left_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_data;                           // dma_comm_6_left_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_6_left_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_ready;                          // dma_comm_6_left_descriptor_slave_agent:rf_sink_ready -> dma_comm_6_left_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_startofpacket;                  // dma_comm_6_left_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_6_left_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_endofpacket;                    // dma_comm_6_left_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_6_left_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_6_left_descriptor_slave_agent_rdata_fifo_src_valid;                        // dma_comm_6_left_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_6_left_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_6_left_descriptor_slave_agent_rdata_fifo_src_data;                         // dma_comm_6_left_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_6_left_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_6_left_descriptor_slave_agent_rdata_fifo_src_ready;                        // dma_comm_6_left_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_6_left_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_comm_6_right_descriptor_slave_agent_m0_readdata;                                // dma_comm_6_right_descriptor_slave_translator:uav_readdata -> dma_comm_6_right_descriptor_slave_agent:m0_readdata
	wire          dma_comm_6_right_descriptor_slave_agent_m0_waitrequest;                             // dma_comm_6_right_descriptor_slave_translator:uav_waitrequest -> dma_comm_6_right_descriptor_slave_agent:m0_waitrequest
	wire          dma_comm_6_right_descriptor_slave_agent_m0_debugaccess;                             // dma_comm_6_right_descriptor_slave_agent:m0_debugaccess -> dma_comm_6_right_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_comm_6_right_descriptor_slave_agent_m0_address;                                 // dma_comm_6_right_descriptor_slave_agent:m0_address -> dma_comm_6_right_descriptor_slave_translator:uav_address
	wire   [31:0] dma_comm_6_right_descriptor_slave_agent_m0_byteenable;                              // dma_comm_6_right_descriptor_slave_agent:m0_byteenable -> dma_comm_6_right_descriptor_slave_translator:uav_byteenable
	wire          dma_comm_6_right_descriptor_slave_agent_m0_read;                                    // dma_comm_6_right_descriptor_slave_agent:m0_read -> dma_comm_6_right_descriptor_slave_translator:uav_read
	wire          dma_comm_6_right_descriptor_slave_agent_m0_readdatavalid;                           // dma_comm_6_right_descriptor_slave_translator:uav_readdatavalid -> dma_comm_6_right_descriptor_slave_agent:m0_readdatavalid
	wire          dma_comm_6_right_descriptor_slave_agent_m0_lock;                                    // dma_comm_6_right_descriptor_slave_agent:m0_lock -> dma_comm_6_right_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_comm_6_right_descriptor_slave_agent_m0_writedata;                               // dma_comm_6_right_descriptor_slave_agent:m0_writedata -> dma_comm_6_right_descriptor_slave_translator:uav_writedata
	wire          dma_comm_6_right_descriptor_slave_agent_m0_write;                                   // dma_comm_6_right_descriptor_slave_agent:m0_write -> dma_comm_6_right_descriptor_slave_translator:uav_write
	wire    [5:0] dma_comm_6_right_descriptor_slave_agent_m0_burstcount;                              // dma_comm_6_right_descriptor_slave_agent:m0_burstcount -> dma_comm_6_right_descriptor_slave_translator:uav_burstcount
	wire          dma_comm_6_right_descriptor_slave_agent_rf_source_valid;                            // dma_comm_6_right_descriptor_slave_agent:rf_source_valid -> dma_comm_6_right_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_comm_6_right_descriptor_slave_agent_rf_source_data;                             // dma_comm_6_right_descriptor_slave_agent:rf_source_data -> dma_comm_6_right_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_comm_6_right_descriptor_slave_agent_rf_source_ready;                            // dma_comm_6_right_descriptor_slave_agent_rsp_fifo:in_ready -> dma_comm_6_right_descriptor_slave_agent:rf_source_ready
	wire          dma_comm_6_right_descriptor_slave_agent_rf_source_startofpacket;                    // dma_comm_6_right_descriptor_slave_agent:rf_source_startofpacket -> dma_comm_6_right_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_comm_6_right_descriptor_slave_agent_rf_source_endofpacket;                      // dma_comm_6_right_descriptor_slave_agent:rf_source_endofpacket -> dma_comm_6_right_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_valid;                         // dma_comm_6_right_descriptor_slave_agent_rsp_fifo:out_valid -> dma_comm_6_right_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_data;                          // dma_comm_6_right_descriptor_slave_agent_rsp_fifo:out_data -> dma_comm_6_right_descriptor_slave_agent:rf_sink_data
	wire          dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_ready;                         // dma_comm_6_right_descriptor_slave_agent:rf_sink_ready -> dma_comm_6_right_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_startofpacket;                 // dma_comm_6_right_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_comm_6_right_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_endofpacket;                   // dma_comm_6_right_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_comm_6_right_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_comm_6_right_descriptor_slave_agent_rdata_fifo_src_valid;                       // dma_comm_6_right_descriptor_slave_agent:rdata_fifo_src_valid -> dma_comm_6_right_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_comm_6_right_descriptor_slave_agent_rdata_fifo_src_data;                        // dma_comm_6_right_descriptor_slave_agent:rdata_fifo_src_data -> dma_comm_6_right_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_comm_6_right_descriptor_slave_agent_rdata_fifo_src_ready;                       // dma_comm_6_right_descriptor_slave_agent_rdata_fifo:in_ready -> dma_comm_6_right_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_ftdi_rx_usb3_descriptor_slave_agent_m0_readdata;                                // dma_ftdi_rx_usb3_descriptor_slave_translator:uav_readdata -> dma_ftdi_rx_usb3_descriptor_slave_agent:m0_readdata
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_m0_waitrequest;                             // dma_ftdi_rx_usb3_descriptor_slave_translator:uav_waitrequest -> dma_ftdi_rx_usb3_descriptor_slave_agent:m0_waitrequest
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_m0_debugaccess;                             // dma_ftdi_rx_usb3_descriptor_slave_agent:m0_debugaccess -> dma_ftdi_rx_usb3_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_ftdi_rx_usb3_descriptor_slave_agent_m0_address;                                 // dma_ftdi_rx_usb3_descriptor_slave_agent:m0_address -> dma_ftdi_rx_usb3_descriptor_slave_translator:uav_address
	wire   [31:0] dma_ftdi_rx_usb3_descriptor_slave_agent_m0_byteenable;                              // dma_ftdi_rx_usb3_descriptor_slave_agent:m0_byteenable -> dma_ftdi_rx_usb3_descriptor_slave_translator:uav_byteenable
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_m0_read;                                    // dma_ftdi_rx_usb3_descriptor_slave_agent:m0_read -> dma_ftdi_rx_usb3_descriptor_slave_translator:uav_read
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_m0_readdatavalid;                           // dma_ftdi_rx_usb3_descriptor_slave_translator:uav_readdatavalid -> dma_ftdi_rx_usb3_descriptor_slave_agent:m0_readdatavalid
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_m0_lock;                                    // dma_ftdi_rx_usb3_descriptor_slave_agent:m0_lock -> dma_ftdi_rx_usb3_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_ftdi_rx_usb3_descriptor_slave_agent_m0_writedata;                               // dma_ftdi_rx_usb3_descriptor_slave_agent:m0_writedata -> dma_ftdi_rx_usb3_descriptor_slave_translator:uav_writedata
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_m0_write;                                   // dma_ftdi_rx_usb3_descriptor_slave_agent:m0_write -> dma_ftdi_rx_usb3_descriptor_slave_translator:uav_write
	wire    [5:0] dma_ftdi_rx_usb3_descriptor_slave_agent_m0_burstcount;                              // dma_ftdi_rx_usb3_descriptor_slave_agent:m0_burstcount -> dma_ftdi_rx_usb3_descriptor_slave_translator:uav_burstcount
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_valid;                            // dma_ftdi_rx_usb3_descriptor_slave_agent:rf_source_valid -> dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_data;                             // dma_ftdi_rx_usb3_descriptor_slave_agent:rf_source_data -> dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_ready;                            // dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:in_ready -> dma_ftdi_rx_usb3_descriptor_slave_agent:rf_source_ready
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_startofpacket;                    // dma_ftdi_rx_usb3_descriptor_slave_agent:rf_source_startofpacket -> dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_endofpacket;                      // dma_ftdi_rx_usb3_descriptor_slave_agent:rf_source_endofpacket -> dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_valid;                         // dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:out_valid -> dma_ftdi_rx_usb3_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_data;                          // dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:out_data -> dma_ftdi_rx_usb3_descriptor_slave_agent:rf_sink_data
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_ready;                         // dma_ftdi_rx_usb3_descriptor_slave_agent:rf_sink_ready -> dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_startofpacket;                 // dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_ftdi_rx_usb3_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_endofpacket;                   // dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_ftdi_rx_usb3_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_src_valid;                       // dma_ftdi_rx_usb3_descriptor_slave_agent:rdata_fifo_src_valid -> dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_src_data;                        // dma_ftdi_rx_usb3_descriptor_slave_agent:rdata_fifo_src_data -> dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_src_ready;                       // dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo:in_ready -> dma_ftdi_rx_usb3_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [255:0] dma_ftdi_tx_usb3_descriptor_slave_agent_m0_readdata;                                // dma_ftdi_tx_usb3_descriptor_slave_translator:uav_readdata -> dma_ftdi_tx_usb3_descriptor_slave_agent:m0_readdata
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_m0_waitrequest;                             // dma_ftdi_tx_usb3_descriptor_slave_translator:uav_waitrequest -> dma_ftdi_tx_usb3_descriptor_slave_agent:m0_waitrequest
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_m0_debugaccess;                             // dma_ftdi_tx_usb3_descriptor_slave_agent:m0_debugaccess -> dma_ftdi_tx_usb3_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_ftdi_tx_usb3_descriptor_slave_agent_m0_address;                                 // dma_ftdi_tx_usb3_descriptor_slave_agent:m0_address -> dma_ftdi_tx_usb3_descriptor_slave_translator:uav_address
	wire   [31:0] dma_ftdi_tx_usb3_descriptor_slave_agent_m0_byteenable;                              // dma_ftdi_tx_usb3_descriptor_slave_agent:m0_byteenable -> dma_ftdi_tx_usb3_descriptor_slave_translator:uav_byteenable
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_m0_read;                                    // dma_ftdi_tx_usb3_descriptor_slave_agent:m0_read -> dma_ftdi_tx_usb3_descriptor_slave_translator:uav_read
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_m0_readdatavalid;                           // dma_ftdi_tx_usb3_descriptor_slave_translator:uav_readdatavalid -> dma_ftdi_tx_usb3_descriptor_slave_agent:m0_readdatavalid
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_m0_lock;                                    // dma_ftdi_tx_usb3_descriptor_slave_agent:m0_lock -> dma_ftdi_tx_usb3_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_ftdi_tx_usb3_descriptor_slave_agent_m0_writedata;                               // dma_ftdi_tx_usb3_descriptor_slave_agent:m0_writedata -> dma_ftdi_tx_usb3_descriptor_slave_translator:uav_writedata
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_m0_write;                                   // dma_ftdi_tx_usb3_descriptor_slave_agent:m0_write -> dma_ftdi_tx_usb3_descriptor_slave_translator:uav_write
	wire    [5:0] dma_ftdi_tx_usb3_descriptor_slave_agent_m0_burstcount;                              // dma_ftdi_tx_usb3_descriptor_slave_agent:m0_burstcount -> dma_ftdi_tx_usb3_descriptor_slave_translator:uav_burstcount
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_valid;                            // dma_ftdi_tx_usb3_descriptor_slave_agent:rf_source_valid -> dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [376:0] dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_data;                             // dma_ftdi_tx_usb3_descriptor_slave_agent:rf_source_data -> dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_ready;                            // dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:in_ready -> dma_ftdi_tx_usb3_descriptor_slave_agent:rf_source_ready
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_startofpacket;                    // dma_ftdi_tx_usb3_descriptor_slave_agent:rf_source_startofpacket -> dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_endofpacket;                      // dma_ftdi_tx_usb3_descriptor_slave_agent:rf_source_endofpacket -> dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_valid;                         // dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:out_valid -> dma_ftdi_tx_usb3_descriptor_slave_agent:rf_sink_valid
	wire  [376:0] dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_data;                          // dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:out_data -> dma_ftdi_tx_usb3_descriptor_slave_agent:rf_sink_data
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_ready;                         // dma_ftdi_tx_usb3_descriptor_slave_agent:rf_sink_ready -> dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_startofpacket;                 // dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_ftdi_tx_usb3_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_endofpacket;                   // dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_ftdi_tx_usb3_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_src_valid;                       // dma_ftdi_tx_usb3_descriptor_slave_agent:rdata_fifo_src_valid -> dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_src_data;                        // dma_ftdi_tx_usb3_descriptor_slave_agent:rdata_fifo_src_data -> dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_src_ready;                       // dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo:in_ready -> dma_ftdi_tx_usb3_descriptor_slave_agent:rdata_fifo_src_ready
	wire   [31:0] clock_bridge_afi_50_s0_agent_m0_readdata;                                           // clock_bridge_afi_50_s0_translator:uav_readdata -> clock_bridge_afi_50_s0_agent:m0_readdata
	wire          clock_bridge_afi_50_s0_agent_m0_waitrequest;                                        // clock_bridge_afi_50_s0_translator:uav_waitrequest -> clock_bridge_afi_50_s0_agent:m0_waitrequest
	wire          clock_bridge_afi_50_s0_agent_m0_debugaccess;                                        // clock_bridge_afi_50_s0_agent:m0_debugaccess -> clock_bridge_afi_50_s0_translator:uav_debugaccess
	wire   [31:0] clock_bridge_afi_50_s0_agent_m0_address;                                            // clock_bridge_afi_50_s0_agent:m0_address -> clock_bridge_afi_50_s0_translator:uav_address
	wire    [3:0] clock_bridge_afi_50_s0_agent_m0_byteenable;                                         // clock_bridge_afi_50_s0_agent:m0_byteenable -> clock_bridge_afi_50_s0_translator:uav_byteenable
	wire          clock_bridge_afi_50_s0_agent_m0_read;                                               // clock_bridge_afi_50_s0_agent:m0_read -> clock_bridge_afi_50_s0_translator:uav_read
	wire          clock_bridge_afi_50_s0_agent_m0_readdatavalid;                                      // clock_bridge_afi_50_s0_translator:uav_readdatavalid -> clock_bridge_afi_50_s0_agent:m0_readdatavalid
	wire          clock_bridge_afi_50_s0_agent_m0_lock;                                               // clock_bridge_afi_50_s0_agent:m0_lock -> clock_bridge_afi_50_s0_translator:uav_lock
	wire   [31:0] clock_bridge_afi_50_s0_agent_m0_writedata;                                          // clock_bridge_afi_50_s0_agent:m0_writedata -> clock_bridge_afi_50_s0_translator:uav_writedata
	wire          clock_bridge_afi_50_s0_agent_m0_write;                                              // clock_bridge_afi_50_s0_agent:m0_write -> clock_bridge_afi_50_s0_translator:uav_write
	wire    [2:0] clock_bridge_afi_50_s0_agent_m0_burstcount;                                         // clock_bridge_afi_50_s0_agent:m0_burstcount -> clock_bridge_afi_50_s0_translator:uav_burstcount
	wire          clock_bridge_afi_50_s0_agent_rf_source_valid;                                       // clock_bridge_afi_50_s0_agent:rf_source_valid -> clock_bridge_afi_50_s0_agent_rsp_fifo:in_valid
	wire  [124:0] clock_bridge_afi_50_s0_agent_rf_source_data;                                        // clock_bridge_afi_50_s0_agent:rf_source_data -> clock_bridge_afi_50_s0_agent_rsp_fifo:in_data
	wire          clock_bridge_afi_50_s0_agent_rf_source_ready;                                       // clock_bridge_afi_50_s0_agent_rsp_fifo:in_ready -> clock_bridge_afi_50_s0_agent:rf_source_ready
	wire          clock_bridge_afi_50_s0_agent_rf_source_startofpacket;                               // clock_bridge_afi_50_s0_agent:rf_source_startofpacket -> clock_bridge_afi_50_s0_agent_rsp_fifo:in_startofpacket
	wire          clock_bridge_afi_50_s0_agent_rf_source_endofpacket;                                 // clock_bridge_afi_50_s0_agent:rf_source_endofpacket -> clock_bridge_afi_50_s0_agent_rsp_fifo:in_endofpacket
	wire          clock_bridge_afi_50_s0_agent_rsp_fifo_out_valid;                                    // clock_bridge_afi_50_s0_agent_rsp_fifo:out_valid -> clock_bridge_afi_50_s0_agent:rf_sink_valid
	wire  [124:0] clock_bridge_afi_50_s0_agent_rsp_fifo_out_data;                                     // clock_bridge_afi_50_s0_agent_rsp_fifo:out_data -> clock_bridge_afi_50_s0_agent:rf_sink_data
	wire          clock_bridge_afi_50_s0_agent_rsp_fifo_out_ready;                                    // clock_bridge_afi_50_s0_agent:rf_sink_ready -> clock_bridge_afi_50_s0_agent_rsp_fifo:out_ready
	wire          clock_bridge_afi_50_s0_agent_rsp_fifo_out_startofpacket;                            // clock_bridge_afi_50_s0_agent_rsp_fifo:out_startofpacket -> clock_bridge_afi_50_s0_agent:rf_sink_startofpacket
	wire          clock_bridge_afi_50_s0_agent_rsp_fifo_out_endofpacket;                              // clock_bridge_afi_50_s0_agent_rsp_fifo:out_endofpacket -> clock_bridge_afi_50_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_045_src_valid;                                                              // cmd_mux_045:src_valid -> clock_bridge_afi_50_s0_agent:cp_valid
	wire  [123:0] cmd_mux_045_src_data;                                                               // cmd_mux_045:src_data -> clock_bridge_afi_50_s0_agent:cp_data
	wire          cmd_mux_045_src_ready;                                                              // clock_bridge_afi_50_s0_agent:cp_ready -> cmd_mux_045:src_ready
	wire   [48:0] cmd_mux_045_src_channel;                                                            // cmd_mux_045:src_channel -> clock_bridge_afi_50_s0_agent:cp_channel
	wire          cmd_mux_045_src_startofpacket;                                                      // cmd_mux_045:src_startofpacket -> clock_bridge_afi_50_s0_agent:cp_startofpacket
	wire          cmd_mux_045_src_endofpacket;                                                        // cmd_mux_045:src_endofpacket -> clock_bridge_afi_50_s0_agent:cp_endofpacket
	wire   [31:0] onchip_memory_s1_agent_m0_readdata;                                                 // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire          onchip_memory_s1_agent_m0_waitrequest;                                              // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire          onchip_memory_s1_agent_m0_debugaccess;                                              // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory_s1_agent_m0_address;                                                  // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire    [3:0] onchip_memory_s1_agent_m0_byteenable;                                               // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire          onchip_memory_s1_agent_m0_read;                                                     // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire          onchip_memory_s1_agent_m0_readdatavalid;                                            // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire          onchip_memory_s1_agent_m0_lock;                                                     // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire   [31:0] onchip_memory_s1_agent_m0_writedata;                                                // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire          onchip_memory_s1_agent_m0_write;                                                    // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire    [2:0] onchip_memory_s1_agent_m0_burstcount;                                               // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire          onchip_memory_s1_agent_rf_source_valid;                                             // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [124:0] onchip_memory_s1_agent_rf_source_data;                                              // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire          onchip_memory_s1_agent_rf_source_ready;                                             // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire          onchip_memory_s1_agent_rf_source_startofpacket;                                     // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory_s1_agent_rf_source_endofpacket;                                       // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_valid;                                          // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire  [124:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                           // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire          onchip_memory_s1_agent_rsp_fifo_out_ready;                                          // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                                  // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                    // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire   [15:0] ext_flash_uas_agent_m0_readdata;                                                    // ext_flash_uas_translator:uav_readdata -> ext_flash_uas_agent:m0_readdata
	wire          ext_flash_uas_agent_m0_waitrequest;                                                 // ext_flash_uas_translator:uav_waitrequest -> ext_flash_uas_agent:m0_waitrequest
	wire          ext_flash_uas_agent_m0_debugaccess;                                                 // ext_flash_uas_agent:m0_debugaccess -> ext_flash_uas_translator:uav_debugaccess
	wire   [31:0] ext_flash_uas_agent_m0_address;                                                     // ext_flash_uas_agent:m0_address -> ext_flash_uas_translator:uav_address
	wire    [1:0] ext_flash_uas_agent_m0_byteenable;                                                  // ext_flash_uas_agent:m0_byteenable -> ext_flash_uas_translator:uav_byteenable
	wire          ext_flash_uas_agent_m0_read;                                                        // ext_flash_uas_agent:m0_read -> ext_flash_uas_translator:uav_read
	wire          ext_flash_uas_agent_m0_readdatavalid;                                               // ext_flash_uas_translator:uav_readdatavalid -> ext_flash_uas_agent:m0_readdatavalid
	wire          ext_flash_uas_agent_m0_lock;                                                        // ext_flash_uas_agent:m0_lock -> ext_flash_uas_translator:uav_lock
	wire   [15:0] ext_flash_uas_agent_m0_writedata;                                                   // ext_flash_uas_agent:m0_writedata -> ext_flash_uas_translator:uav_writedata
	wire          ext_flash_uas_agent_m0_write;                                                       // ext_flash_uas_agent:m0_write -> ext_flash_uas_translator:uav_write
	wire    [1:0] ext_flash_uas_agent_m0_burstcount;                                                  // ext_flash_uas_agent:m0_burstcount -> ext_flash_uas_translator:uav_burstcount
	wire          ext_flash_uas_agent_rf_source_valid;                                                // ext_flash_uas_agent:rf_source_valid -> ext_flash_uas_agent_rsp_fifo:in_valid
	wire  [106:0] ext_flash_uas_agent_rf_source_data;                                                 // ext_flash_uas_agent:rf_source_data -> ext_flash_uas_agent_rsp_fifo:in_data
	wire          ext_flash_uas_agent_rf_source_ready;                                                // ext_flash_uas_agent_rsp_fifo:in_ready -> ext_flash_uas_agent:rf_source_ready
	wire          ext_flash_uas_agent_rf_source_startofpacket;                                        // ext_flash_uas_agent:rf_source_startofpacket -> ext_flash_uas_agent_rsp_fifo:in_startofpacket
	wire          ext_flash_uas_agent_rf_source_endofpacket;                                          // ext_flash_uas_agent:rf_source_endofpacket -> ext_flash_uas_agent_rsp_fifo:in_endofpacket
	wire          ext_flash_uas_agent_rsp_fifo_out_valid;                                             // ext_flash_uas_agent_rsp_fifo:out_valid -> ext_flash_uas_agent:rf_sink_valid
	wire  [106:0] ext_flash_uas_agent_rsp_fifo_out_data;                                              // ext_flash_uas_agent_rsp_fifo:out_data -> ext_flash_uas_agent:rf_sink_data
	wire          ext_flash_uas_agent_rsp_fifo_out_ready;                                             // ext_flash_uas_agent:rf_sink_ready -> ext_flash_uas_agent_rsp_fifo:out_ready
	wire          ext_flash_uas_agent_rsp_fifo_out_startofpacket;                                     // ext_flash_uas_agent_rsp_fifo:out_startofpacket -> ext_flash_uas_agent:rf_sink_startofpacket
	wire          ext_flash_uas_agent_rsp_fifo_out_endofpacket;                                       // ext_flash_uas_agent_rsp_fifo:out_endofpacket -> ext_flash_uas_agent:rf_sink_endofpacket
	wire          ext_flash_uas_agent_rdata_fifo_src_valid;                                           // ext_flash_uas_agent:rdata_fifo_src_valid -> ext_flash_uas_agent_rdata_fifo:in_valid
	wire   [17:0] ext_flash_uas_agent_rdata_fifo_src_data;                                            // ext_flash_uas_agent:rdata_fifo_src_data -> ext_flash_uas_agent_rdata_fifo:in_data
	wire          ext_flash_uas_agent_rdata_fifo_src_ready;                                           // ext_flash_uas_agent_rdata_fifo:in_ready -> ext_flash_uas_agent:rdata_fifo_src_ready
	wire   [31:0] ddr2_address_span_extender_windowed_slave_agent_m0_readdata;                        // ddr2_address_span_extender_windowed_slave_translator:uav_readdata -> ddr2_address_span_extender_windowed_slave_agent:m0_readdata
	wire          ddr2_address_span_extender_windowed_slave_agent_m0_waitrequest;                     // ddr2_address_span_extender_windowed_slave_translator:uav_waitrequest -> ddr2_address_span_extender_windowed_slave_agent:m0_waitrequest
	wire          ddr2_address_span_extender_windowed_slave_agent_m0_debugaccess;                     // ddr2_address_span_extender_windowed_slave_agent:m0_debugaccess -> ddr2_address_span_extender_windowed_slave_translator:uav_debugaccess
	wire   [31:0] ddr2_address_span_extender_windowed_slave_agent_m0_address;                         // ddr2_address_span_extender_windowed_slave_agent:m0_address -> ddr2_address_span_extender_windowed_slave_translator:uav_address
	wire    [3:0] ddr2_address_span_extender_windowed_slave_agent_m0_byteenable;                      // ddr2_address_span_extender_windowed_slave_agent:m0_byteenable -> ddr2_address_span_extender_windowed_slave_translator:uav_byteenable
	wire          ddr2_address_span_extender_windowed_slave_agent_m0_read;                            // ddr2_address_span_extender_windowed_slave_agent:m0_read -> ddr2_address_span_extender_windowed_slave_translator:uav_read
	wire          ddr2_address_span_extender_windowed_slave_agent_m0_readdatavalid;                   // ddr2_address_span_extender_windowed_slave_translator:uav_readdatavalid -> ddr2_address_span_extender_windowed_slave_agent:m0_readdatavalid
	wire          ddr2_address_span_extender_windowed_slave_agent_m0_lock;                            // ddr2_address_span_extender_windowed_slave_agent:m0_lock -> ddr2_address_span_extender_windowed_slave_translator:uav_lock
	wire   [31:0] ddr2_address_span_extender_windowed_slave_agent_m0_writedata;                       // ddr2_address_span_extender_windowed_slave_agent:m0_writedata -> ddr2_address_span_extender_windowed_slave_translator:uav_writedata
	wire          ddr2_address_span_extender_windowed_slave_agent_m0_write;                           // ddr2_address_span_extender_windowed_slave_agent:m0_write -> ddr2_address_span_extender_windowed_slave_translator:uav_write
	wire    [9:0] ddr2_address_span_extender_windowed_slave_agent_m0_burstcount;                      // ddr2_address_span_extender_windowed_slave_agent:m0_burstcount -> ddr2_address_span_extender_windowed_slave_translator:uav_burstcount
	wire          ddr2_address_span_extender_windowed_slave_agent_rf_source_valid;                    // ddr2_address_span_extender_windowed_slave_agent:rf_source_valid -> ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:in_valid
	wire  [124:0] ddr2_address_span_extender_windowed_slave_agent_rf_source_data;                     // ddr2_address_span_extender_windowed_slave_agent:rf_source_data -> ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:in_data
	wire          ddr2_address_span_extender_windowed_slave_agent_rf_source_ready;                    // ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:in_ready -> ddr2_address_span_extender_windowed_slave_agent:rf_source_ready
	wire          ddr2_address_span_extender_windowed_slave_agent_rf_source_startofpacket;            // ddr2_address_span_extender_windowed_slave_agent:rf_source_startofpacket -> ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          ddr2_address_span_extender_windowed_slave_agent_rf_source_endofpacket;              // ddr2_address_span_extender_windowed_slave_agent:rf_source_endofpacket -> ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_valid;                 // ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:out_valid -> ddr2_address_span_extender_windowed_slave_agent:rf_sink_valid
	wire  [124:0] ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_data;                  // ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:out_data -> ddr2_address_span_extender_windowed_slave_agent:rf_sink_data
	wire          ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_ready;                 // ddr2_address_span_extender_windowed_slave_agent:rf_sink_ready -> ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:out_ready
	wire          ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_startofpacket;         // ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:out_startofpacket -> ddr2_address_span_extender_windowed_slave_agent:rf_sink_startofpacket
	wire          ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_endofpacket;           // ddr2_address_span_extender_windowed_slave_agent_rsp_fifo:out_endofpacket -> ddr2_address_span_extender_windowed_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_048_src_valid;                                                              // cmd_mux_048:src_valid -> ddr2_address_span_extender_windowed_slave_agent:cp_valid
	wire  [123:0] cmd_mux_048_src_data;                                                               // cmd_mux_048:src_data -> ddr2_address_span_extender_windowed_slave_agent:cp_data
	wire          cmd_mux_048_src_ready;                                                              // ddr2_address_span_extender_windowed_slave_agent:cp_ready -> cmd_mux_048:src_ready
	wire   [48:0] cmd_mux_048_src_channel;                                                            // cmd_mux_048:src_channel -> ddr2_address_span_extender_windowed_slave_agent:cp_channel
	wire          cmd_mux_048_src_startofpacket;                                                      // cmd_mux_048:src_startofpacket -> ddr2_address_span_extender_windowed_slave_agent:cp_startofpacket
	wire          cmd_mux_048_src_endofpacket;                                                        // cmd_mux_048:src_endofpacket -> ddr2_address_span_extender_windowed_slave_agent:cp_endofpacket
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [123:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [123:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [48:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [123:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [123:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [123:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire   [48:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_valid;                            // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rp_valid -> router_003:sink_valid
	wire  [123:0] rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_data;                             // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rp_data -> router_003:sink_data
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_ready;                            // router_003:sink_ready -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rp_ready
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_startofpacket;                    // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_endofpacket;                      // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [123:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [48:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_valid;                            // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rp_valid -> router_004:sink_valid
	wire  [123:0] rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_data;                             // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rp_data -> router_004:sink_data
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_ready;                            // router_004:sink_ready -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rp_ready
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_startofpacket;                    // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_endofpacket;                      // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [123:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [48:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_valid;                            // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rp_valid -> router_005:sink_valid
	wire  [123:0] rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_data;                             // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rp_data -> router_005:sink_data
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_ready;                            // router_005:sink_ready -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rp_ready
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_startofpacket;                    // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_endofpacket;                      // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [123:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [48:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_valid;                            // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rp_valid -> router_006:sink_valid
	wire  [123:0] rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_data;                             // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rp_data -> router_006:sink_data
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_ready;                            // router_006:sink_ready -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rp_ready
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_startofpacket;                    // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_endofpacket;                      // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [123:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [48:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_valid;                            // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rp_valid -> router_007:sink_valid
	wire  [123:0] rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_data;                             // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rp_data -> router_007:sink_data
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_ready;                            // router_007:sink_ready -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rp_ready
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_startofpacket;                    // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_endofpacket;                      // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [123:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [48:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_valid;                            // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rp_valid -> router_008:sink_valid
	wire  [123:0] rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_data;                             // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rp_data -> router_008:sink_data
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_ready;                            // router_008:sink_ready -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rp_ready
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_startofpacket;                    // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_endofpacket;                      // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [123:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [48:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          ftdi_usb3_0_avalon_slave_config_agent_rp_valid;                                     // FTDI_USB3_0_avalon_slave_config_agent:rp_valid -> router_009:sink_valid
	wire  [123:0] ftdi_usb3_0_avalon_slave_config_agent_rp_data;                                      // FTDI_USB3_0_avalon_slave_config_agent:rp_data -> router_009:sink_data
	wire          ftdi_usb3_0_avalon_slave_config_agent_rp_ready;                                     // router_009:sink_ready -> FTDI_USB3_0_avalon_slave_config_agent:rp_ready
	wire          ftdi_usb3_0_avalon_slave_config_agent_rp_startofpacket;                             // FTDI_USB3_0_avalon_slave_config_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          ftdi_usb3_0_avalon_slave_config_agent_rp_endofpacket;                               // FTDI_USB3_0_avalon_slave_config_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [123:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [48:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_valid;                        // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rp_valid -> router_010:sink_valid
	wire  [123:0] comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_data;                         // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rp_data -> router_010:sink_data
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_ready;                        // router_010:sink_ready -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rp_ready
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_startofpacket;                // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_endofpacket;                  // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [123:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [48:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_valid;                        // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rp_valid -> router_011:sink_valid
	wire  [123:0] comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_data;                         // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rp_data -> router_011:sink_data
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_ready;                        // router_011:sink_ready -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rp_ready
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_startofpacket;                // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_endofpacket;                  // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [123:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [48:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_valid;                        // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rp_valid -> router_012:sink_valid
	wire  [123:0] comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_data;                         // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rp_data -> router_012:sink_data
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_ready;                        // router_012:sink_ready -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rp_ready
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_startofpacket;                // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_endofpacket;                  // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [123:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [48:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_valid;                        // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rp_valid -> router_013:sink_valid
	wire  [123:0] comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_data;                         // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rp_data -> router_013:sink_data
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_ready;                        // router_013:sink_ready -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rp_ready
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_startofpacket;                // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_endofpacket;                  // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [123:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                               // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [48:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_valid;                        // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rp_valid -> router_014:sink_valid
	wire  [123:0] comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_data;                         // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rp_data -> router_014:sink_data
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_ready;                        // router_014:sink_ready -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rp_ready
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_startofpacket;                // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_endofpacket;                  // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [123:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [48:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_valid;                        // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rp_valid -> router_015:sink_valid
	wire  [123:0] comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_data;                         // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rp_data -> router_015:sink_data
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_ready;                        // router_015:sink_ready -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rp_ready
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_startofpacket;                // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_endofpacket;                  // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [123:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [48:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          ddr2_address_span_extender_cntl_agent_rp_valid;                                     // ddr2_address_span_extender_cntl_agent:rp_valid -> router_016:sink_valid
	wire  [159:0] ddr2_address_span_extender_cntl_agent_rp_data;                                      // ddr2_address_span_extender_cntl_agent:rp_data -> router_016:sink_data
	wire          ddr2_address_span_extender_cntl_agent_rp_ready;                                     // router_016:sink_ready -> ddr2_address_span_extender_cntl_agent:rp_ready
	wire          ddr2_address_span_extender_cntl_agent_rp_startofpacket;                             // ddr2_address_span_extender_cntl_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          ddr2_address_span_extender_cntl_agent_rp_endofpacket;                               // ddr2_address_span_extender_cntl_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                            // sysid_qsys_control_slave_agent:rp_valid -> router_017:sink_valid
	wire  [123:0] sysid_qsys_control_slave_agent_rp_data;                                             // sysid_qsys_control_slave_agent:rp_data -> router_017:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                            // router_017:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                                    // sysid_qsys_control_slave_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                                      // sysid_qsys_control_slave_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [123:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [48:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          dma_comm_1_left_csr_agent_rp_valid;                                                 // dma_comm_1_left_csr_agent:rp_valid -> router_018:sink_valid
	wire  [123:0] dma_comm_1_left_csr_agent_rp_data;                                                  // dma_comm_1_left_csr_agent:rp_data -> router_018:sink_data
	wire          dma_comm_1_left_csr_agent_rp_ready;                                                 // router_018:sink_ready -> dma_comm_1_left_csr_agent:rp_ready
	wire          dma_comm_1_left_csr_agent_rp_startofpacket;                                         // dma_comm_1_left_csr_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          dma_comm_1_left_csr_agent_rp_endofpacket;                                           // dma_comm_1_left_csr_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [123:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [48:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          dma_comm_1_right_csr_agent_rp_valid;                                                // dma_comm_1_right_csr_agent:rp_valid -> router_019:sink_valid
	wire  [123:0] dma_comm_1_right_csr_agent_rp_data;                                                 // dma_comm_1_right_csr_agent:rp_data -> router_019:sink_data
	wire          dma_comm_1_right_csr_agent_rp_ready;                                                // router_019:sink_ready -> dma_comm_1_right_csr_agent:rp_ready
	wire          dma_comm_1_right_csr_agent_rp_startofpacket;                                        // dma_comm_1_right_csr_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          dma_comm_1_right_csr_agent_rp_endofpacket;                                          // dma_comm_1_right_csr_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [123:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                               // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [48:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          dma_comm_2_left_csr_agent_rp_valid;                                                 // dma_comm_2_left_csr_agent:rp_valid -> router_020:sink_valid
	wire  [123:0] dma_comm_2_left_csr_agent_rp_data;                                                  // dma_comm_2_left_csr_agent:rp_data -> router_020:sink_data
	wire          dma_comm_2_left_csr_agent_rp_ready;                                                 // router_020:sink_ready -> dma_comm_2_left_csr_agent:rp_ready
	wire          dma_comm_2_left_csr_agent_rp_startofpacket;                                         // dma_comm_2_left_csr_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          dma_comm_2_left_csr_agent_rp_endofpacket;                                           // dma_comm_2_left_csr_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [123:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                               // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [48:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          dma_comm_2_right_csr_agent_rp_valid;                                                // dma_comm_2_right_csr_agent:rp_valid -> router_021:sink_valid
	wire  [123:0] dma_comm_2_right_csr_agent_rp_data;                                                 // dma_comm_2_right_csr_agent:rp_data -> router_021:sink_data
	wire          dma_comm_2_right_csr_agent_rp_ready;                                                // router_021:sink_ready -> dma_comm_2_right_csr_agent:rp_ready
	wire          dma_comm_2_right_csr_agent_rp_startofpacket;                                        // dma_comm_2_right_csr_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          dma_comm_2_right_csr_agent_rp_endofpacket;                                          // dma_comm_2_right_csr_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                               // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [123:0] router_021_src_data;                                                                // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                               // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [48:0] router_021_src_channel;                                                             // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                                       // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                                         // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          dma_comm_3_left_csr_agent_rp_valid;                                                 // dma_comm_3_left_csr_agent:rp_valid -> router_022:sink_valid
	wire  [123:0] dma_comm_3_left_csr_agent_rp_data;                                                  // dma_comm_3_left_csr_agent:rp_data -> router_022:sink_data
	wire          dma_comm_3_left_csr_agent_rp_ready;                                                 // router_022:sink_ready -> dma_comm_3_left_csr_agent:rp_ready
	wire          dma_comm_3_left_csr_agent_rp_startofpacket;                                         // dma_comm_3_left_csr_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          dma_comm_3_left_csr_agent_rp_endofpacket;                                           // dma_comm_3_left_csr_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                               // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [123:0] router_022_src_data;                                                                // router_022:src_data -> rsp_demux_020:sink_data
	wire          router_022_src_ready;                                                               // rsp_demux_020:sink_ready -> router_022:src_ready
	wire   [48:0] router_022_src_channel;                                                             // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_startofpacket;                                                       // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_022_src_endofpacket;                                                         // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          dma_comm_3_right_csr_agent_rp_valid;                                                // dma_comm_3_right_csr_agent:rp_valid -> router_023:sink_valid
	wire  [123:0] dma_comm_3_right_csr_agent_rp_data;                                                 // dma_comm_3_right_csr_agent:rp_data -> router_023:sink_data
	wire          dma_comm_3_right_csr_agent_rp_ready;                                                // router_023:sink_ready -> dma_comm_3_right_csr_agent:rp_ready
	wire          dma_comm_3_right_csr_agent_rp_startofpacket;                                        // dma_comm_3_right_csr_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          dma_comm_3_right_csr_agent_rp_endofpacket;                                          // dma_comm_3_right_csr_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                               // router_023:src_valid -> rsp_demux_021:sink_valid
	wire  [123:0] router_023_src_data;                                                                // router_023:src_data -> rsp_demux_021:sink_data
	wire          router_023_src_ready;                                                               // rsp_demux_021:sink_ready -> router_023:src_ready
	wire   [48:0] router_023_src_channel;                                                             // router_023:src_channel -> rsp_demux_021:sink_channel
	wire          router_023_src_startofpacket;                                                       // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_023_src_endofpacket;                                                         // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          dma_comm_4_left_csr_agent_rp_valid;                                                 // dma_comm_4_left_csr_agent:rp_valid -> router_024:sink_valid
	wire  [123:0] dma_comm_4_left_csr_agent_rp_data;                                                  // dma_comm_4_left_csr_agent:rp_data -> router_024:sink_data
	wire          dma_comm_4_left_csr_agent_rp_ready;                                                 // router_024:sink_ready -> dma_comm_4_left_csr_agent:rp_ready
	wire          dma_comm_4_left_csr_agent_rp_startofpacket;                                         // dma_comm_4_left_csr_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          dma_comm_4_left_csr_agent_rp_endofpacket;                                           // dma_comm_4_left_csr_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                               // router_024:src_valid -> rsp_demux_022:sink_valid
	wire  [123:0] router_024_src_data;                                                                // router_024:src_data -> rsp_demux_022:sink_data
	wire          router_024_src_ready;                                                               // rsp_demux_022:sink_ready -> router_024:src_ready
	wire   [48:0] router_024_src_channel;                                                             // router_024:src_channel -> rsp_demux_022:sink_channel
	wire          router_024_src_startofpacket;                                                       // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_024_src_endofpacket;                                                         // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          dma_comm_4_right_csr_agent_rp_valid;                                                // dma_comm_4_right_csr_agent:rp_valid -> router_025:sink_valid
	wire  [123:0] dma_comm_4_right_csr_agent_rp_data;                                                 // dma_comm_4_right_csr_agent:rp_data -> router_025:sink_data
	wire          dma_comm_4_right_csr_agent_rp_ready;                                                // router_025:sink_ready -> dma_comm_4_right_csr_agent:rp_ready
	wire          dma_comm_4_right_csr_agent_rp_startofpacket;                                        // dma_comm_4_right_csr_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          dma_comm_4_right_csr_agent_rp_endofpacket;                                          // dma_comm_4_right_csr_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                               // router_025:src_valid -> rsp_demux_023:sink_valid
	wire  [123:0] router_025_src_data;                                                                // router_025:src_data -> rsp_demux_023:sink_data
	wire          router_025_src_ready;                                                               // rsp_demux_023:sink_ready -> router_025:src_ready
	wire   [48:0] router_025_src_channel;                                                             // router_025:src_channel -> rsp_demux_023:sink_channel
	wire          router_025_src_startofpacket;                                                       // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_025_src_endofpacket;                                                         // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          dma_comm_5_left_csr_agent_rp_valid;                                                 // dma_comm_5_left_csr_agent:rp_valid -> router_026:sink_valid
	wire  [123:0] dma_comm_5_left_csr_agent_rp_data;                                                  // dma_comm_5_left_csr_agent:rp_data -> router_026:sink_data
	wire          dma_comm_5_left_csr_agent_rp_ready;                                                 // router_026:sink_ready -> dma_comm_5_left_csr_agent:rp_ready
	wire          dma_comm_5_left_csr_agent_rp_startofpacket;                                         // dma_comm_5_left_csr_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          dma_comm_5_left_csr_agent_rp_endofpacket;                                           // dma_comm_5_left_csr_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                               // router_026:src_valid -> rsp_demux_024:sink_valid
	wire  [123:0] router_026_src_data;                                                                // router_026:src_data -> rsp_demux_024:sink_data
	wire          router_026_src_ready;                                                               // rsp_demux_024:sink_ready -> router_026:src_ready
	wire   [48:0] router_026_src_channel;                                                             // router_026:src_channel -> rsp_demux_024:sink_channel
	wire          router_026_src_startofpacket;                                                       // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_026_src_endofpacket;                                                         // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          dma_comm_5_right_csr_agent_rp_valid;                                                // dma_comm_5_right_csr_agent:rp_valid -> router_027:sink_valid
	wire  [123:0] dma_comm_5_right_csr_agent_rp_data;                                                 // dma_comm_5_right_csr_agent:rp_data -> router_027:sink_data
	wire          dma_comm_5_right_csr_agent_rp_ready;                                                // router_027:sink_ready -> dma_comm_5_right_csr_agent:rp_ready
	wire          dma_comm_5_right_csr_agent_rp_startofpacket;                                        // dma_comm_5_right_csr_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          dma_comm_5_right_csr_agent_rp_endofpacket;                                          // dma_comm_5_right_csr_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                               // router_027:src_valid -> rsp_demux_025:sink_valid
	wire  [123:0] router_027_src_data;                                                                // router_027:src_data -> rsp_demux_025:sink_data
	wire          router_027_src_ready;                                                               // rsp_demux_025:sink_ready -> router_027:src_ready
	wire   [48:0] router_027_src_channel;                                                             // router_027:src_channel -> rsp_demux_025:sink_channel
	wire          router_027_src_startofpacket;                                                       // router_027:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_027_src_endofpacket;                                                         // router_027:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          dma_comm_6_left_csr_agent_rp_valid;                                                 // dma_comm_6_left_csr_agent:rp_valid -> router_028:sink_valid
	wire  [123:0] dma_comm_6_left_csr_agent_rp_data;                                                  // dma_comm_6_left_csr_agent:rp_data -> router_028:sink_data
	wire          dma_comm_6_left_csr_agent_rp_ready;                                                 // router_028:sink_ready -> dma_comm_6_left_csr_agent:rp_ready
	wire          dma_comm_6_left_csr_agent_rp_startofpacket;                                         // dma_comm_6_left_csr_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          dma_comm_6_left_csr_agent_rp_endofpacket;                                           // dma_comm_6_left_csr_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                               // router_028:src_valid -> rsp_demux_026:sink_valid
	wire  [123:0] router_028_src_data;                                                                // router_028:src_data -> rsp_demux_026:sink_data
	wire          router_028_src_ready;                                                               // rsp_demux_026:sink_ready -> router_028:src_ready
	wire   [48:0] router_028_src_channel;                                                             // router_028:src_channel -> rsp_demux_026:sink_channel
	wire          router_028_src_startofpacket;                                                       // router_028:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_028_src_endofpacket;                                                         // router_028:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          dma_comm_6_right_csr_agent_rp_valid;                                                // dma_comm_6_right_csr_agent:rp_valid -> router_029:sink_valid
	wire  [123:0] dma_comm_6_right_csr_agent_rp_data;                                                 // dma_comm_6_right_csr_agent:rp_data -> router_029:sink_data
	wire          dma_comm_6_right_csr_agent_rp_ready;                                                // router_029:sink_ready -> dma_comm_6_right_csr_agent:rp_ready
	wire          dma_comm_6_right_csr_agent_rp_startofpacket;                                        // dma_comm_6_right_csr_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          dma_comm_6_right_csr_agent_rp_endofpacket;                                          // dma_comm_6_right_csr_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                               // router_029:src_valid -> rsp_demux_027:sink_valid
	wire  [123:0] router_029_src_data;                                                                // router_029:src_data -> rsp_demux_027:sink_data
	wire          router_029_src_ready;                                                               // rsp_demux_027:sink_ready -> router_029:src_ready
	wire   [48:0] router_029_src_channel;                                                             // router_029:src_channel -> rsp_demux_027:sink_channel
	wire          router_029_src_startofpacket;                                                       // router_029:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_029_src_endofpacket;                                                         // router_029:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          dma_ftdi_rx_usb3_csr_agent_rp_valid;                                                // dma_ftdi_rx_usb3_csr_agent:rp_valid -> router_030:sink_valid
	wire  [123:0] dma_ftdi_rx_usb3_csr_agent_rp_data;                                                 // dma_ftdi_rx_usb3_csr_agent:rp_data -> router_030:sink_data
	wire          dma_ftdi_rx_usb3_csr_agent_rp_ready;                                                // router_030:sink_ready -> dma_ftdi_rx_usb3_csr_agent:rp_ready
	wire          dma_ftdi_rx_usb3_csr_agent_rp_startofpacket;                                        // dma_ftdi_rx_usb3_csr_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          dma_ftdi_rx_usb3_csr_agent_rp_endofpacket;                                          // dma_ftdi_rx_usb3_csr_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                               // router_030:src_valid -> rsp_demux_028:sink_valid
	wire  [123:0] router_030_src_data;                                                                // router_030:src_data -> rsp_demux_028:sink_data
	wire          router_030_src_ready;                                                               // rsp_demux_028:sink_ready -> router_030:src_ready
	wire   [48:0] router_030_src_channel;                                                             // router_030:src_channel -> rsp_demux_028:sink_channel
	wire          router_030_src_startofpacket;                                                       // router_030:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_030_src_endofpacket;                                                         // router_030:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          dma_ftdi_tx_usb3_csr_agent_rp_valid;                                                // dma_ftdi_tx_usb3_csr_agent:rp_valid -> router_031:sink_valid
	wire  [123:0] dma_ftdi_tx_usb3_csr_agent_rp_data;                                                 // dma_ftdi_tx_usb3_csr_agent:rp_data -> router_031:sink_data
	wire          dma_ftdi_tx_usb3_csr_agent_rp_ready;                                                // router_031:sink_ready -> dma_ftdi_tx_usb3_csr_agent:rp_ready
	wire          dma_ftdi_tx_usb3_csr_agent_rp_startofpacket;                                        // dma_ftdi_tx_usb3_csr_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          dma_ftdi_tx_usb3_csr_agent_rp_endofpacket;                                          // dma_ftdi_tx_usb3_csr_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                               // router_031:src_valid -> rsp_demux_029:sink_valid
	wire  [123:0] router_031_src_data;                                                                // router_031:src_data -> rsp_demux_029:sink_data
	wire          router_031_src_ready;                                                               // rsp_demux_029:sink_ready -> router_031:src_ready
	wire   [48:0] router_031_src_channel;                                                             // router_031:src_channel -> rsp_demux_029:sink_channel
	wire          router_031_src_startofpacket;                                                       // router_031:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_031_src_endofpacket;                                                         // router_031:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_032:sink_valid
	wire  [123:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_032:sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // router_032:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                               // router_032:src_valid -> rsp_demux_030:sink_valid
	wire  [123:0] router_032_src_data;                                                                // router_032:src_data -> rsp_demux_030:sink_data
	wire          router_032_src_ready;                                                               // rsp_demux_030:sink_ready -> router_032:src_ready
	wire   [48:0] router_032_src_channel;                                                             // router_032:src_channel -> rsp_demux_030:sink_channel
	wire          router_032_src_startofpacket;                                                       // router_032:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_032_src_endofpacket;                                                         // router_032:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          dma_comm_1_left_descriptor_slave_agent_rp_valid;                                    // dma_comm_1_left_descriptor_slave_agent:rp_valid -> router_033:sink_valid
	wire  [375:0] dma_comm_1_left_descriptor_slave_agent_rp_data;                                     // dma_comm_1_left_descriptor_slave_agent:rp_data -> router_033:sink_data
	wire          dma_comm_1_left_descriptor_slave_agent_rp_ready;                                    // router_033:sink_ready -> dma_comm_1_left_descriptor_slave_agent:rp_ready
	wire          dma_comm_1_left_descriptor_slave_agent_rp_startofpacket;                            // dma_comm_1_left_descriptor_slave_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          dma_comm_1_left_descriptor_slave_agent_rp_endofpacket;                              // dma_comm_1_left_descriptor_slave_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          dma_comm_1_right_descriptor_slave_agent_rp_valid;                                   // dma_comm_1_right_descriptor_slave_agent:rp_valid -> router_034:sink_valid
	wire  [375:0] dma_comm_1_right_descriptor_slave_agent_rp_data;                                    // dma_comm_1_right_descriptor_slave_agent:rp_data -> router_034:sink_data
	wire          dma_comm_1_right_descriptor_slave_agent_rp_ready;                                   // router_034:sink_ready -> dma_comm_1_right_descriptor_slave_agent:rp_ready
	wire          dma_comm_1_right_descriptor_slave_agent_rp_startofpacket;                           // dma_comm_1_right_descriptor_slave_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          dma_comm_1_right_descriptor_slave_agent_rp_endofpacket;                             // dma_comm_1_right_descriptor_slave_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          dma_comm_2_left_descriptor_slave_agent_rp_valid;                                    // dma_comm_2_left_descriptor_slave_agent:rp_valid -> router_035:sink_valid
	wire  [375:0] dma_comm_2_left_descriptor_slave_agent_rp_data;                                     // dma_comm_2_left_descriptor_slave_agent:rp_data -> router_035:sink_data
	wire          dma_comm_2_left_descriptor_slave_agent_rp_ready;                                    // router_035:sink_ready -> dma_comm_2_left_descriptor_slave_agent:rp_ready
	wire          dma_comm_2_left_descriptor_slave_agent_rp_startofpacket;                            // dma_comm_2_left_descriptor_slave_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          dma_comm_2_left_descriptor_slave_agent_rp_endofpacket;                              // dma_comm_2_left_descriptor_slave_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          dma_comm_2_right_descriptor_slave_agent_rp_valid;                                   // dma_comm_2_right_descriptor_slave_agent:rp_valid -> router_036:sink_valid
	wire  [375:0] dma_comm_2_right_descriptor_slave_agent_rp_data;                                    // dma_comm_2_right_descriptor_slave_agent:rp_data -> router_036:sink_data
	wire          dma_comm_2_right_descriptor_slave_agent_rp_ready;                                   // router_036:sink_ready -> dma_comm_2_right_descriptor_slave_agent:rp_ready
	wire          dma_comm_2_right_descriptor_slave_agent_rp_startofpacket;                           // dma_comm_2_right_descriptor_slave_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          dma_comm_2_right_descriptor_slave_agent_rp_endofpacket;                             // dma_comm_2_right_descriptor_slave_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          dma_comm_3_left_descriptor_slave_agent_rp_valid;                                    // dma_comm_3_left_descriptor_slave_agent:rp_valid -> router_037:sink_valid
	wire  [375:0] dma_comm_3_left_descriptor_slave_agent_rp_data;                                     // dma_comm_3_left_descriptor_slave_agent:rp_data -> router_037:sink_data
	wire          dma_comm_3_left_descriptor_slave_agent_rp_ready;                                    // router_037:sink_ready -> dma_comm_3_left_descriptor_slave_agent:rp_ready
	wire          dma_comm_3_left_descriptor_slave_agent_rp_startofpacket;                            // dma_comm_3_left_descriptor_slave_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire          dma_comm_3_left_descriptor_slave_agent_rp_endofpacket;                              // dma_comm_3_left_descriptor_slave_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          dma_comm_3_right_descriptor_slave_agent_rp_valid;                                   // dma_comm_3_right_descriptor_slave_agent:rp_valid -> router_038:sink_valid
	wire  [375:0] dma_comm_3_right_descriptor_slave_agent_rp_data;                                    // dma_comm_3_right_descriptor_slave_agent:rp_data -> router_038:sink_data
	wire          dma_comm_3_right_descriptor_slave_agent_rp_ready;                                   // router_038:sink_ready -> dma_comm_3_right_descriptor_slave_agent:rp_ready
	wire          dma_comm_3_right_descriptor_slave_agent_rp_startofpacket;                           // dma_comm_3_right_descriptor_slave_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire          dma_comm_3_right_descriptor_slave_agent_rp_endofpacket;                             // dma_comm_3_right_descriptor_slave_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          dma_comm_4_left_descriptor_slave_agent_rp_valid;                                    // dma_comm_4_left_descriptor_slave_agent:rp_valid -> router_039:sink_valid
	wire  [375:0] dma_comm_4_left_descriptor_slave_agent_rp_data;                                     // dma_comm_4_left_descriptor_slave_agent:rp_data -> router_039:sink_data
	wire          dma_comm_4_left_descriptor_slave_agent_rp_ready;                                    // router_039:sink_ready -> dma_comm_4_left_descriptor_slave_agent:rp_ready
	wire          dma_comm_4_left_descriptor_slave_agent_rp_startofpacket;                            // dma_comm_4_left_descriptor_slave_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire          dma_comm_4_left_descriptor_slave_agent_rp_endofpacket;                              // dma_comm_4_left_descriptor_slave_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          dma_comm_4_right_descriptor_slave_agent_rp_valid;                                   // dma_comm_4_right_descriptor_slave_agent:rp_valid -> router_040:sink_valid
	wire  [375:0] dma_comm_4_right_descriptor_slave_agent_rp_data;                                    // dma_comm_4_right_descriptor_slave_agent:rp_data -> router_040:sink_data
	wire          dma_comm_4_right_descriptor_slave_agent_rp_ready;                                   // router_040:sink_ready -> dma_comm_4_right_descriptor_slave_agent:rp_ready
	wire          dma_comm_4_right_descriptor_slave_agent_rp_startofpacket;                           // dma_comm_4_right_descriptor_slave_agent:rp_startofpacket -> router_040:sink_startofpacket
	wire          dma_comm_4_right_descriptor_slave_agent_rp_endofpacket;                             // dma_comm_4_right_descriptor_slave_agent:rp_endofpacket -> router_040:sink_endofpacket
	wire          dma_comm_5_left_descriptor_slave_agent_rp_valid;                                    // dma_comm_5_left_descriptor_slave_agent:rp_valid -> router_041:sink_valid
	wire  [375:0] dma_comm_5_left_descriptor_slave_agent_rp_data;                                     // dma_comm_5_left_descriptor_slave_agent:rp_data -> router_041:sink_data
	wire          dma_comm_5_left_descriptor_slave_agent_rp_ready;                                    // router_041:sink_ready -> dma_comm_5_left_descriptor_slave_agent:rp_ready
	wire          dma_comm_5_left_descriptor_slave_agent_rp_startofpacket;                            // dma_comm_5_left_descriptor_slave_agent:rp_startofpacket -> router_041:sink_startofpacket
	wire          dma_comm_5_left_descriptor_slave_agent_rp_endofpacket;                              // dma_comm_5_left_descriptor_slave_agent:rp_endofpacket -> router_041:sink_endofpacket
	wire          dma_comm_5_right_descriptor_slave_agent_rp_valid;                                   // dma_comm_5_right_descriptor_slave_agent:rp_valid -> router_042:sink_valid
	wire  [375:0] dma_comm_5_right_descriptor_slave_agent_rp_data;                                    // dma_comm_5_right_descriptor_slave_agent:rp_data -> router_042:sink_data
	wire          dma_comm_5_right_descriptor_slave_agent_rp_ready;                                   // router_042:sink_ready -> dma_comm_5_right_descriptor_slave_agent:rp_ready
	wire          dma_comm_5_right_descriptor_slave_agent_rp_startofpacket;                           // dma_comm_5_right_descriptor_slave_agent:rp_startofpacket -> router_042:sink_startofpacket
	wire          dma_comm_5_right_descriptor_slave_agent_rp_endofpacket;                             // dma_comm_5_right_descriptor_slave_agent:rp_endofpacket -> router_042:sink_endofpacket
	wire          dma_comm_6_left_descriptor_slave_agent_rp_valid;                                    // dma_comm_6_left_descriptor_slave_agent:rp_valid -> router_043:sink_valid
	wire  [375:0] dma_comm_6_left_descriptor_slave_agent_rp_data;                                     // dma_comm_6_left_descriptor_slave_agent:rp_data -> router_043:sink_data
	wire          dma_comm_6_left_descriptor_slave_agent_rp_ready;                                    // router_043:sink_ready -> dma_comm_6_left_descriptor_slave_agent:rp_ready
	wire          dma_comm_6_left_descriptor_slave_agent_rp_startofpacket;                            // dma_comm_6_left_descriptor_slave_agent:rp_startofpacket -> router_043:sink_startofpacket
	wire          dma_comm_6_left_descriptor_slave_agent_rp_endofpacket;                              // dma_comm_6_left_descriptor_slave_agent:rp_endofpacket -> router_043:sink_endofpacket
	wire          dma_comm_6_right_descriptor_slave_agent_rp_valid;                                   // dma_comm_6_right_descriptor_slave_agent:rp_valid -> router_044:sink_valid
	wire  [375:0] dma_comm_6_right_descriptor_slave_agent_rp_data;                                    // dma_comm_6_right_descriptor_slave_agent:rp_data -> router_044:sink_data
	wire          dma_comm_6_right_descriptor_slave_agent_rp_ready;                                   // router_044:sink_ready -> dma_comm_6_right_descriptor_slave_agent:rp_ready
	wire          dma_comm_6_right_descriptor_slave_agent_rp_startofpacket;                           // dma_comm_6_right_descriptor_slave_agent:rp_startofpacket -> router_044:sink_startofpacket
	wire          dma_comm_6_right_descriptor_slave_agent_rp_endofpacket;                             // dma_comm_6_right_descriptor_slave_agent:rp_endofpacket -> router_044:sink_endofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rp_valid;                                   // dma_ftdi_rx_usb3_descriptor_slave_agent:rp_valid -> router_045:sink_valid
	wire  [375:0] dma_ftdi_rx_usb3_descriptor_slave_agent_rp_data;                                    // dma_ftdi_rx_usb3_descriptor_slave_agent:rp_data -> router_045:sink_data
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rp_ready;                                   // router_045:sink_ready -> dma_ftdi_rx_usb3_descriptor_slave_agent:rp_ready
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rp_startofpacket;                           // dma_ftdi_rx_usb3_descriptor_slave_agent:rp_startofpacket -> router_045:sink_startofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rp_endofpacket;                             // dma_ftdi_rx_usb3_descriptor_slave_agent:rp_endofpacket -> router_045:sink_endofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rp_valid;                                   // dma_ftdi_tx_usb3_descriptor_slave_agent:rp_valid -> router_046:sink_valid
	wire  [375:0] dma_ftdi_tx_usb3_descriptor_slave_agent_rp_data;                                    // dma_ftdi_tx_usb3_descriptor_slave_agent:rp_data -> router_046:sink_data
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rp_ready;                                   // router_046:sink_ready -> dma_ftdi_tx_usb3_descriptor_slave_agent:rp_ready
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rp_startofpacket;                           // dma_ftdi_tx_usb3_descriptor_slave_agent:rp_startofpacket -> router_046:sink_startofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rp_endofpacket;                             // dma_ftdi_tx_usb3_descriptor_slave_agent:rp_endofpacket -> router_046:sink_endofpacket
	wire          clock_bridge_afi_50_s0_agent_rp_valid;                                              // clock_bridge_afi_50_s0_agent:rp_valid -> router_047:sink_valid
	wire  [123:0] clock_bridge_afi_50_s0_agent_rp_data;                                               // clock_bridge_afi_50_s0_agent:rp_data -> router_047:sink_data
	wire          clock_bridge_afi_50_s0_agent_rp_ready;                                              // router_047:sink_ready -> clock_bridge_afi_50_s0_agent:rp_ready
	wire          clock_bridge_afi_50_s0_agent_rp_startofpacket;                                      // clock_bridge_afi_50_s0_agent:rp_startofpacket -> router_047:sink_startofpacket
	wire          clock_bridge_afi_50_s0_agent_rp_endofpacket;                                        // clock_bridge_afi_50_s0_agent:rp_endofpacket -> router_047:sink_endofpacket
	wire          router_047_src_valid;                                                               // router_047:src_valid -> rsp_demux_045:sink_valid
	wire  [123:0] router_047_src_data;                                                                // router_047:src_data -> rsp_demux_045:sink_data
	wire          router_047_src_ready;                                                               // rsp_demux_045:sink_ready -> router_047:src_ready
	wire   [48:0] router_047_src_channel;                                                             // router_047:src_channel -> rsp_demux_045:sink_channel
	wire          router_047_src_startofpacket;                                                       // router_047:src_startofpacket -> rsp_demux_045:sink_startofpacket
	wire          router_047_src_endofpacket;                                                         // router_047:src_endofpacket -> rsp_demux_045:sink_endofpacket
	wire          onchip_memory_s1_agent_rp_valid;                                                    // onchip_memory_s1_agent:rp_valid -> router_048:sink_valid
	wire  [123:0] onchip_memory_s1_agent_rp_data;                                                     // onchip_memory_s1_agent:rp_data -> router_048:sink_data
	wire          onchip_memory_s1_agent_rp_ready;                                                    // router_048:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire          onchip_memory_s1_agent_rp_startofpacket;                                            // onchip_memory_s1_agent:rp_startofpacket -> router_048:sink_startofpacket
	wire          onchip_memory_s1_agent_rp_endofpacket;                                              // onchip_memory_s1_agent:rp_endofpacket -> router_048:sink_endofpacket
	wire          router_048_src_valid;                                                               // router_048:src_valid -> rsp_demux_046:sink_valid
	wire  [123:0] router_048_src_data;                                                                // router_048:src_data -> rsp_demux_046:sink_data
	wire          router_048_src_ready;                                                               // rsp_demux_046:sink_ready -> router_048:src_ready
	wire   [48:0] router_048_src_channel;                                                             // router_048:src_channel -> rsp_demux_046:sink_channel
	wire          router_048_src_startofpacket;                                                       // router_048:src_startofpacket -> rsp_demux_046:sink_startofpacket
	wire          router_048_src_endofpacket;                                                         // router_048:src_endofpacket -> rsp_demux_046:sink_endofpacket
	wire          ext_flash_uas_agent_rp_valid;                                                       // ext_flash_uas_agent:rp_valid -> router_049:sink_valid
	wire  [105:0] ext_flash_uas_agent_rp_data;                                                        // ext_flash_uas_agent:rp_data -> router_049:sink_data
	wire          ext_flash_uas_agent_rp_ready;                                                       // router_049:sink_ready -> ext_flash_uas_agent:rp_ready
	wire          ext_flash_uas_agent_rp_startofpacket;                                               // ext_flash_uas_agent:rp_startofpacket -> router_049:sink_startofpacket
	wire          ext_flash_uas_agent_rp_endofpacket;                                                 // ext_flash_uas_agent:rp_endofpacket -> router_049:sink_endofpacket
	wire          ddr2_address_span_extender_windowed_slave_agent_rp_valid;                           // ddr2_address_span_extender_windowed_slave_agent:rp_valid -> router_050:sink_valid
	wire  [123:0] ddr2_address_span_extender_windowed_slave_agent_rp_data;                            // ddr2_address_span_extender_windowed_slave_agent:rp_data -> router_050:sink_data
	wire          ddr2_address_span_extender_windowed_slave_agent_rp_ready;                           // router_050:sink_ready -> ddr2_address_span_extender_windowed_slave_agent:rp_ready
	wire          ddr2_address_span_extender_windowed_slave_agent_rp_startofpacket;                   // ddr2_address_span_extender_windowed_slave_agent:rp_startofpacket -> router_050:sink_startofpacket
	wire          ddr2_address_span_extender_windowed_slave_agent_rp_endofpacket;                     // ddr2_address_span_extender_windowed_slave_agent:rp_endofpacket -> router_050:sink_endofpacket
	wire          router_050_src_valid;                                                               // router_050:src_valid -> rsp_demux_048:sink_valid
	wire  [123:0] router_050_src_data;                                                                // router_050:src_data -> rsp_demux_048:sink_data
	wire          router_050_src_ready;                                                               // rsp_demux_048:sink_ready -> router_050:src_ready
	wire   [48:0] router_050_src_channel;                                                             // router_050:src_channel -> rsp_demux_048:sink_channel
	wire          router_050_src_startofpacket;                                                       // router_050:src_startofpacket -> rsp_demux_048:sink_startofpacket
	wire          router_050_src_endofpacket;                                                         // router_050:src_endofpacket -> rsp_demux_048:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> nios2_gen2_0_instruction_master_limiter:cmd_sink_valid
	wire  [123:0] router_001_src_data;                                                                // router_001:src_data -> nios2_gen2_0_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                               // nios2_gen2_0_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [48:0] router_001_src_channel;                                                             // router_001:src_channel -> nios2_gen2_0_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_endofpacket
	wire  [123:0] nios2_gen2_0_instruction_master_limiter_cmd_src_data;                               // nios2_gen2_0_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> nios2_gen2_0_instruction_master_limiter:cmd_src_ready
	wire   [48:0] nios2_gen2_0_instruction_master_limiter_cmd_src_channel;                            // nios2_gen2_0_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_gen2_0_instruction_master_limiter:rsp_sink_valid
	wire  [123:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_gen2_0_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_gen2_0_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [48:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_gen2_0_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_valid;                              // nios2_gen2_0_instruction_master_limiter:rsp_src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [123:0] nios2_gen2_0_instruction_master_limiter_rsp_src_data;                               // nios2_gen2_0_instruction_master_limiter:rsp_src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_ready;                              // nios2_gen2_0_instruction_master_agent:rp_ready -> nios2_gen2_0_instruction_master_limiter:rsp_src_ready
	wire   [48:0] nios2_gen2_0_instruction_master_limiter_rsp_src_channel;                            // nios2_gen2_0_instruction_master_limiter:rsp_src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:rsp_src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:rsp_src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_030_src_valid;                                                              // cmd_mux_030:src_valid -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_valid
	wire  [123:0] cmd_mux_030_src_data;                                                               // cmd_mux_030:src_data -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_data
	wire          cmd_mux_030_src_ready;                                                              // nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_ready -> cmd_mux_030:src_ready
	wire   [48:0] cmd_mux_030_src_channel;                                                            // cmd_mux_030:src_channel -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_channel
	wire          cmd_mux_030_src_startofpacket;                                                      // cmd_mux_030:src_startofpacket -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                                        // cmd_mux_030:src_endofpacket -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_burst_adapter_source0_valid;                           // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [123:0] nios2_gen2_0_debug_mem_slave_burst_adapter_source0_data;                            // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire          nios2_gen2_0_debug_mem_slave_burst_adapter_source0_ready;                           // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> nios2_gen2_0_debug_mem_slave_burst_adapter:source0_ready
	wire   [48:0] nios2_gen2_0_debug_mem_slave_burst_adapter_source0_channel;                         // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire          nios2_gen2_0_debug_mem_slave_burst_adapter_source0_startofpacket;                   // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_burst_adapter_source0_endofpacket;                     // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire          cmd_mux_046_src_valid;                                                              // cmd_mux_046:src_valid -> onchip_memory_s1_burst_adapter:sink0_valid
	wire  [123:0] cmd_mux_046_src_data;                                                               // cmd_mux_046:src_data -> onchip_memory_s1_burst_adapter:sink0_data
	wire          cmd_mux_046_src_ready;                                                              // onchip_memory_s1_burst_adapter:sink0_ready -> cmd_mux_046:src_ready
	wire   [48:0] cmd_mux_046_src_channel;                                                            // cmd_mux_046:src_channel -> onchip_memory_s1_burst_adapter:sink0_channel
	wire          cmd_mux_046_src_startofpacket;                                                      // cmd_mux_046:src_startofpacket -> onchip_memory_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_046_src_endofpacket;                                                        // cmd_mux_046:src_endofpacket -> onchip_memory_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory_s1_burst_adapter_source0_valid;                                       // onchip_memory_s1_burst_adapter:source0_valid -> onchip_memory_s1_agent:cp_valid
	wire  [123:0] onchip_memory_s1_burst_adapter_source0_data;                                        // onchip_memory_s1_burst_adapter:source0_data -> onchip_memory_s1_agent:cp_data
	wire          onchip_memory_s1_burst_adapter_source0_ready;                                       // onchip_memory_s1_agent:cp_ready -> onchip_memory_s1_burst_adapter:source0_ready
	wire   [48:0] onchip_memory_s1_burst_adapter_source0_channel;                                     // onchip_memory_s1_burst_adapter:source0_channel -> onchip_memory_s1_agent:cp_channel
	wire          onchip_memory_s1_burst_adapter_source0_startofpacket;                               // onchip_memory_s1_burst_adapter:source0_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire          onchip_memory_s1_burst_adapter_source0_endofpacket;                                 // onchip_memory_s1_burst_adapter:source0_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire          ext_flash_uas_burst_adapter_source0_valid;                                          // ext_flash_uas_burst_adapter:source0_valid -> ext_flash_uas_agent:cp_valid
	wire  [105:0] ext_flash_uas_burst_adapter_source0_data;                                           // ext_flash_uas_burst_adapter:source0_data -> ext_flash_uas_agent:cp_data
	wire          ext_flash_uas_burst_adapter_source0_ready;                                          // ext_flash_uas_agent:cp_ready -> ext_flash_uas_burst_adapter:source0_ready
	wire   [48:0] ext_flash_uas_burst_adapter_source0_channel;                                        // ext_flash_uas_burst_adapter:source0_channel -> ext_flash_uas_agent:cp_channel
	wire          ext_flash_uas_burst_adapter_source0_startofpacket;                                  // ext_flash_uas_burst_adapter:source0_startofpacket -> ext_flash_uas_agent:cp_startofpacket
	wire          ext_flash_uas_burst_adapter_source0_endofpacket;                                    // ext_flash_uas_burst_adapter:source0_endofpacket -> ext_flash_uas_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [123:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [48:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [123:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [48:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [123:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [48:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [123:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [48:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [123:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [48:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [123:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [48:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [123:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [48:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [123:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [48:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [123:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [48:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [123:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [48:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [123:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [48:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [123:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [48:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [123:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                              // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [48:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [123:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                              // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [48:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [123:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                              // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [48:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [123:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                              // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [48:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                              // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [123:0] cmd_demux_src16_data;                                                               // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                              // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [48:0] cmd_demux_src16_channel;                                                            // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                      // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                        // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                              // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [123:0] cmd_demux_src17_data;                                                               // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                              // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [48:0] cmd_demux_src17_channel;                                                            // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                      // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                        // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                              // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [123:0] cmd_demux_src18_data;                                                               // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                              // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [48:0] cmd_demux_src18_channel;                                                            // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                      // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                        // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                              // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [123:0] cmd_demux_src19_data;                                                               // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                              // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [48:0] cmd_demux_src19_channel;                                                            // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                      // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                        // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                              // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [123:0] cmd_demux_src20_data;                                                               // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                              // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [48:0] cmd_demux_src20_channel;                                                            // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                      // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                        // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                              // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [123:0] cmd_demux_src21_data;                                                               // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                              // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [48:0] cmd_demux_src21_channel;                                                            // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                      // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                        // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                              // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [123:0] cmd_demux_src22_data;                                                               // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                              // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [48:0] cmd_demux_src22_channel;                                                            // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                                      // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                        // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                              // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [123:0] cmd_demux_src23_data;                                                               // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                              // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [48:0] cmd_demux_src23_channel;                                                            // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                                      // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                        // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                              // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [123:0] cmd_demux_src24_data;                                                               // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_src24_ready;                                                              // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire   [48:0] cmd_demux_src24_channel;                                                            // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_startofpacket;                                                      // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                        // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src25_valid;                                                              // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire  [123:0] cmd_demux_src25_data;                                                               // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_src25_ready;                                                              // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire   [48:0] cmd_demux_src25_channel;                                                            // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_src25_startofpacket;                                                      // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_src25_endofpacket;                                                        // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                              // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire  [123:0] cmd_demux_src26_data;                                                               // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_src26_ready;                                                              // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire   [48:0] cmd_demux_src26_channel;                                                            // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_src26_startofpacket;                                                      // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_src26_endofpacket;                                                        // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_src27_valid;                                                              // cmd_demux:src27_valid -> cmd_mux_027:sink0_valid
	wire  [123:0] cmd_demux_src27_data;                                                               // cmd_demux:src27_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_src27_ready;                                                              // cmd_mux_027:sink0_ready -> cmd_demux:src27_ready
	wire   [48:0] cmd_demux_src27_channel;                                                            // cmd_demux:src27_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_src27_startofpacket;                                                      // cmd_demux:src27_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_src27_endofpacket;                                                        // cmd_demux:src27_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_src28_valid;                                                              // cmd_demux:src28_valid -> cmd_mux_028:sink0_valid
	wire  [123:0] cmd_demux_src28_data;                                                               // cmd_demux:src28_data -> cmd_mux_028:sink0_data
	wire          cmd_demux_src28_ready;                                                              // cmd_mux_028:sink0_ready -> cmd_demux:src28_ready
	wire   [48:0] cmd_demux_src28_channel;                                                            // cmd_demux:src28_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_src28_startofpacket;                                                      // cmd_demux:src28_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          cmd_demux_src28_endofpacket;                                                        // cmd_demux:src28_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_src29_valid;                                                              // cmd_demux:src29_valid -> cmd_mux_029:sink0_valid
	wire  [123:0] cmd_demux_src29_data;                                                               // cmd_demux:src29_data -> cmd_mux_029:sink0_data
	wire          cmd_demux_src29_ready;                                                              // cmd_mux_029:sink0_ready -> cmd_demux:src29_ready
	wire   [48:0] cmd_demux_src29_channel;                                                            // cmd_demux:src29_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_src29_startofpacket;                                                      // cmd_demux:src29_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          cmd_demux_src29_endofpacket;                                                        // cmd_demux:src29_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_src30_valid;                                                              // cmd_demux:src30_valid -> cmd_mux_030:sink0_valid
	wire  [123:0] cmd_demux_src30_data;                                                               // cmd_demux:src30_data -> cmd_mux_030:sink0_data
	wire          cmd_demux_src30_ready;                                                              // cmd_mux_030:sink0_ready -> cmd_demux:src30_ready
	wire   [48:0] cmd_demux_src30_channel;                                                            // cmd_demux:src30_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_src30_startofpacket;                                                      // cmd_demux:src30_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          cmd_demux_src30_endofpacket;                                                        // cmd_demux:src30_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_src31_valid;                                                              // cmd_demux:src31_valid -> cmd_mux_031:sink0_valid
	wire  [123:0] cmd_demux_src31_data;                                                               // cmd_demux:src31_data -> cmd_mux_031:sink0_data
	wire          cmd_demux_src31_ready;                                                              // cmd_mux_031:sink0_ready -> cmd_demux:src31_ready
	wire   [48:0] cmd_demux_src31_channel;                                                            // cmd_demux:src31_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_src31_startofpacket;                                                      // cmd_demux:src31_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire          cmd_demux_src31_endofpacket;                                                        // cmd_demux:src31_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_src32_valid;                                                              // cmd_demux:src32_valid -> cmd_mux_032:sink0_valid
	wire  [123:0] cmd_demux_src32_data;                                                               // cmd_demux:src32_data -> cmd_mux_032:sink0_data
	wire          cmd_demux_src32_ready;                                                              // cmd_mux_032:sink0_ready -> cmd_demux:src32_ready
	wire   [48:0] cmd_demux_src32_channel;                                                            // cmd_demux:src32_channel -> cmd_mux_032:sink0_channel
	wire          cmd_demux_src32_startofpacket;                                                      // cmd_demux:src32_startofpacket -> cmd_mux_032:sink0_startofpacket
	wire          cmd_demux_src32_endofpacket;                                                        // cmd_demux:src32_endofpacket -> cmd_mux_032:sink0_endofpacket
	wire          cmd_demux_src33_valid;                                                              // cmd_demux:src33_valid -> cmd_mux_033:sink0_valid
	wire  [123:0] cmd_demux_src33_data;                                                               // cmd_demux:src33_data -> cmd_mux_033:sink0_data
	wire          cmd_demux_src33_ready;                                                              // cmd_mux_033:sink0_ready -> cmd_demux:src33_ready
	wire   [48:0] cmd_demux_src33_channel;                                                            // cmd_demux:src33_channel -> cmd_mux_033:sink0_channel
	wire          cmd_demux_src33_startofpacket;                                                      // cmd_demux:src33_startofpacket -> cmd_mux_033:sink0_startofpacket
	wire          cmd_demux_src33_endofpacket;                                                        // cmd_demux:src33_endofpacket -> cmd_mux_033:sink0_endofpacket
	wire          cmd_demux_src34_valid;                                                              // cmd_demux:src34_valid -> cmd_mux_034:sink0_valid
	wire  [123:0] cmd_demux_src34_data;                                                               // cmd_demux:src34_data -> cmd_mux_034:sink0_data
	wire          cmd_demux_src34_ready;                                                              // cmd_mux_034:sink0_ready -> cmd_demux:src34_ready
	wire   [48:0] cmd_demux_src34_channel;                                                            // cmd_demux:src34_channel -> cmd_mux_034:sink0_channel
	wire          cmd_demux_src34_startofpacket;                                                      // cmd_demux:src34_startofpacket -> cmd_mux_034:sink0_startofpacket
	wire          cmd_demux_src34_endofpacket;                                                        // cmd_demux:src34_endofpacket -> cmd_mux_034:sink0_endofpacket
	wire          cmd_demux_src35_valid;                                                              // cmd_demux:src35_valid -> cmd_mux_035:sink0_valid
	wire  [123:0] cmd_demux_src35_data;                                                               // cmd_demux:src35_data -> cmd_mux_035:sink0_data
	wire          cmd_demux_src35_ready;                                                              // cmd_mux_035:sink0_ready -> cmd_demux:src35_ready
	wire   [48:0] cmd_demux_src35_channel;                                                            // cmd_demux:src35_channel -> cmd_mux_035:sink0_channel
	wire          cmd_demux_src35_startofpacket;                                                      // cmd_demux:src35_startofpacket -> cmd_mux_035:sink0_startofpacket
	wire          cmd_demux_src35_endofpacket;                                                        // cmd_demux:src35_endofpacket -> cmd_mux_035:sink0_endofpacket
	wire          cmd_demux_src36_valid;                                                              // cmd_demux:src36_valid -> cmd_mux_036:sink0_valid
	wire  [123:0] cmd_demux_src36_data;                                                               // cmd_demux:src36_data -> cmd_mux_036:sink0_data
	wire          cmd_demux_src36_ready;                                                              // cmd_mux_036:sink0_ready -> cmd_demux:src36_ready
	wire   [48:0] cmd_demux_src36_channel;                                                            // cmd_demux:src36_channel -> cmd_mux_036:sink0_channel
	wire          cmd_demux_src36_startofpacket;                                                      // cmd_demux:src36_startofpacket -> cmd_mux_036:sink0_startofpacket
	wire          cmd_demux_src36_endofpacket;                                                        // cmd_demux:src36_endofpacket -> cmd_mux_036:sink0_endofpacket
	wire          cmd_demux_src37_valid;                                                              // cmd_demux:src37_valid -> cmd_mux_037:sink0_valid
	wire  [123:0] cmd_demux_src37_data;                                                               // cmd_demux:src37_data -> cmd_mux_037:sink0_data
	wire          cmd_demux_src37_ready;                                                              // cmd_mux_037:sink0_ready -> cmd_demux:src37_ready
	wire   [48:0] cmd_demux_src37_channel;                                                            // cmd_demux:src37_channel -> cmd_mux_037:sink0_channel
	wire          cmd_demux_src37_startofpacket;                                                      // cmd_demux:src37_startofpacket -> cmd_mux_037:sink0_startofpacket
	wire          cmd_demux_src37_endofpacket;                                                        // cmd_demux:src37_endofpacket -> cmd_mux_037:sink0_endofpacket
	wire          cmd_demux_src38_valid;                                                              // cmd_demux:src38_valid -> cmd_mux_038:sink0_valid
	wire  [123:0] cmd_demux_src38_data;                                                               // cmd_demux:src38_data -> cmd_mux_038:sink0_data
	wire          cmd_demux_src38_ready;                                                              // cmd_mux_038:sink0_ready -> cmd_demux:src38_ready
	wire   [48:0] cmd_demux_src38_channel;                                                            // cmd_demux:src38_channel -> cmd_mux_038:sink0_channel
	wire          cmd_demux_src38_startofpacket;                                                      // cmd_demux:src38_startofpacket -> cmd_mux_038:sink0_startofpacket
	wire          cmd_demux_src38_endofpacket;                                                        // cmd_demux:src38_endofpacket -> cmd_mux_038:sink0_endofpacket
	wire          cmd_demux_src39_valid;                                                              // cmd_demux:src39_valid -> cmd_mux_039:sink0_valid
	wire  [123:0] cmd_demux_src39_data;                                                               // cmd_demux:src39_data -> cmd_mux_039:sink0_data
	wire          cmd_demux_src39_ready;                                                              // cmd_mux_039:sink0_ready -> cmd_demux:src39_ready
	wire   [48:0] cmd_demux_src39_channel;                                                            // cmd_demux:src39_channel -> cmd_mux_039:sink0_channel
	wire          cmd_demux_src39_startofpacket;                                                      // cmd_demux:src39_startofpacket -> cmd_mux_039:sink0_startofpacket
	wire          cmd_demux_src39_endofpacket;                                                        // cmd_demux:src39_endofpacket -> cmd_mux_039:sink0_endofpacket
	wire          cmd_demux_src40_valid;                                                              // cmd_demux:src40_valid -> cmd_mux_040:sink0_valid
	wire  [123:0] cmd_demux_src40_data;                                                               // cmd_demux:src40_data -> cmd_mux_040:sink0_data
	wire          cmd_demux_src40_ready;                                                              // cmd_mux_040:sink0_ready -> cmd_demux:src40_ready
	wire   [48:0] cmd_demux_src40_channel;                                                            // cmd_demux:src40_channel -> cmd_mux_040:sink0_channel
	wire          cmd_demux_src40_startofpacket;                                                      // cmd_demux:src40_startofpacket -> cmd_mux_040:sink0_startofpacket
	wire          cmd_demux_src40_endofpacket;                                                        // cmd_demux:src40_endofpacket -> cmd_mux_040:sink0_endofpacket
	wire          cmd_demux_src41_valid;                                                              // cmd_demux:src41_valid -> cmd_mux_041:sink0_valid
	wire  [123:0] cmd_demux_src41_data;                                                               // cmd_demux:src41_data -> cmd_mux_041:sink0_data
	wire          cmd_demux_src41_ready;                                                              // cmd_mux_041:sink0_ready -> cmd_demux:src41_ready
	wire   [48:0] cmd_demux_src41_channel;                                                            // cmd_demux:src41_channel -> cmd_mux_041:sink0_channel
	wire          cmd_demux_src41_startofpacket;                                                      // cmd_demux:src41_startofpacket -> cmd_mux_041:sink0_startofpacket
	wire          cmd_demux_src41_endofpacket;                                                        // cmd_demux:src41_endofpacket -> cmd_mux_041:sink0_endofpacket
	wire          cmd_demux_src42_valid;                                                              // cmd_demux:src42_valid -> cmd_mux_042:sink0_valid
	wire  [123:0] cmd_demux_src42_data;                                                               // cmd_demux:src42_data -> cmd_mux_042:sink0_data
	wire          cmd_demux_src42_ready;                                                              // cmd_mux_042:sink0_ready -> cmd_demux:src42_ready
	wire   [48:0] cmd_demux_src42_channel;                                                            // cmd_demux:src42_channel -> cmd_mux_042:sink0_channel
	wire          cmd_demux_src42_startofpacket;                                                      // cmd_demux:src42_startofpacket -> cmd_mux_042:sink0_startofpacket
	wire          cmd_demux_src42_endofpacket;                                                        // cmd_demux:src42_endofpacket -> cmd_mux_042:sink0_endofpacket
	wire          cmd_demux_src43_valid;                                                              // cmd_demux:src43_valid -> cmd_mux_043:sink0_valid
	wire  [123:0] cmd_demux_src43_data;                                                               // cmd_demux:src43_data -> cmd_mux_043:sink0_data
	wire          cmd_demux_src43_ready;                                                              // cmd_mux_043:sink0_ready -> cmd_demux:src43_ready
	wire   [48:0] cmd_demux_src43_channel;                                                            // cmd_demux:src43_channel -> cmd_mux_043:sink0_channel
	wire          cmd_demux_src43_startofpacket;                                                      // cmd_demux:src43_startofpacket -> cmd_mux_043:sink0_startofpacket
	wire          cmd_demux_src43_endofpacket;                                                        // cmd_demux:src43_endofpacket -> cmd_mux_043:sink0_endofpacket
	wire          cmd_demux_src44_valid;                                                              // cmd_demux:src44_valid -> cmd_mux_044:sink0_valid
	wire  [123:0] cmd_demux_src44_data;                                                               // cmd_demux:src44_data -> cmd_mux_044:sink0_data
	wire          cmd_demux_src44_ready;                                                              // cmd_mux_044:sink0_ready -> cmd_demux:src44_ready
	wire   [48:0] cmd_demux_src44_channel;                                                            // cmd_demux:src44_channel -> cmd_mux_044:sink0_channel
	wire          cmd_demux_src44_startofpacket;                                                      // cmd_demux:src44_startofpacket -> cmd_mux_044:sink0_startofpacket
	wire          cmd_demux_src44_endofpacket;                                                        // cmd_demux:src44_endofpacket -> cmd_mux_044:sink0_endofpacket
	wire          cmd_demux_src45_valid;                                                              // cmd_demux:src45_valid -> cmd_mux_045:sink0_valid
	wire  [123:0] cmd_demux_src45_data;                                                               // cmd_demux:src45_data -> cmd_mux_045:sink0_data
	wire          cmd_demux_src45_ready;                                                              // cmd_mux_045:sink0_ready -> cmd_demux:src45_ready
	wire   [48:0] cmd_demux_src45_channel;                                                            // cmd_demux:src45_channel -> cmd_mux_045:sink0_channel
	wire          cmd_demux_src45_startofpacket;                                                      // cmd_demux:src45_startofpacket -> cmd_mux_045:sink0_startofpacket
	wire          cmd_demux_src45_endofpacket;                                                        // cmd_demux:src45_endofpacket -> cmd_mux_045:sink0_endofpacket
	wire          cmd_demux_src46_valid;                                                              // cmd_demux:src46_valid -> cmd_mux_046:sink0_valid
	wire  [123:0] cmd_demux_src46_data;                                                               // cmd_demux:src46_data -> cmd_mux_046:sink0_data
	wire          cmd_demux_src46_ready;                                                              // cmd_mux_046:sink0_ready -> cmd_demux:src46_ready
	wire   [48:0] cmd_demux_src46_channel;                                                            // cmd_demux:src46_channel -> cmd_mux_046:sink0_channel
	wire          cmd_demux_src46_startofpacket;                                                      // cmd_demux:src46_startofpacket -> cmd_mux_046:sink0_startofpacket
	wire          cmd_demux_src46_endofpacket;                                                        // cmd_demux:src46_endofpacket -> cmd_mux_046:sink0_endofpacket
	wire          cmd_demux_src47_valid;                                                              // cmd_demux:src47_valid -> cmd_mux_047:sink0_valid
	wire  [123:0] cmd_demux_src47_data;                                                               // cmd_demux:src47_data -> cmd_mux_047:sink0_data
	wire          cmd_demux_src47_ready;                                                              // cmd_mux_047:sink0_ready -> cmd_demux:src47_ready
	wire   [48:0] cmd_demux_src47_channel;                                                            // cmd_demux:src47_channel -> cmd_mux_047:sink0_channel
	wire          cmd_demux_src47_startofpacket;                                                      // cmd_demux:src47_startofpacket -> cmd_mux_047:sink0_startofpacket
	wire          cmd_demux_src47_endofpacket;                                                        // cmd_demux:src47_endofpacket -> cmd_mux_047:sink0_endofpacket
	wire          cmd_demux_src48_valid;                                                              // cmd_demux:src48_valid -> cmd_mux_048:sink0_valid
	wire  [123:0] cmd_demux_src48_data;                                                               // cmd_demux:src48_data -> cmd_mux_048:sink0_data
	wire          cmd_demux_src48_ready;                                                              // cmd_mux_048:sink0_ready -> cmd_demux:src48_ready
	wire   [48:0] cmd_demux_src48_channel;                                                            // cmd_demux:src48_channel -> cmd_mux_048:sink0_channel
	wire          cmd_demux_src48_startofpacket;                                                      // cmd_demux:src48_startofpacket -> cmd_mux_048:sink0_startofpacket
	wire          cmd_demux_src48_endofpacket;                                                        // cmd_demux:src48_endofpacket -> cmd_mux_048:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_030:sink1_valid
	wire  [123:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_030:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_030:sink1_ready -> cmd_demux_001:src0_ready
	wire   [48:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_030:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_030:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_030:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_046:sink1_valid
	wire  [123:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_046:sink1_data
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_046:sink1_ready -> cmd_demux_001:src1_ready
	wire   [48:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_046:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_046:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_046:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> cmd_mux_047:sink1_valid
	wire  [123:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> cmd_mux_047:sink1_data
	wire          cmd_demux_001_src2_ready;                                                           // cmd_mux_047:sink1_ready -> cmd_demux_001:src2_ready
	wire   [48:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> cmd_mux_047:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_047:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_047:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [123:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [48:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [123:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [48:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [123:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [48:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [123:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [48:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [123:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [48:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [123:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [48:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [123:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [48:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [123:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [48:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [123:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [48:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [123:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [48:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [123:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [48:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [123:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [48:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [123:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                           // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [48:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [123:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                           // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [48:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [123:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                           // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [48:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [123:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                           // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [48:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [123:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                           // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [48:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [123:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                           // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [48:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [123:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                           // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [48:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                           // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [123:0] rsp_demux_019_src0_data;                                                            // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                           // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [48:0] rsp_demux_019_src0_channel;                                                         // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                   // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                     // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                           // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [123:0] rsp_demux_020_src0_data;                                                            // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                           // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [48:0] rsp_demux_020_src0_channel;                                                         // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                   // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                     // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                           // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [123:0] rsp_demux_021_src0_data;                                                            // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                           // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [48:0] rsp_demux_021_src0_channel;                                                         // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                   // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                     // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                           // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [123:0] rsp_demux_022_src0_data;                                                            // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                           // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [48:0] rsp_demux_022_src0_channel;                                                         // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                   // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                     // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                           // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [123:0] rsp_demux_023_src0_data;                                                            // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                           // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [48:0] rsp_demux_023_src0_channel;                                                         // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                   // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                     // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                           // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [123:0] rsp_demux_024_src0_data;                                                            // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire          rsp_demux_024_src0_ready;                                                           // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire   [48:0] rsp_demux_024_src0_channel;                                                         // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                   // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                     // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_025_src0_valid;                                                           // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire  [123:0] rsp_demux_025_src0_data;                                                            // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire          rsp_demux_025_src0_ready;                                                           // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire   [48:0] rsp_demux_025_src0_channel;                                                         // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                                   // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                     // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                           // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire  [123:0] rsp_demux_026_src0_data;                                                            // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire          rsp_demux_026_src0_ready;                                                           // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire   [48:0] rsp_demux_026_src0_channel;                                                         // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                                   // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                     // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire          rsp_demux_027_src0_valid;                                                           // rsp_demux_027:src0_valid -> rsp_mux:sink27_valid
	wire  [123:0] rsp_demux_027_src0_data;                                                            // rsp_demux_027:src0_data -> rsp_mux:sink27_data
	wire          rsp_demux_027_src0_ready;                                                           // rsp_mux:sink27_ready -> rsp_demux_027:src0_ready
	wire   [48:0] rsp_demux_027_src0_channel;                                                         // rsp_demux_027:src0_channel -> rsp_mux:sink27_channel
	wire          rsp_demux_027_src0_startofpacket;                                                   // rsp_demux_027:src0_startofpacket -> rsp_mux:sink27_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                     // rsp_demux_027:src0_endofpacket -> rsp_mux:sink27_endofpacket
	wire          rsp_demux_028_src0_valid;                                                           // rsp_demux_028:src0_valid -> rsp_mux:sink28_valid
	wire  [123:0] rsp_demux_028_src0_data;                                                            // rsp_demux_028:src0_data -> rsp_mux:sink28_data
	wire          rsp_demux_028_src0_ready;                                                           // rsp_mux:sink28_ready -> rsp_demux_028:src0_ready
	wire   [48:0] rsp_demux_028_src0_channel;                                                         // rsp_demux_028:src0_channel -> rsp_mux:sink28_channel
	wire          rsp_demux_028_src0_startofpacket;                                                   // rsp_demux_028:src0_startofpacket -> rsp_mux:sink28_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                     // rsp_demux_028:src0_endofpacket -> rsp_mux:sink28_endofpacket
	wire          rsp_demux_029_src0_valid;                                                           // rsp_demux_029:src0_valid -> rsp_mux:sink29_valid
	wire  [123:0] rsp_demux_029_src0_data;                                                            // rsp_demux_029:src0_data -> rsp_mux:sink29_data
	wire          rsp_demux_029_src0_ready;                                                           // rsp_mux:sink29_ready -> rsp_demux_029:src0_ready
	wire   [48:0] rsp_demux_029_src0_channel;                                                         // rsp_demux_029:src0_channel -> rsp_mux:sink29_channel
	wire          rsp_demux_029_src0_startofpacket;                                                   // rsp_demux_029:src0_startofpacket -> rsp_mux:sink29_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                     // rsp_demux_029:src0_endofpacket -> rsp_mux:sink29_endofpacket
	wire          rsp_demux_030_src0_valid;                                                           // rsp_demux_030:src0_valid -> rsp_mux:sink30_valid
	wire  [123:0] rsp_demux_030_src0_data;                                                            // rsp_demux_030:src0_data -> rsp_mux:sink30_data
	wire          rsp_demux_030_src0_ready;                                                           // rsp_mux:sink30_ready -> rsp_demux_030:src0_ready
	wire   [48:0] rsp_demux_030_src0_channel;                                                         // rsp_demux_030:src0_channel -> rsp_mux:sink30_channel
	wire          rsp_demux_030_src0_startofpacket;                                                   // rsp_demux_030:src0_startofpacket -> rsp_mux:sink30_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                                     // rsp_demux_030:src0_endofpacket -> rsp_mux:sink30_endofpacket
	wire          rsp_demux_030_src1_valid;                                                           // rsp_demux_030:src1_valid -> rsp_mux_001:sink0_valid
	wire  [123:0] rsp_demux_030_src1_data;                                                            // rsp_demux_030:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_030_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_030:src1_ready
	wire   [48:0] rsp_demux_030_src1_channel;                                                         // rsp_demux_030:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_030_src1_startofpacket;                                                   // rsp_demux_030:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_030_src1_endofpacket;                                                     // rsp_demux_030:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_031_src0_valid;                                                           // rsp_demux_031:src0_valid -> rsp_mux:sink31_valid
	wire  [123:0] rsp_demux_031_src0_data;                                                            // rsp_demux_031:src0_data -> rsp_mux:sink31_data
	wire          rsp_demux_031_src0_ready;                                                           // rsp_mux:sink31_ready -> rsp_demux_031:src0_ready
	wire   [48:0] rsp_demux_031_src0_channel;                                                         // rsp_demux_031:src0_channel -> rsp_mux:sink31_channel
	wire          rsp_demux_031_src0_startofpacket;                                                   // rsp_demux_031:src0_startofpacket -> rsp_mux:sink31_startofpacket
	wire          rsp_demux_031_src0_endofpacket;                                                     // rsp_demux_031:src0_endofpacket -> rsp_mux:sink31_endofpacket
	wire          rsp_demux_032_src0_valid;                                                           // rsp_demux_032:src0_valid -> rsp_mux:sink32_valid
	wire  [123:0] rsp_demux_032_src0_data;                                                            // rsp_demux_032:src0_data -> rsp_mux:sink32_data
	wire          rsp_demux_032_src0_ready;                                                           // rsp_mux:sink32_ready -> rsp_demux_032:src0_ready
	wire   [48:0] rsp_demux_032_src0_channel;                                                         // rsp_demux_032:src0_channel -> rsp_mux:sink32_channel
	wire          rsp_demux_032_src0_startofpacket;                                                   // rsp_demux_032:src0_startofpacket -> rsp_mux:sink32_startofpacket
	wire          rsp_demux_032_src0_endofpacket;                                                     // rsp_demux_032:src0_endofpacket -> rsp_mux:sink32_endofpacket
	wire          rsp_demux_033_src0_valid;                                                           // rsp_demux_033:src0_valid -> rsp_mux:sink33_valid
	wire  [123:0] rsp_demux_033_src0_data;                                                            // rsp_demux_033:src0_data -> rsp_mux:sink33_data
	wire          rsp_demux_033_src0_ready;                                                           // rsp_mux:sink33_ready -> rsp_demux_033:src0_ready
	wire   [48:0] rsp_demux_033_src0_channel;                                                         // rsp_demux_033:src0_channel -> rsp_mux:sink33_channel
	wire          rsp_demux_033_src0_startofpacket;                                                   // rsp_demux_033:src0_startofpacket -> rsp_mux:sink33_startofpacket
	wire          rsp_demux_033_src0_endofpacket;                                                     // rsp_demux_033:src0_endofpacket -> rsp_mux:sink33_endofpacket
	wire          rsp_demux_034_src0_valid;                                                           // rsp_demux_034:src0_valid -> rsp_mux:sink34_valid
	wire  [123:0] rsp_demux_034_src0_data;                                                            // rsp_demux_034:src0_data -> rsp_mux:sink34_data
	wire          rsp_demux_034_src0_ready;                                                           // rsp_mux:sink34_ready -> rsp_demux_034:src0_ready
	wire   [48:0] rsp_demux_034_src0_channel;                                                         // rsp_demux_034:src0_channel -> rsp_mux:sink34_channel
	wire          rsp_demux_034_src0_startofpacket;                                                   // rsp_demux_034:src0_startofpacket -> rsp_mux:sink34_startofpacket
	wire          rsp_demux_034_src0_endofpacket;                                                     // rsp_demux_034:src0_endofpacket -> rsp_mux:sink34_endofpacket
	wire          rsp_demux_035_src0_valid;                                                           // rsp_demux_035:src0_valid -> rsp_mux:sink35_valid
	wire  [123:0] rsp_demux_035_src0_data;                                                            // rsp_demux_035:src0_data -> rsp_mux:sink35_data
	wire          rsp_demux_035_src0_ready;                                                           // rsp_mux:sink35_ready -> rsp_demux_035:src0_ready
	wire   [48:0] rsp_demux_035_src0_channel;                                                         // rsp_demux_035:src0_channel -> rsp_mux:sink35_channel
	wire          rsp_demux_035_src0_startofpacket;                                                   // rsp_demux_035:src0_startofpacket -> rsp_mux:sink35_startofpacket
	wire          rsp_demux_035_src0_endofpacket;                                                     // rsp_demux_035:src0_endofpacket -> rsp_mux:sink35_endofpacket
	wire          rsp_demux_036_src0_valid;                                                           // rsp_demux_036:src0_valid -> rsp_mux:sink36_valid
	wire  [123:0] rsp_demux_036_src0_data;                                                            // rsp_demux_036:src0_data -> rsp_mux:sink36_data
	wire          rsp_demux_036_src0_ready;                                                           // rsp_mux:sink36_ready -> rsp_demux_036:src0_ready
	wire   [48:0] rsp_demux_036_src0_channel;                                                         // rsp_demux_036:src0_channel -> rsp_mux:sink36_channel
	wire          rsp_demux_036_src0_startofpacket;                                                   // rsp_demux_036:src0_startofpacket -> rsp_mux:sink36_startofpacket
	wire          rsp_demux_036_src0_endofpacket;                                                     // rsp_demux_036:src0_endofpacket -> rsp_mux:sink36_endofpacket
	wire          rsp_demux_037_src0_valid;                                                           // rsp_demux_037:src0_valid -> rsp_mux:sink37_valid
	wire  [123:0] rsp_demux_037_src0_data;                                                            // rsp_demux_037:src0_data -> rsp_mux:sink37_data
	wire          rsp_demux_037_src0_ready;                                                           // rsp_mux:sink37_ready -> rsp_demux_037:src0_ready
	wire   [48:0] rsp_demux_037_src0_channel;                                                         // rsp_demux_037:src0_channel -> rsp_mux:sink37_channel
	wire          rsp_demux_037_src0_startofpacket;                                                   // rsp_demux_037:src0_startofpacket -> rsp_mux:sink37_startofpacket
	wire          rsp_demux_037_src0_endofpacket;                                                     // rsp_demux_037:src0_endofpacket -> rsp_mux:sink37_endofpacket
	wire          rsp_demux_038_src0_valid;                                                           // rsp_demux_038:src0_valid -> rsp_mux:sink38_valid
	wire  [123:0] rsp_demux_038_src0_data;                                                            // rsp_demux_038:src0_data -> rsp_mux:sink38_data
	wire          rsp_demux_038_src0_ready;                                                           // rsp_mux:sink38_ready -> rsp_demux_038:src0_ready
	wire   [48:0] rsp_demux_038_src0_channel;                                                         // rsp_demux_038:src0_channel -> rsp_mux:sink38_channel
	wire          rsp_demux_038_src0_startofpacket;                                                   // rsp_demux_038:src0_startofpacket -> rsp_mux:sink38_startofpacket
	wire          rsp_demux_038_src0_endofpacket;                                                     // rsp_demux_038:src0_endofpacket -> rsp_mux:sink38_endofpacket
	wire          rsp_demux_039_src0_valid;                                                           // rsp_demux_039:src0_valid -> rsp_mux:sink39_valid
	wire  [123:0] rsp_demux_039_src0_data;                                                            // rsp_demux_039:src0_data -> rsp_mux:sink39_data
	wire          rsp_demux_039_src0_ready;                                                           // rsp_mux:sink39_ready -> rsp_demux_039:src0_ready
	wire   [48:0] rsp_demux_039_src0_channel;                                                         // rsp_demux_039:src0_channel -> rsp_mux:sink39_channel
	wire          rsp_demux_039_src0_startofpacket;                                                   // rsp_demux_039:src0_startofpacket -> rsp_mux:sink39_startofpacket
	wire          rsp_demux_039_src0_endofpacket;                                                     // rsp_demux_039:src0_endofpacket -> rsp_mux:sink39_endofpacket
	wire          rsp_demux_040_src0_valid;                                                           // rsp_demux_040:src0_valid -> rsp_mux:sink40_valid
	wire  [123:0] rsp_demux_040_src0_data;                                                            // rsp_demux_040:src0_data -> rsp_mux:sink40_data
	wire          rsp_demux_040_src0_ready;                                                           // rsp_mux:sink40_ready -> rsp_demux_040:src0_ready
	wire   [48:0] rsp_demux_040_src0_channel;                                                         // rsp_demux_040:src0_channel -> rsp_mux:sink40_channel
	wire          rsp_demux_040_src0_startofpacket;                                                   // rsp_demux_040:src0_startofpacket -> rsp_mux:sink40_startofpacket
	wire          rsp_demux_040_src0_endofpacket;                                                     // rsp_demux_040:src0_endofpacket -> rsp_mux:sink40_endofpacket
	wire          rsp_demux_041_src0_valid;                                                           // rsp_demux_041:src0_valid -> rsp_mux:sink41_valid
	wire  [123:0] rsp_demux_041_src0_data;                                                            // rsp_demux_041:src0_data -> rsp_mux:sink41_data
	wire          rsp_demux_041_src0_ready;                                                           // rsp_mux:sink41_ready -> rsp_demux_041:src0_ready
	wire   [48:0] rsp_demux_041_src0_channel;                                                         // rsp_demux_041:src0_channel -> rsp_mux:sink41_channel
	wire          rsp_demux_041_src0_startofpacket;                                                   // rsp_demux_041:src0_startofpacket -> rsp_mux:sink41_startofpacket
	wire          rsp_demux_041_src0_endofpacket;                                                     // rsp_demux_041:src0_endofpacket -> rsp_mux:sink41_endofpacket
	wire          rsp_demux_042_src0_valid;                                                           // rsp_demux_042:src0_valid -> rsp_mux:sink42_valid
	wire  [123:0] rsp_demux_042_src0_data;                                                            // rsp_demux_042:src0_data -> rsp_mux:sink42_data
	wire          rsp_demux_042_src0_ready;                                                           // rsp_mux:sink42_ready -> rsp_demux_042:src0_ready
	wire   [48:0] rsp_demux_042_src0_channel;                                                         // rsp_demux_042:src0_channel -> rsp_mux:sink42_channel
	wire          rsp_demux_042_src0_startofpacket;                                                   // rsp_demux_042:src0_startofpacket -> rsp_mux:sink42_startofpacket
	wire          rsp_demux_042_src0_endofpacket;                                                     // rsp_demux_042:src0_endofpacket -> rsp_mux:sink42_endofpacket
	wire          rsp_demux_043_src0_valid;                                                           // rsp_demux_043:src0_valid -> rsp_mux:sink43_valid
	wire  [123:0] rsp_demux_043_src0_data;                                                            // rsp_demux_043:src0_data -> rsp_mux:sink43_data
	wire          rsp_demux_043_src0_ready;                                                           // rsp_mux:sink43_ready -> rsp_demux_043:src0_ready
	wire   [48:0] rsp_demux_043_src0_channel;                                                         // rsp_demux_043:src0_channel -> rsp_mux:sink43_channel
	wire          rsp_demux_043_src0_startofpacket;                                                   // rsp_demux_043:src0_startofpacket -> rsp_mux:sink43_startofpacket
	wire          rsp_demux_043_src0_endofpacket;                                                     // rsp_demux_043:src0_endofpacket -> rsp_mux:sink43_endofpacket
	wire          rsp_demux_044_src0_valid;                                                           // rsp_demux_044:src0_valid -> rsp_mux:sink44_valid
	wire  [123:0] rsp_demux_044_src0_data;                                                            // rsp_demux_044:src0_data -> rsp_mux:sink44_data
	wire          rsp_demux_044_src0_ready;                                                           // rsp_mux:sink44_ready -> rsp_demux_044:src0_ready
	wire   [48:0] rsp_demux_044_src0_channel;                                                         // rsp_demux_044:src0_channel -> rsp_mux:sink44_channel
	wire          rsp_demux_044_src0_startofpacket;                                                   // rsp_demux_044:src0_startofpacket -> rsp_mux:sink44_startofpacket
	wire          rsp_demux_044_src0_endofpacket;                                                     // rsp_demux_044:src0_endofpacket -> rsp_mux:sink44_endofpacket
	wire          rsp_demux_045_src0_valid;                                                           // rsp_demux_045:src0_valid -> rsp_mux:sink45_valid
	wire  [123:0] rsp_demux_045_src0_data;                                                            // rsp_demux_045:src0_data -> rsp_mux:sink45_data
	wire          rsp_demux_045_src0_ready;                                                           // rsp_mux:sink45_ready -> rsp_demux_045:src0_ready
	wire   [48:0] rsp_demux_045_src0_channel;                                                         // rsp_demux_045:src0_channel -> rsp_mux:sink45_channel
	wire          rsp_demux_045_src0_startofpacket;                                                   // rsp_demux_045:src0_startofpacket -> rsp_mux:sink45_startofpacket
	wire          rsp_demux_045_src0_endofpacket;                                                     // rsp_demux_045:src0_endofpacket -> rsp_mux:sink45_endofpacket
	wire          rsp_demux_046_src0_valid;                                                           // rsp_demux_046:src0_valid -> rsp_mux:sink46_valid
	wire  [123:0] rsp_demux_046_src0_data;                                                            // rsp_demux_046:src0_data -> rsp_mux:sink46_data
	wire          rsp_demux_046_src0_ready;                                                           // rsp_mux:sink46_ready -> rsp_demux_046:src0_ready
	wire   [48:0] rsp_demux_046_src0_channel;                                                         // rsp_demux_046:src0_channel -> rsp_mux:sink46_channel
	wire          rsp_demux_046_src0_startofpacket;                                                   // rsp_demux_046:src0_startofpacket -> rsp_mux:sink46_startofpacket
	wire          rsp_demux_046_src0_endofpacket;                                                     // rsp_demux_046:src0_endofpacket -> rsp_mux:sink46_endofpacket
	wire          rsp_demux_046_src1_valid;                                                           // rsp_demux_046:src1_valid -> rsp_mux_001:sink1_valid
	wire  [123:0] rsp_demux_046_src1_data;                                                            // rsp_demux_046:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_046_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_046:src1_ready
	wire   [48:0] rsp_demux_046_src1_channel;                                                         // rsp_demux_046:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_046_src1_startofpacket;                                                   // rsp_demux_046:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_046_src1_endofpacket;                                                     // rsp_demux_046:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_047_src0_valid;                                                           // rsp_demux_047:src0_valid -> rsp_mux:sink47_valid
	wire  [123:0] rsp_demux_047_src0_data;                                                            // rsp_demux_047:src0_data -> rsp_mux:sink47_data
	wire          rsp_demux_047_src0_ready;                                                           // rsp_mux:sink47_ready -> rsp_demux_047:src0_ready
	wire   [48:0] rsp_demux_047_src0_channel;                                                         // rsp_demux_047:src0_channel -> rsp_mux:sink47_channel
	wire          rsp_demux_047_src0_startofpacket;                                                   // rsp_demux_047:src0_startofpacket -> rsp_mux:sink47_startofpacket
	wire          rsp_demux_047_src0_endofpacket;                                                     // rsp_demux_047:src0_endofpacket -> rsp_mux:sink47_endofpacket
	wire          rsp_demux_047_src1_valid;                                                           // rsp_demux_047:src1_valid -> rsp_mux_001:sink2_valid
	wire  [123:0] rsp_demux_047_src1_data;                                                            // rsp_demux_047:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_047_src1_ready;                                                           // rsp_mux_001:sink2_ready -> rsp_demux_047:src1_ready
	wire   [48:0] rsp_demux_047_src1_channel;                                                         // rsp_demux_047:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_047_src1_startofpacket;                                                   // rsp_demux_047:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_047_src1_endofpacket;                                                     // rsp_demux_047:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_048_src0_valid;                                                           // rsp_demux_048:src0_valid -> rsp_mux:sink48_valid
	wire  [123:0] rsp_demux_048_src0_data;                                                            // rsp_demux_048:src0_data -> rsp_mux:sink48_data
	wire          rsp_demux_048_src0_ready;                                                           // rsp_mux:sink48_ready -> rsp_demux_048:src0_ready
	wire   [48:0] rsp_demux_048_src0_channel;                                                         // rsp_demux_048:src0_channel -> rsp_mux:sink48_channel
	wire          rsp_demux_048_src0_startofpacket;                                                   // rsp_demux_048:src0_startofpacket -> rsp_mux:sink48_startofpacket
	wire          rsp_demux_048_src0_endofpacket;                                                     // rsp_demux_048:src0_endofpacket -> rsp_mux:sink48_endofpacket
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> ddr2_address_span_extender_cntl_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> ddr2_address_span_extender_cntl_cmd_width_adapter:in_data
	wire          cmd_mux_014_src_ready;                                                              // ddr2_address_span_extender_cntl_cmd_width_adapter:in_ready -> cmd_mux_014:src_ready
	wire   [48:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> ddr2_address_span_extender_cntl_cmd_width_adapter:in_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> ddr2_address_span_extender_cntl_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> ddr2_address_span_extender_cntl_cmd_width_adapter:in_endofpacket
	wire          ddr2_address_span_extender_cntl_cmd_width_adapter_src_valid;                        // ddr2_address_span_extender_cntl_cmd_width_adapter:out_valid -> ddr2_address_span_extender_cntl_agent:cp_valid
	wire  [159:0] ddr2_address_span_extender_cntl_cmd_width_adapter_src_data;                         // ddr2_address_span_extender_cntl_cmd_width_adapter:out_data -> ddr2_address_span_extender_cntl_agent:cp_data
	wire          ddr2_address_span_extender_cntl_cmd_width_adapter_src_ready;                        // ddr2_address_span_extender_cntl_agent:cp_ready -> ddr2_address_span_extender_cntl_cmd_width_adapter:out_ready
	wire   [48:0] ddr2_address_span_extender_cntl_cmd_width_adapter_src_channel;                      // ddr2_address_span_extender_cntl_cmd_width_adapter:out_channel -> ddr2_address_span_extender_cntl_agent:cp_channel
	wire          ddr2_address_span_extender_cntl_cmd_width_adapter_src_startofpacket;                // ddr2_address_span_extender_cntl_cmd_width_adapter:out_startofpacket -> ddr2_address_span_extender_cntl_agent:cp_startofpacket
	wire          ddr2_address_span_extender_cntl_cmd_width_adapter_src_endofpacket;                  // ddr2_address_span_extender_cntl_cmd_width_adapter:out_endofpacket -> ddr2_address_span_extender_cntl_agent:cp_endofpacket
	wire          cmd_mux_031_src_valid;                                                              // cmd_mux_031:src_valid -> dma_comm_1_left_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_031_src_data;                                                               // cmd_mux_031:src_data -> dma_comm_1_left_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_031_src_ready;                                                              // dma_comm_1_left_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_031:src_ready
	wire   [48:0] cmd_mux_031_src_channel;                                                            // cmd_mux_031:src_channel -> dma_comm_1_left_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_031_src_startofpacket;                                                      // cmd_mux_031:src_startofpacket -> dma_comm_1_left_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_031_src_endofpacket;                                                        // cmd_mux_031:src_endofpacket -> dma_comm_1_left_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_valid;                       // dma_comm_1_left_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_1_left_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_data;                        // dma_comm_1_left_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_1_left_descriptor_slave_agent:cp_data
	wire          dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_ready;                       // dma_comm_1_left_descriptor_slave_agent:cp_ready -> dma_comm_1_left_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_channel;                     // dma_comm_1_left_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_1_left_descriptor_slave_agent:cp_channel
	wire          dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_startofpacket;               // dma_comm_1_left_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_1_left_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_endofpacket;                 // dma_comm_1_left_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_1_left_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_032_src_valid;                                                              // cmd_mux_032:src_valid -> dma_comm_1_right_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_032_src_data;                                                               // cmd_mux_032:src_data -> dma_comm_1_right_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_032_src_ready;                                                              // dma_comm_1_right_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_032:src_ready
	wire   [48:0] cmd_mux_032_src_channel;                                                            // cmd_mux_032:src_channel -> dma_comm_1_right_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_032_src_startofpacket;                                                      // cmd_mux_032:src_startofpacket -> dma_comm_1_right_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_032_src_endofpacket;                                                        // cmd_mux_032:src_endofpacket -> dma_comm_1_right_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_valid;                      // dma_comm_1_right_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_1_right_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_data;                       // dma_comm_1_right_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_1_right_descriptor_slave_agent:cp_data
	wire          dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_ready;                      // dma_comm_1_right_descriptor_slave_agent:cp_ready -> dma_comm_1_right_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_channel;                    // dma_comm_1_right_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_1_right_descriptor_slave_agent:cp_channel
	wire          dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_startofpacket;              // dma_comm_1_right_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_1_right_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_endofpacket;                // dma_comm_1_right_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_1_right_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_033_src_valid;                                                              // cmd_mux_033:src_valid -> dma_comm_2_left_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_033_src_data;                                                               // cmd_mux_033:src_data -> dma_comm_2_left_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_033_src_ready;                                                              // dma_comm_2_left_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_033:src_ready
	wire   [48:0] cmd_mux_033_src_channel;                                                            // cmd_mux_033:src_channel -> dma_comm_2_left_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_033_src_startofpacket;                                                      // cmd_mux_033:src_startofpacket -> dma_comm_2_left_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_033_src_endofpacket;                                                        // cmd_mux_033:src_endofpacket -> dma_comm_2_left_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_valid;                       // dma_comm_2_left_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_2_left_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_data;                        // dma_comm_2_left_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_2_left_descriptor_slave_agent:cp_data
	wire          dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_ready;                       // dma_comm_2_left_descriptor_slave_agent:cp_ready -> dma_comm_2_left_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_channel;                     // dma_comm_2_left_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_2_left_descriptor_slave_agent:cp_channel
	wire          dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_startofpacket;               // dma_comm_2_left_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_2_left_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_endofpacket;                 // dma_comm_2_left_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_2_left_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_034_src_valid;                                                              // cmd_mux_034:src_valid -> dma_comm_2_right_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_034_src_data;                                                               // cmd_mux_034:src_data -> dma_comm_2_right_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_034_src_ready;                                                              // dma_comm_2_right_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_034:src_ready
	wire   [48:0] cmd_mux_034_src_channel;                                                            // cmd_mux_034:src_channel -> dma_comm_2_right_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_034_src_startofpacket;                                                      // cmd_mux_034:src_startofpacket -> dma_comm_2_right_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_034_src_endofpacket;                                                        // cmd_mux_034:src_endofpacket -> dma_comm_2_right_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_valid;                      // dma_comm_2_right_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_2_right_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_data;                       // dma_comm_2_right_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_2_right_descriptor_slave_agent:cp_data
	wire          dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_ready;                      // dma_comm_2_right_descriptor_slave_agent:cp_ready -> dma_comm_2_right_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_channel;                    // dma_comm_2_right_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_2_right_descriptor_slave_agent:cp_channel
	wire          dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_startofpacket;              // dma_comm_2_right_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_2_right_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_endofpacket;                // dma_comm_2_right_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_2_right_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_035_src_valid;                                                              // cmd_mux_035:src_valid -> dma_comm_3_left_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_035_src_data;                                                               // cmd_mux_035:src_data -> dma_comm_3_left_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_035_src_ready;                                                              // dma_comm_3_left_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_035:src_ready
	wire   [48:0] cmd_mux_035_src_channel;                                                            // cmd_mux_035:src_channel -> dma_comm_3_left_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_035_src_startofpacket;                                                      // cmd_mux_035:src_startofpacket -> dma_comm_3_left_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_035_src_endofpacket;                                                        // cmd_mux_035:src_endofpacket -> dma_comm_3_left_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_valid;                       // dma_comm_3_left_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_3_left_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_data;                        // dma_comm_3_left_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_3_left_descriptor_slave_agent:cp_data
	wire          dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_ready;                       // dma_comm_3_left_descriptor_slave_agent:cp_ready -> dma_comm_3_left_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_channel;                     // dma_comm_3_left_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_3_left_descriptor_slave_agent:cp_channel
	wire          dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_startofpacket;               // dma_comm_3_left_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_3_left_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_endofpacket;                 // dma_comm_3_left_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_3_left_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_036_src_valid;                                                              // cmd_mux_036:src_valid -> dma_comm_3_right_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_036_src_data;                                                               // cmd_mux_036:src_data -> dma_comm_3_right_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_036_src_ready;                                                              // dma_comm_3_right_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_036:src_ready
	wire   [48:0] cmd_mux_036_src_channel;                                                            // cmd_mux_036:src_channel -> dma_comm_3_right_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_036_src_startofpacket;                                                      // cmd_mux_036:src_startofpacket -> dma_comm_3_right_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_036_src_endofpacket;                                                        // cmd_mux_036:src_endofpacket -> dma_comm_3_right_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_valid;                      // dma_comm_3_right_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_3_right_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_data;                       // dma_comm_3_right_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_3_right_descriptor_slave_agent:cp_data
	wire          dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_ready;                      // dma_comm_3_right_descriptor_slave_agent:cp_ready -> dma_comm_3_right_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_channel;                    // dma_comm_3_right_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_3_right_descriptor_slave_agent:cp_channel
	wire          dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_startofpacket;              // dma_comm_3_right_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_3_right_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_endofpacket;                // dma_comm_3_right_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_3_right_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_037_src_valid;                                                              // cmd_mux_037:src_valid -> dma_comm_4_left_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_037_src_data;                                                               // cmd_mux_037:src_data -> dma_comm_4_left_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_037_src_ready;                                                              // dma_comm_4_left_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_037:src_ready
	wire   [48:0] cmd_mux_037_src_channel;                                                            // cmd_mux_037:src_channel -> dma_comm_4_left_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_037_src_startofpacket;                                                      // cmd_mux_037:src_startofpacket -> dma_comm_4_left_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_037_src_endofpacket;                                                        // cmd_mux_037:src_endofpacket -> dma_comm_4_left_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_valid;                       // dma_comm_4_left_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_4_left_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_data;                        // dma_comm_4_left_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_4_left_descriptor_slave_agent:cp_data
	wire          dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_ready;                       // dma_comm_4_left_descriptor_slave_agent:cp_ready -> dma_comm_4_left_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_channel;                     // dma_comm_4_left_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_4_left_descriptor_slave_agent:cp_channel
	wire          dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_startofpacket;               // dma_comm_4_left_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_4_left_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_endofpacket;                 // dma_comm_4_left_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_4_left_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_038_src_valid;                                                              // cmd_mux_038:src_valid -> dma_comm_4_right_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_038_src_data;                                                               // cmd_mux_038:src_data -> dma_comm_4_right_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_038_src_ready;                                                              // dma_comm_4_right_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_038:src_ready
	wire   [48:0] cmd_mux_038_src_channel;                                                            // cmd_mux_038:src_channel -> dma_comm_4_right_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_038_src_startofpacket;                                                      // cmd_mux_038:src_startofpacket -> dma_comm_4_right_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_038_src_endofpacket;                                                        // cmd_mux_038:src_endofpacket -> dma_comm_4_right_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_valid;                      // dma_comm_4_right_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_4_right_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_data;                       // dma_comm_4_right_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_4_right_descriptor_slave_agent:cp_data
	wire          dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_ready;                      // dma_comm_4_right_descriptor_slave_agent:cp_ready -> dma_comm_4_right_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_channel;                    // dma_comm_4_right_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_4_right_descriptor_slave_agent:cp_channel
	wire          dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_startofpacket;              // dma_comm_4_right_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_4_right_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_endofpacket;                // dma_comm_4_right_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_4_right_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_039_src_valid;                                                              // cmd_mux_039:src_valid -> dma_comm_5_left_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_039_src_data;                                                               // cmd_mux_039:src_data -> dma_comm_5_left_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_039_src_ready;                                                              // dma_comm_5_left_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_039:src_ready
	wire   [48:0] cmd_mux_039_src_channel;                                                            // cmd_mux_039:src_channel -> dma_comm_5_left_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_039_src_startofpacket;                                                      // cmd_mux_039:src_startofpacket -> dma_comm_5_left_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_039_src_endofpacket;                                                        // cmd_mux_039:src_endofpacket -> dma_comm_5_left_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_valid;                       // dma_comm_5_left_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_5_left_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_data;                        // dma_comm_5_left_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_5_left_descriptor_slave_agent:cp_data
	wire          dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_ready;                       // dma_comm_5_left_descriptor_slave_agent:cp_ready -> dma_comm_5_left_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_channel;                     // dma_comm_5_left_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_5_left_descriptor_slave_agent:cp_channel
	wire          dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_startofpacket;               // dma_comm_5_left_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_5_left_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_endofpacket;                 // dma_comm_5_left_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_5_left_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_040_src_valid;                                                              // cmd_mux_040:src_valid -> dma_comm_5_right_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_040_src_data;                                                               // cmd_mux_040:src_data -> dma_comm_5_right_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_040_src_ready;                                                              // dma_comm_5_right_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_040:src_ready
	wire   [48:0] cmd_mux_040_src_channel;                                                            // cmd_mux_040:src_channel -> dma_comm_5_right_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_040_src_startofpacket;                                                      // cmd_mux_040:src_startofpacket -> dma_comm_5_right_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_040_src_endofpacket;                                                        // cmd_mux_040:src_endofpacket -> dma_comm_5_right_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_valid;                      // dma_comm_5_right_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_5_right_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_data;                       // dma_comm_5_right_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_5_right_descriptor_slave_agent:cp_data
	wire          dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_ready;                      // dma_comm_5_right_descriptor_slave_agent:cp_ready -> dma_comm_5_right_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_channel;                    // dma_comm_5_right_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_5_right_descriptor_slave_agent:cp_channel
	wire          dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_startofpacket;              // dma_comm_5_right_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_5_right_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_endofpacket;                // dma_comm_5_right_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_5_right_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_041_src_valid;                                                              // cmd_mux_041:src_valid -> dma_comm_6_left_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_041_src_data;                                                               // cmd_mux_041:src_data -> dma_comm_6_left_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_041_src_ready;                                                              // dma_comm_6_left_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_041:src_ready
	wire   [48:0] cmd_mux_041_src_channel;                                                            // cmd_mux_041:src_channel -> dma_comm_6_left_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_041_src_startofpacket;                                                      // cmd_mux_041:src_startofpacket -> dma_comm_6_left_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_041_src_endofpacket;                                                        // cmd_mux_041:src_endofpacket -> dma_comm_6_left_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_valid;                       // dma_comm_6_left_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_6_left_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_data;                        // dma_comm_6_left_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_6_left_descriptor_slave_agent:cp_data
	wire          dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_ready;                       // dma_comm_6_left_descriptor_slave_agent:cp_ready -> dma_comm_6_left_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_channel;                     // dma_comm_6_left_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_6_left_descriptor_slave_agent:cp_channel
	wire          dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_startofpacket;               // dma_comm_6_left_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_6_left_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_endofpacket;                 // dma_comm_6_left_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_6_left_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_042_src_valid;                                                              // cmd_mux_042:src_valid -> dma_comm_6_right_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_042_src_data;                                                               // cmd_mux_042:src_data -> dma_comm_6_right_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_042_src_ready;                                                              // dma_comm_6_right_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_042:src_ready
	wire   [48:0] cmd_mux_042_src_channel;                                                            // cmd_mux_042:src_channel -> dma_comm_6_right_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_042_src_startofpacket;                                                      // cmd_mux_042:src_startofpacket -> dma_comm_6_right_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_042_src_endofpacket;                                                        // cmd_mux_042:src_endofpacket -> dma_comm_6_right_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_valid;                      // dma_comm_6_right_descriptor_slave_cmd_width_adapter:out_valid -> dma_comm_6_right_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_data;                       // dma_comm_6_right_descriptor_slave_cmd_width_adapter:out_data -> dma_comm_6_right_descriptor_slave_agent:cp_data
	wire          dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_ready;                      // dma_comm_6_right_descriptor_slave_agent:cp_ready -> dma_comm_6_right_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_channel;                    // dma_comm_6_right_descriptor_slave_cmd_width_adapter:out_channel -> dma_comm_6_right_descriptor_slave_agent:cp_channel
	wire          dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_startofpacket;              // dma_comm_6_right_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_comm_6_right_descriptor_slave_agent:cp_startofpacket
	wire          dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_endofpacket;                // dma_comm_6_right_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_comm_6_right_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_043_src_valid;                                                              // cmd_mux_043:src_valid -> dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_043_src_data;                                                               // cmd_mux_043:src_data -> dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_043_src_ready;                                                              // dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_043:src_ready
	wire   [48:0] cmd_mux_043_src_channel;                                                            // cmd_mux_043:src_channel -> dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_043_src_startofpacket;                                                      // cmd_mux_043:src_startofpacket -> dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_043_src_endofpacket;                                                        // cmd_mux_043:src_endofpacket -> dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_valid;                      // dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:out_valid -> dma_ftdi_rx_usb3_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_data;                       // dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:out_data -> dma_ftdi_rx_usb3_descriptor_slave_agent:cp_data
	wire          dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_ready;                      // dma_ftdi_rx_usb3_descriptor_slave_agent:cp_ready -> dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_channel;                    // dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:out_channel -> dma_ftdi_rx_usb3_descriptor_slave_agent:cp_channel
	wire          dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_startofpacket;              // dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_ftdi_rx_usb3_descriptor_slave_agent:cp_startofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_endofpacket;                // dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_ftdi_rx_usb3_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_044_src_valid;                                                              // cmd_mux_044:src_valid -> dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_044_src_data;                                                               // cmd_mux_044:src_data -> dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_044_src_ready;                                                              // dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_044:src_ready
	wire   [48:0] cmd_mux_044_src_channel;                                                            // cmd_mux_044:src_channel -> dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_044_src_startofpacket;                                                      // cmd_mux_044:src_startofpacket -> dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_044_src_endofpacket;                                                        // cmd_mux_044:src_endofpacket -> dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_valid;                      // dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:out_valid -> dma_ftdi_tx_usb3_descriptor_slave_agent:cp_valid
	wire  [375:0] dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_data;                       // dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:out_data -> dma_ftdi_tx_usb3_descriptor_slave_agent:cp_data
	wire          dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_ready;                      // dma_ftdi_tx_usb3_descriptor_slave_agent:cp_ready -> dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:out_ready
	wire   [48:0] dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_channel;                    // dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:out_channel -> dma_ftdi_tx_usb3_descriptor_slave_agent:cp_channel
	wire          dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_startofpacket;              // dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_ftdi_tx_usb3_descriptor_slave_agent:cp_startofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_endofpacket;                // dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_ftdi_tx_usb3_descriptor_slave_agent:cp_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> ddr2_address_span_extender_cntl_rsp_width_adapter:in_valid
	wire  [159:0] router_016_src_data;                                                                // router_016:src_data -> ddr2_address_span_extender_cntl_rsp_width_adapter:in_data
	wire          router_016_src_ready;                                                               // ddr2_address_span_extender_cntl_rsp_width_adapter:in_ready -> router_016:src_ready
	wire   [48:0] router_016_src_channel;                                                             // router_016:src_channel -> ddr2_address_span_extender_cntl_rsp_width_adapter:in_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> ddr2_address_span_extender_cntl_rsp_width_adapter:in_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> ddr2_address_span_extender_cntl_rsp_width_adapter:in_endofpacket
	wire          ddr2_address_span_extender_cntl_rsp_width_adapter_src_valid;                        // ddr2_address_span_extender_cntl_rsp_width_adapter:out_valid -> rsp_demux_014:sink_valid
	wire  [123:0] ddr2_address_span_extender_cntl_rsp_width_adapter_src_data;                         // ddr2_address_span_extender_cntl_rsp_width_adapter:out_data -> rsp_demux_014:sink_data
	wire          ddr2_address_span_extender_cntl_rsp_width_adapter_src_ready;                        // rsp_demux_014:sink_ready -> ddr2_address_span_extender_cntl_rsp_width_adapter:out_ready
	wire   [48:0] ddr2_address_span_extender_cntl_rsp_width_adapter_src_channel;                      // ddr2_address_span_extender_cntl_rsp_width_adapter:out_channel -> rsp_demux_014:sink_channel
	wire          ddr2_address_span_extender_cntl_rsp_width_adapter_src_startofpacket;                // ddr2_address_span_extender_cntl_rsp_width_adapter:out_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          ddr2_address_span_extender_cntl_rsp_width_adapter_src_endofpacket;                  // ddr2_address_span_extender_cntl_rsp_width_adapter:out_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_033_src_valid;                                                               // router_033:src_valid -> dma_comm_1_left_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_033_src_data;                                                                // router_033:src_data -> dma_comm_1_left_descriptor_slave_rsp_width_adapter:in_data
	wire          router_033_src_ready;                                                               // dma_comm_1_left_descriptor_slave_rsp_width_adapter:in_ready -> router_033:src_ready
	wire   [48:0] router_033_src_channel;                                                             // router_033:src_channel -> dma_comm_1_left_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_033_src_startofpacket;                                                       // router_033:src_startofpacket -> dma_comm_1_left_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_033_src_endofpacket;                                                         // router_033:src_endofpacket -> dma_comm_1_left_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_valid;                       // dma_comm_1_left_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_031:sink_valid
	wire  [123:0] dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_data;                        // dma_comm_1_left_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_031:sink_data
	wire          dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_ready;                       // rsp_demux_031:sink_ready -> dma_comm_1_left_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_channel;                     // dma_comm_1_left_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_031:sink_channel
	wire          dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_startofpacket;               // dma_comm_1_left_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_031:sink_startofpacket
	wire          dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_endofpacket;                 // dma_comm_1_left_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          router_034_src_valid;                                                               // router_034:src_valid -> dma_comm_1_right_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_034_src_data;                                                                // router_034:src_data -> dma_comm_1_right_descriptor_slave_rsp_width_adapter:in_data
	wire          router_034_src_ready;                                                               // dma_comm_1_right_descriptor_slave_rsp_width_adapter:in_ready -> router_034:src_ready
	wire   [48:0] router_034_src_channel;                                                             // router_034:src_channel -> dma_comm_1_right_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_034_src_startofpacket;                                                       // router_034:src_startofpacket -> dma_comm_1_right_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_034_src_endofpacket;                                                         // router_034:src_endofpacket -> dma_comm_1_right_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_valid;                      // dma_comm_1_right_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_032:sink_valid
	wire  [123:0] dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_data;                       // dma_comm_1_right_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_032:sink_data
	wire          dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_ready;                      // rsp_demux_032:sink_ready -> dma_comm_1_right_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_channel;                    // dma_comm_1_right_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_032:sink_channel
	wire          dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_startofpacket;              // dma_comm_1_right_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_032:sink_startofpacket
	wire          dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_endofpacket;                // dma_comm_1_right_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_032:sink_endofpacket
	wire          router_035_src_valid;                                                               // router_035:src_valid -> dma_comm_2_left_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_035_src_data;                                                                // router_035:src_data -> dma_comm_2_left_descriptor_slave_rsp_width_adapter:in_data
	wire          router_035_src_ready;                                                               // dma_comm_2_left_descriptor_slave_rsp_width_adapter:in_ready -> router_035:src_ready
	wire   [48:0] router_035_src_channel;                                                             // router_035:src_channel -> dma_comm_2_left_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_035_src_startofpacket;                                                       // router_035:src_startofpacket -> dma_comm_2_left_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_035_src_endofpacket;                                                         // router_035:src_endofpacket -> dma_comm_2_left_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_valid;                       // dma_comm_2_left_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_033:sink_valid
	wire  [123:0] dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_data;                        // dma_comm_2_left_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_033:sink_data
	wire          dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_ready;                       // rsp_demux_033:sink_ready -> dma_comm_2_left_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_channel;                     // dma_comm_2_left_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_033:sink_channel
	wire          dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_startofpacket;               // dma_comm_2_left_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_033:sink_startofpacket
	wire          dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_endofpacket;                 // dma_comm_2_left_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_033:sink_endofpacket
	wire          router_036_src_valid;                                                               // router_036:src_valid -> dma_comm_2_right_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_036_src_data;                                                                // router_036:src_data -> dma_comm_2_right_descriptor_slave_rsp_width_adapter:in_data
	wire          router_036_src_ready;                                                               // dma_comm_2_right_descriptor_slave_rsp_width_adapter:in_ready -> router_036:src_ready
	wire   [48:0] router_036_src_channel;                                                             // router_036:src_channel -> dma_comm_2_right_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_036_src_startofpacket;                                                       // router_036:src_startofpacket -> dma_comm_2_right_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_036_src_endofpacket;                                                         // router_036:src_endofpacket -> dma_comm_2_right_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_valid;                      // dma_comm_2_right_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_034:sink_valid
	wire  [123:0] dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_data;                       // dma_comm_2_right_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_034:sink_data
	wire          dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_ready;                      // rsp_demux_034:sink_ready -> dma_comm_2_right_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_channel;                    // dma_comm_2_right_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_034:sink_channel
	wire          dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_startofpacket;              // dma_comm_2_right_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_034:sink_startofpacket
	wire          dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_endofpacket;                // dma_comm_2_right_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_034:sink_endofpacket
	wire          router_037_src_valid;                                                               // router_037:src_valid -> dma_comm_3_left_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_037_src_data;                                                                // router_037:src_data -> dma_comm_3_left_descriptor_slave_rsp_width_adapter:in_data
	wire          router_037_src_ready;                                                               // dma_comm_3_left_descriptor_slave_rsp_width_adapter:in_ready -> router_037:src_ready
	wire   [48:0] router_037_src_channel;                                                             // router_037:src_channel -> dma_comm_3_left_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_037_src_startofpacket;                                                       // router_037:src_startofpacket -> dma_comm_3_left_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_037_src_endofpacket;                                                         // router_037:src_endofpacket -> dma_comm_3_left_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_valid;                       // dma_comm_3_left_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_035:sink_valid
	wire  [123:0] dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_data;                        // dma_comm_3_left_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_035:sink_data
	wire          dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_ready;                       // rsp_demux_035:sink_ready -> dma_comm_3_left_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_channel;                     // dma_comm_3_left_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_035:sink_channel
	wire          dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_startofpacket;               // dma_comm_3_left_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_035:sink_startofpacket
	wire          dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_endofpacket;                 // dma_comm_3_left_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_035:sink_endofpacket
	wire          router_038_src_valid;                                                               // router_038:src_valid -> dma_comm_3_right_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_038_src_data;                                                                // router_038:src_data -> dma_comm_3_right_descriptor_slave_rsp_width_adapter:in_data
	wire          router_038_src_ready;                                                               // dma_comm_3_right_descriptor_slave_rsp_width_adapter:in_ready -> router_038:src_ready
	wire   [48:0] router_038_src_channel;                                                             // router_038:src_channel -> dma_comm_3_right_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_038_src_startofpacket;                                                       // router_038:src_startofpacket -> dma_comm_3_right_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_038_src_endofpacket;                                                         // router_038:src_endofpacket -> dma_comm_3_right_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_valid;                      // dma_comm_3_right_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_036:sink_valid
	wire  [123:0] dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_data;                       // dma_comm_3_right_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_036:sink_data
	wire          dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_ready;                      // rsp_demux_036:sink_ready -> dma_comm_3_right_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_channel;                    // dma_comm_3_right_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_036:sink_channel
	wire          dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_startofpacket;              // dma_comm_3_right_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_036:sink_startofpacket
	wire          dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_endofpacket;                // dma_comm_3_right_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_036:sink_endofpacket
	wire          router_039_src_valid;                                                               // router_039:src_valid -> dma_comm_4_left_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_039_src_data;                                                                // router_039:src_data -> dma_comm_4_left_descriptor_slave_rsp_width_adapter:in_data
	wire          router_039_src_ready;                                                               // dma_comm_4_left_descriptor_slave_rsp_width_adapter:in_ready -> router_039:src_ready
	wire   [48:0] router_039_src_channel;                                                             // router_039:src_channel -> dma_comm_4_left_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_039_src_startofpacket;                                                       // router_039:src_startofpacket -> dma_comm_4_left_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_039_src_endofpacket;                                                         // router_039:src_endofpacket -> dma_comm_4_left_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_valid;                       // dma_comm_4_left_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_037:sink_valid
	wire  [123:0] dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_data;                        // dma_comm_4_left_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_037:sink_data
	wire          dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_ready;                       // rsp_demux_037:sink_ready -> dma_comm_4_left_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_channel;                     // dma_comm_4_left_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_037:sink_channel
	wire          dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_startofpacket;               // dma_comm_4_left_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_037:sink_startofpacket
	wire          dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_endofpacket;                 // dma_comm_4_left_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_037:sink_endofpacket
	wire          router_040_src_valid;                                                               // router_040:src_valid -> dma_comm_4_right_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_040_src_data;                                                                // router_040:src_data -> dma_comm_4_right_descriptor_slave_rsp_width_adapter:in_data
	wire          router_040_src_ready;                                                               // dma_comm_4_right_descriptor_slave_rsp_width_adapter:in_ready -> router_040:src_ready
	wire   [48:0] router_040_src_channel;                                                             // router_040:src_channel -> dma_comm_4_right_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_040_src_startofpacket;                                                       // router_040:src_startofpacket -> dma_comm_4_right_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_040_src_endofpacket;                                                         // router_040:src_endofpacket -> dma_comm_4_right_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_valid;                      // dma_comm_4_right_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_038:sink_valid
	wire  [123:0] dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_data;                       // dma_comm_4_right_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_038:sink_data
	wire          dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_ready;                      // rsp_demux_038:sink_ready -> dma_comm_4_right_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_channel;                    // dma_comm_4_right_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_038:sink_channel
	wire          dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_startofpacket;              // dma_comm_4_right_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_038:sink_startofpacket
	wire          dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_endofpacket;                // dma_comm_4_right_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_038:sink_endofpacket
	wire          router_041_src_valid;                                                               // router_041:src_valid -> dma_comm_5_left_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_041_src_data;                                                                // router_041:src_data -> dma_comm_5_left_descriptor_slave_rsp_width_adapter:in_data
	wire          router_041_src_ready;                                                               // dma_comm_5_left_descriptor_slave_rsp_width_adapter:in_ready -> router_041:src_ready
	wire   [48:0] router_041_src_channel;                                                             // router_041:src_channel -> dma_comm_5_left_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_041_src_startofpacket;                                                       // router_041:src_startofpacket -> dma_comm_5_left_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_041_src_endofpacket;                                                         // router_041:src_endofpacket -> dma_comm_5_left_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_valid;                       // dma_comm_5_left_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_039:sink_valid
	wire  [123:0] dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_data;                        // dma_comm_5_left_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_039:sink_data
	wire          dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_ready;                       // rsp_demux_039:sink_ready -> dma_comm_5_left_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_channel;                     // dma_comm_5_left_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_039:sink_channel
	wire          dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_startofpacket;               // dma_comm_5_left_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_039:sink_startofpacket
	wire          dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_endofpacket;                 // dma_comm_5_left_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_039:sink_endofpacket
	wire          router_042_src_valid;                                                               // router_042:src_valid -> dma_comm_5_right_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_042_src_data;                                                                // router_042:src_data -> dma_comm_5_right_descriptor_slave_rsp_width_adapter:in_data
	wire          router_042_src_ready;                                                               // dma_comm_5_right_descriptor_slave_rsp_width_adapter:in_ready -> router_042:src_ready
	wire   [48:0] router_042_src_channel;                                                             // router_042:src_channel -> dma_comm_5_right_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_042_src_startofpacket;                                                       // router_042:src_startofpacket -> dma_comm_5_right_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_042_src_endofpacket;                                                         // router_042:src_endofpacket -> dma_comm_5_right_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_valid;                      // dma_comm_5_right_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_040:sink_valid
	wire  [123:0] dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_data;                       // dma_comm_5_right_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_040:sink_data
	wire          dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_ready;                      // rsp_demux_040:sink_ready -> dma_comm_5_right_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_channel;                    // dma_comm_5_right_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_040:sink_channel
	wire          dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_startofpacket;              // dma_comm_5_right_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_040:sink_startofpacket
	wire          dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_endofpacket;                // dma_comm_5_right_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_040:sink_endofpacket
	wire          router_043_src_valid;                                                               // router_043:src_valid -> dma_comm_6_left_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_043_src_data;                                                                // router_043:src_data -> dma_comm_6_left_descriptor_slave_rsp_width_adapter:in_data
	wire          router_043_src_ready;                                                               // dma_comm_6_left_descriptor_slave_rsp_width_adapter:in_ready -> router_043:src_ready
	wire   [48:0] router_043_src_channel;                                                             // router_043:src_channel -> dma_comm_6_left_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_043_src_startofpacket;                                                       // router_043:src_startofpacket -> dma_comm_6_left_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_043_src_endofpacket;                                                         // router_043:src_endofpacket -> dma_comm_6_left_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_valid;                       // dma_comm_6_left_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_041:sink_valid
	wire  [123:0] dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_data;                        // dma_comm_6_left_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_041:sink_data
	wire          dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_ready;                       // rsp_demux_041:sink_ready -> dma_comm_6_left_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_channel;                     // dma_comm_6_left_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_041:sink_channel
	wire          dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_startofpacket;               // dma_comm_6_left_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_041:sink_startofpacket
	wire          dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_endofpacket;                 // dma_comm_6_left_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_041:sink_endofpacket
	wire          router_044_src_valid;                                                               // router_044:src_valid -> dma_comm_6_right_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_044_src_data;                                                                // router_044:src_data -> dma_comm_6_right_descriptor_slave_rsp_width_adapter:in_data
	wire          router_044_src_ready;                                                               // dma_comm_6_right_descriptor_slave_rsp_width_adapter:in_ready -> router_044:src_ready
	wire   [48:0] router_044_src_channel;                                                             // router_044:src_channel -> dma_comm_6_right_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_044_src_startofpacket;                                                       // router_044:src_startofpacket -> dma_comm_6_right_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_044_src_endofpacket;                                                         // router_044:src_endofpacket -> dma_comm_6_right_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_valid;                      // dma_comm_6_right_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_042:sink_valid
	wire  [123:0] dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_data;                       // dma_comm_6_right_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_042:sink_data
	wire          dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_ready;                      // rsp_demux_042:sink_ready -> dma_comm_6_right_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_channel;                    // dma_comm_6_right_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_042:sink_channel
	wire          dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_startofpacket;              // dma_comm_6_right_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_042:sink_startofpacket
	wire          dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_endofpacket;                // dma_comm_6_right_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_042:sink_endofpacket
	wire          router_045_src_valid;                                                               // router_045:src_valid -> dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_045_src_data;                                                                // router_045:src_data -> dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:in_data
	wire          router_045_src_ready;                                                               // dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:in_ready -> router_045:src_ready
	wire   [48:0] router_045_src_channel;                                                             // router_045:src_channel -> dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_045_src_startofpacket;                                                       // router_045:src_startofpacket -> dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_045_src_endofpacket;                                                         // router_045:src_endofpacket -> dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_valid;                      // dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_043:sink_valid
	wire  [123:0] dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_data;                       // dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_043:sink_data
	wire          dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_ready;                      // rsp_demux_043:sink_ready -> dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_channel;                    // dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_043:sink_channel
	wire          dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_startofpacket;              // dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_043:sink_startofpacket
	wire          dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_endofpacket;                // dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_043:sink_endofpacket
	wire          router_046_src_valid;                                                               // router_046:src_valid -> dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:in_valid
	wire  [375:0] router_046_src_data;                                                                // router_046:src_data -> dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:in_data
	wire          router_046_src_ready;                                                               // dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:in_ready -> router_046:src_ready
	wire   [48:0] router_046_src_channel;                                                             // router_046:src_channel -> dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_046_src_startofpacket;                                                       // router_046:src_startofpacket -> dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_046_src_endofpacket;                                                         // router_046:src_endofpacket -> dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_valid;                      // dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_044:sink_valid
	wire  [123:0] dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_data;                       // dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_044:sink_data
	wire          dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_ready;                      // rsp_demux_044:sink_ready -> dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:out_ready
	wire   [48:0] dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_channel;                    // dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_044:sink_channel
	wire          dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_startofpacket;              // dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_044:sink_startofpacket
	wire          dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_endofpacket;                // dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_044:sink_endofpacket
	wire          router_049_src_valid;                                                               // router_049:src_valid -> ext_flash_uas_rsp_width_adapter:in_valid
	wire  [105:0] router_049_src_data;                                                                // router_049:src_data -> ext_flash_uas_rsp_width_adapter:in_data
	wire          router_049_src_ready;                                                               // ext_flash_uas_rsp_width_adapter:in_ready -> router_049:src_ready
	wire   [48:0] router_049_src_channel;                                                             // router_049:src_channel -> ext_flash_uas_rsp_width_adapter:in_channel
	wire          router_049_src_startofpacket;                                                       // router_049:src_startofpacket -> ext_flash_uas_rsp_width_adapter:in_startofpacket
	wire          router_049_src_endofpacket;                                                         // router_049:src_endofpacket -> ext_flash_uas_rsp_width_adapter:in_endofpacket
	wire          ext_flash_uas_rsp_width_adapter_src_valid;                                          // ext_flash_uas_rsp_width_adapter:out_valid -> rsp_demux_047:sink_valid
	wire  [123:0] ext_flash_uas_rsp_width_adapter_src_data;                                           // ext_flash_uas_rsp_width_adapter:out_data -> rsp_demux_047:sink_data
	wire          ext_flash_uas_rsp_width_adapter_src_ready;                                          // rsp_demux_047:sink_ready -> ext_flash_uas_rsp_width_adapter:out_ready
	wire   [48:0] ext_flash_uas_rsp_width_adapter_src_channel;                                        // ext_flash_uas_rsp_width_adapter:out_channel -> rsp_demux_047:sink_channel
	wire          ext_flash_uas_rsp_width_adapter_src_startofpacket;                                  // ext_flash_uas_rsp_width_adapter:out_startofpacket -> rsp_demux_047:sink_startofpacket
	wire          ext_flash_uas_rsp_width_adapter_src_endofpacket;                                    // ext_flash_uas_rsp_width_adapter:out_endofpacket -> rsp_demux_047:sink_endofpacket
	wire          cmd_mux_047_src_valid;                                                              // cmd_mux_047:src_valid -> ext_flash_uas_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_047_src_data;                                                               // cmd_mux_047:src_data -> ext_flash_uas_cmd_width_adapter:in_data
	wire          cmd_mux_047_src_ready;                                                              // ext_flash_uas_cmd_width_adapter:in_ready -> cmd_mux_047:src_ready
	wire   [48:0] cmd_mux_047_src_channel;                                                            // cmd_mux_047:src_channel -> ext_flash_uas_cmd_width_adapter:in_channel
	wire          cmd_mux_047_src_startofpacket;                                                      // cmd_mux_047:src_startofpacket -> ext_flash_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_047_src_endofpacket;                                                        // cmd_mux_047:src_endofpacket -> ext_flash_uas_cmd_width_adapter:in_endofpacket
	wire          ext_flash_uas_cmd_width_adapter_src_valid;                                          // ext_flash_uas_cmd_width_adapter:out_valid -> ext_flash_uas_burst_adapter:sink0_valid
	wire  [105:0] ext_flash_uas_cmd_width_adapter_src_data;                                           // ext_flash_uas_cmd_width_adapter:out_data -> ext_flash_uas_burst_adapter:sink0_data
	wire          ext_flash_uas_cmd_width_adapter_src_ready;                                          // ext_flash_uas_burst_adapter:sink0_ready -> ext_flash_uas_cmd_width_adapter:out_ready
	wire   [48:0] ext_flash_uas_cmd_width_adapter_src_channel;                                        // ext_flash_uas_cmd_width_adapter:out_channel -> ext_flash_uas_burst_adapter:sink0_channel
	wire          ext_flash_uas_cmd_width_adapter_src_startofpacket;                                  // ext_flash_uas_cmd_width_adapter:out_startofpacket -> ext_flash_uas_burst_adapter:sink0_startofpacket
	wire          ext_flash_uas_cmd_width_adapter_src_endofpacket;                                    // ext_flash_uas_cmd_width_adapter:out_endofpacket -> ext_flash_uas_burst_adapter:sink0_endofpacket
	wire   [48:0] nios2_gen2_0_instruction_master_limiter_cmd_valid_data;                             // nios2_gen2_0_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rdata_fifo_src_valid;                // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rdata_fifo_src_data;                 // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rdata_fifo_src_ready;                // avalon_st_adapter_001:in_0_ready -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent:rdata_fifo_sink_error
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rdata_fifo_src_valid;                // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rdata_fifo_src_data;                 // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rdata_fifo_src_ready;                // avalon_st_adapter_002:in_0_ready -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent:rdata_fifo_sink_error
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rdata_fifo_src_valid;                // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rdata_fifo_src_data;                 // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rdata_fifo_src_ready;                // avalon_st_adapter_003:in_0_ready -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent:rdata_fifo_sink_error
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rdata_fifo_src_valid;                // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rdata_fifo_src_data;                 // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rdata_fifo_src_ready;                // avalon_st_adapter_004:in_0_ready -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent:rdata_fifo_sink_error
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rdata_fifo_src_valid;                // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rdata_fifo_src_data;                 // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rdata_fifo_src_ready;                // avalon_st_adapter_005:in_0_ready -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent:rdata_fifo_sink_error
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rdata_fifo_src_valid;                // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rdata_fifo_src_data;                 // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rdata_fifo_src_ready;                // avalon_st_adapter_006:in_0_ready -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent:rdata_fifo_sink_error
	wire          ftdi_usb3_0_avalon_slave_config_agent_rdata_fifo_src_valid;                         // FTDI_USB3_0_avalon_slave_config_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] ftdi_usb3_0_avalon_slave_config_agent_rdata_fifo_src_data;                          // FTDI_USB3_0_avalon_slave_config_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          ftdi_usb3_0_avalon_slave_config_agent_rdata_fifo_src_ready;                         // avalon_st_adapter_007:in_0_ready -> FTDI_USB3_0_avalon_slave_config_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> FTDI_USB3_0_avalon_slave_config_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> FTDI_USB3_0_avalon_slave_config_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // FTDI_USB3_0_avalon_slave_config_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> FTDI_USB3_0_avalon_slave_config_agent:rdata_fifo_sink_error
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rdata_fifo_src_valid;            // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rdata_fifo_src_data;             // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rdata_fifo_src_ready;            // avalon_st_adapter_008:in_0_ready -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> COMM_Pedreiro_v1_01_1_avalon_slave_windowing_agent:rdata_fifo_sink_error
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rdata_fifo_src_valid;            // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rdata_fifo_src_data;             // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rdata_fifo_src_ready;            // avalon_st_adapter_009:in_0_ready -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> COMM_Pedreiro_v1_01_2_avalon_slave_windowing_agent:rdata_fifo_sink_error
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rdata_fifo_src_valid;            // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rdata_fifo_src_data;             // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rdata_fifo_src_ready;            // avalon_st_adapter_010:in_0_ready -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> COMM_Pedreiro_v1_01_3_avalon_slave_windowing_agent:rdata_fifo_sink_error
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rdata_fifo_src_valid;            // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rdata_fifo_src_data;             // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rdata_fifo_src_ready;            // avalon_st_adapter_011:in_0_ready -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                  // COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> COMM_Pedreiro_v1_01_4_avalon_slave_windowing_agent:rdata_fifo_sink_error
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rdata_fifo_src_valid;            // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rdata_fifo_src_data;             // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rdata_fifo_src_ready;            // avalon_st_adapter_012:in_0_ready -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                  // COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> COMM_Pedreiro_v1_01_5_avalon_slave_windowing_agent:rdata_fifo_sink_error
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rdata_fifo_src_valid;            // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rdata_fifo_src_data;             // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rdata_fifo_src_ready;            // avalon_st_adapter_013:in_0_ready -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                  // COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> COMM_Pedreiro_v1_01_6_avalon_slave_windowing_agent:rdata_fifo_sink_error
	wire          ddr2_address_span_extender_cntl_agent_rdata_fifo_out_valid;                         // ddr2_address_span_extender_cntl_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [65:0] ddr2_address_span_extender_cntl_agent_rdata_fifo_out_data;                          // ddr2_address_span_extender_cntl_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          ddr2_address_span_extender_cntl_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_014:in_0_ready -> ddr2_address_span_extender_cntl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> ddr2_address_span_extender_cntl_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> ddr2_address_span_extender_cntl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                  // ddr2_address_span_extender_cntl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> ddr2_address_span_extender_cntl_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                                // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                                 // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_015:in_0_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                  // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_1_left_csr_agent_rdata_fifo_src_valid;                                     // dma_comm_1_left_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] dma_comm_1_left_csr_agent_rdata_fifo_src_data;                                      // dma_comm_1_left_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          dma_comm_1_left_csr_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_016:in_0_ready -> dma_comm_1_left_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                  // avalon_st_adapter_016:out_0_valid -> dma_comm_1_left_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                   // avalon_st_adapter_016:out_0_data -> dma_comm_1_left_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                  // dma_comm_1_left_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                  // avalon_st_adapter_016:out_0_error -> dma_comm_1_left_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_1_right_csr_agent_rdata_fifo_src_valid;                                    // dma_comm_1_right_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] dma_comm_1_right_csr_agent_rdata_fifo_src_data;                                     // dma_comm_1_right_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          dma_comm_1_right_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_017:in_0_ready -> dma_comm_1_right_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                  // avalon_st_adapter_017:out_0_valid -> dma_comm_1_right_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                   // avalon_st_adapter_017:out_0_data -> dma_comm_1_right_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                  // dma_comm_1_right_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                  // avalon_st_adapter_017:out_0_error -> dma_comm_1_right_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_2_left_csr_agent_rdata_fifo_src_valid;                                     // dma_comm_2_left_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] dma_comm_2_left_csr_agent_rdata_fifo_src_data;                                      // dma_comm_2_left_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          dma_comm_2_left_csr_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_018:in_0_ready -> dma_comm_2_left_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                  // avalon_st_adapter_018:out_0_valid -> dma_comm_2_left_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                   // avalon_st_adapter_018:out_0_data -> dma_comm_2_left_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                  // dma_comm_2_left_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                  // avalon_st_adapter_018:out_0_error -> dma_comm_2_left_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_2_right_csr_agent_rdata_fifo_src_valid;                                    // dma_comm_2_right_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] dma_comm_2_right_csr_agent_rdata_fifo_src_data;                                     // dma_comm_2_right_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          dma_comm_2_right_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_019:in_0_ready -> dma_comm_2_right_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                  // avalon_st_adapter_019:out_0_valid -> dma_comm_2_right_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                   // avalon_st_adapter_019:out_0_data -> dma_comm_2_right_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                  // dma_comm_2_right_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                  // avalon_st_adapter_019:out_0_error -> dma_comm_2_right_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_3_left_csr_agent_rdata_fifo_src_valid;                                     // dma_comm_3_left_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] dma_comm_3_left_csr_agent_rdata_fifo_src_data;                                      // dma_comm_3_left_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          dma_comm_3_left_csr_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_020:in_0_ready -> dma_comm_3_left_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                  // avalon_st_adapter_020:out_0_valid -> dma_comm_3_left_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                   // avalon_st_adapter_020:out_0_data -> dma_comm_3_left_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                  // dma_comm_3_left_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                  // avalon_st_adapter_020:out_0_error -> dma_comm_3_left_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_3_right_csr_agent_rdata_fifo_src_valid;                                    // dma_comm_3_right_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] dma_comm_3_right_csr_agent_rdata_fifo_src_data;                                     // dma_comm_3_right_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          dma_comm_3_right_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_021:in_0_ready -> dma_comm_3_right_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                  // avalon_st_adapter_021:out_0_valid -> dma_comm_3_right_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                   // avalon_st_adapter_021:out_0_data -> dma_comm_3_right_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                  // dma_comm_3_right_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                  // avalon_st_adapter_021:out_0_error -> dma_comm_3_right_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_4_left_csr_agent_rdata_fifo_src_valid;                                     // dma_comm_4_left_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] dma_comm_4_left_csr_agent_rdata_fifo_src_data;                                      // dma_comm_4_left_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          dma_comm_4_left_csr_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_022:in_0_ready -> dma_comm_4_left_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                  // avalon_st_adapter_022:out_0_valid -> dma_comm_4_left_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                   // avalon_st_adapter_022:out_0_data -> dma_comm_4_left_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                  // dma_comm_4_left_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                  // avalon_st_adapter_022:out_0_error -> dma_comm_4_left_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_4_right_csr_agent_rdata_fifo_src_valid;                                    // dma_comm_4_right_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] dma_comm_4_right_csr_agent_rdata_fifo_src_data;                                     // dma_comm_4_right_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          dma_comm_4_right_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_023:in_0_ready -> dma_comm_4_right_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                  // avalon_st_adapter_023:out_0_valid -> dma_comm_4_right_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                   // avalon_st_adapter_023:out_0_data -> dma_comm_4_right_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                  // dma_comm_4_right_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                  // avalon_st_adapter_023:out_0_error -> dma_comm_4_right_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_5_left_csr_agent_rdata_fifo_src_valid;                                     // dma_comm_5_left_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] dma_comm_5_left_csr_agent_rdata_fifo_src_data;                                      // dma_comm_5_left_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire          dma_comm_5_left_csr_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_024:in_0_ready -> dma_comm_5_left_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                  // avalon_st_adapter_024:out_0_valid -> dma_comm_5_left_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                   // avalon_st_adapter_024:out_0_data -> dma_comm_5_left_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                  // dma_comm_5_left_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                  // avalon_st_adapter_024:out_0_error -> dma_comm_5_left_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_5_right_csr_agent_rdata_fifo_src_valid;                                    // dma_comm_5_right_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] dma_comm_5_right_csr_agent_rdata_fifo_src_data;                                     // dma_comm_5_right_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire          dma_comm_5_right_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_025:in_0_ready -> dma_comm_5_right_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                  // avalon_st_adapter_025:out_0_valid -> dma_comm_5_right_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                                   // avalon_st_adapter_025:out_0_data -> dma_comm_5_right_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                  // dma_comm_5_right_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                  // avalon_st_adapter_025:out_0_error -> dma_comm_5_right_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_6_left_csr_agent_rdata_fifo_src_valid;                                     // dma_comm_6_left_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] dma_comm_6_left_csr_agent_rdata_fifo_src_data;                                      // dma_comm_6_left_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire          dma_comm_6_left_csr_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_026:in_0_ready -> dma_comm_6_left_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                  // avalon_st_adapter_026:out_0_valid -> dma_comm_6_left_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                   // avalon_st_adapter_026:out_0_data -> dma_comm_6_left_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                  // dma_comm_6_left_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                  // avalon_st_adapter_026:out_0_error -> dma_comm_6_left_csr_agent:rdata_fifo_sink_error
	wire          dma_comm_6_right_csr_agent_rdata_fifo_src_valid;                                    // dma_comm_6_right_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] dma_comm_6_right_csr_agent_rdata_fifo_src_data;                                     // dma_comm_6_right_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_027:in_0_data
	wire          dma_comm_6_right_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_027:in_0_ready -> dma_comm_6_right_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                  // avalon_st_adapter_027:out_0_valid -> dma_comm_6_right_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                                   // avalon_st_adapter_027:out_0_data -> dma_comm_6_right_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                  // dma_comm_6_right_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                  // avalon_st_adapter_027:out_0_error -> dma_comm_6_right_csr_agent:rdata_fifo_sink_error
	wire          dma_ftdi_rx_usb3_csr_agent_rdata_fifo_src_valid;                                    // dma_ftdi_rx_usb3_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_028:in_0_valid
	wire   [33:0] dma_ftdi_rx_usb3_csr_agent_rdata_fifo_src_data;                                     // dma_ftdi_rx_usb3_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_028:in_0_data
	wire          dma_ftdi_rx_usb3_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_028:in_0_ready -> dma_ftdi_rx_usb3_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_028_out_0_valid;                                                  // avalon_st_adapter_028:out_0_valid -> dma_ftdi_rx_usb3_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_028_out_0_data;                                                   // avalon_st_adapter_028:out_0_data -> dma_ftdi_rx_usb3_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_028_out_0_ready;                                                  // dma_ftdi_rx_usb3_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_028:out_0_ready
	wire    [0:0] avalon_st_adapter_028_out_0_error;                                                  // avalon_st_adapter_028:out_0_error -> dma_ftdi_rx_usb3_csr_agent:rdata_fifo_sink_error
	wire          dma_ftdi_tx_usb3_csr_agent_rdata_fifo_src_valid;                                    // dma_ftdi_tx_usb3_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_029:in_0_valid
	wire   [33:0] dma_ftdi_tx_usb3_csr_agent_rdata_fifo_src_data;                                     // dma_ftdi_tx_usb3_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_029:in_0_data
	wire          dma_ftdi_tx_usb3_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_029:in_0_ready -> dma_ftdi_tx_usb3_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_029_out_0_valid;                                                  // avalon_st_adapter_029:out_0_valid -> dma_ftdi_tx_usb3_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_029_out_0_data;                                                   // avalon_st_adapter_029:out_0_data -> dma_ftdi_tx_usb3_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_029_out_0_ready;                                                  // dma_ftdi_tx_usb3_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_029:out_0_ready
	wire    [0:0] avalon_st_adapter_029_out_0_error;                                                  // avalon_st_adapter_029:out_0_error -> dma_ftdi_tx_usb3_csr_agent:rdata_fifo_sink_error
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_030:in_0_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_030:in_0_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_030:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_030_out_0_valid;                                                  // avalon_st_adapter_030:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_030_out_0_data;                                                   // avalon_st_adapter_030:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_030_out_0_ready;                                                  // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_030:out_0_ready
	wire    [0:0] avalon_st_adapter_030_out_0_error;                                                  // avalon_st_adapter_030:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_1_left_descriptor_slave_agent_rdata_fifo_out_valid;                        // dma_comm_1_left_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_031:in_0_valid
	wire  [257:0] dma_comm_1_left_descriptor_slave_agent_rdata_fifo_out_data;                         // dma_comm_1_left_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_031:in_0_data
	wire          dma_comm_1_left_descriptor_slave_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_031:in_0_ready -> dma_comm_1_left_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_031_out_0_valid;                                                  // avalon_st_adapter_031:out_0_valid -> dma_comm_1_left_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_031_out_0_data;                                                   // avalon_st_adapter_031:out_0_data -> dma_comm_1_left_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_031_out_0_ready;                                                  // dma_comm_1_left_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_031:out_0_ready
	wire    [0:0] avalon_st_adapter_031_out_0_error;                                                  // avalon_st_adapter_031:out_0_error -> dma_comm_1_left_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_1_right_descriptor_slave_agent_rdata_fifo_out_valid;                       // dma_comm_1_right_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_032:in_0_valid
	wire  [257:0] dma_comm_1_right_descriptor_slave_agent_rdata_fifo_out_data;                        // dma_comm_1_right_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_032:in_0_data
	wire          dma_comm_1_right_descriptor_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_032:in_0_ready -> dma_comm_1_right_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_032_out_0_valid;                                                  // avalon_st_adapter_032:out_0_valid -> dma_comm_1_right_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_032_out_0_data;                                                   // avalon_st_adapter_032:out_0_data -> dma_comm_1_right_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_032_out_0_ready;                                                  // dma_comm_1_right_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_032:out_0_ready
	wire    [0:0] avalon_st_adapter_032_out_0_error;                                                  // avalon_st_adapter_032:out_0_error -> dma_comm_1_right_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_2_left_descriptor_slave_agent_rdata_fifo_out_valid;                        // dma_comm_2_left_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_033:in_0_valid
	wire  [257:0] dma_comm_2_left_descriptor_slave_agent_rdata_fifo_out_data;                         // dma_comm_2_left_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_033:in_0_data
	wire          dma_comm_2_left_descriptor_slave_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_033:in_0_ready -> dma_comm_2_left_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_033_out_0_valid;                                                  // avalon_st_adapter_033:out_0_valid -> dma_comm_2_left_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_033_out_0_data;                                                   // avalon_st_adapter_033:out_0_data -> dma_comm_2_left_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_033_out_0_ready;                                                  // dma_comm_2_left_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_033:out_0_ready
	wire    [0:0] avalon_st_adapter_033_out_0_error;                                                  // avalon_st_adapter_033:out_0_error -> dma_comm_2_left_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_2_right_descriptor_slave_agent_rdata_fifo_out_valid;                       // dma_comm_2_right_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_034:in_0_valid
	wire  [257:0] dma_comm_2_right_descriptor_slave_agent_rdata_fifo_out_data;                        // dma_comm_2_right_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_034:in_0_data
	wire          dma_comm_2_right_descriptor_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_034:in_0_ready -> dma_comm_2_right_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_034_out_0_valid;                                                  // avalon_st_adapter_034:out_0_valid -> dma_comm_2_right_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_034_out_0_data;                                                   // avalon_st_adapter_034:out_0_data -> dma_comm_2_right_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_034_out_0_ready;                                                  // dma_comm_2_right_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_034:out_0_ready
	wire    [0:0] avalon_st_adapter_034_out_0_error;                                                  // avalon_st_adapter_034:out_0_error -> dma_comm_2_right_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_3_left_descriptor_slave_agent_rdata_fifo_out_valid;                        // dma_comm_3_left_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_035:in_0_valid
	wire  [257:0] dma_comm_3_left_descriptor_slave_agent_rdata_fifo_out_data;                         // dma_comm_3_left_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_035:in_0_data
	wire          dma_comm_3_left_descriptor_slave_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_035:in_0_ready -> dma_comm_3_left_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_035_out_0_valid;                                                  // avalon_st_adapter_035:out_0_valid -> dma_comm_3_left_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_035_out_0_data;                                                   // avalon_st_adapter_035:out_0_data -> dma_comm_3_left_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_035_out_0_ready;                                                  // dma_comm_3_left_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_035:out_0_ready
	wire    [0:0] avalon_st_adapter_035_out_0_error;                                                  // avalon_st_adapter_035:out_0_error -> dma_comm_3_left_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_3_right_descriptor_slave_agent_rdata_fifo_out_valid;                       // dma_comm_3_right_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_036:in_0_valid
	wire  [257:0] dma_comm_3_right_descriptor_slave_agent_rdata_fifo_out_data;                        // dma_comm_3_right_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_036:in_0_data
	wire          dma_comm_3_right_descriptor_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_036:in_0_ready -> dma_comm_3_right_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_036_out_0_valid;                                                  // avalon_st_adapter_036:out_0_valid -> dma_comm_3_right_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_036_out_0_data;                                                   // avalon_st_adapter_036:out_0_data -> dma_comm_3_right_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_036_out_0_ready;                                                  // dma_comm_3_right_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_036:out_0_ready
	wire    [0:0] avalon_st_adapter_036_out_0_error;                                                  // avalon_st_adapter_036:out_0_error -> dma_comm_3_right_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_4_left_descriptor_slave_agent_rdata_fifo_out_valid;                        // dma_comm_4_left_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_037:in_0_valid
	wire  [257:0] dma_comm_4_left_descriptor_slave_agent_rdata_fifo_out_data;                         // dma_comm_4_left_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_037:in_0_data
	wire          dma_comm_4_left_descriptor_slave_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_037:in_0_ready -> dma_comm_4_left_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_037_out_0_valid;                                                  // avalon_st_adapter_037:out_0_valid -> dma_comm_4_left_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_037_out_0_data;                                                   // avalon_st_adapter_037:out_0_data -> dma_comm_4_left_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_037_out_0_ready;                                                  // dma_comm_4_left_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_037:out_0_ready
	wire    [0:0] avalon_st_adapter_037_out_0_error;                                                  // avalon_st_adapter_037:out_0_error -> dma_comm_4_left_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_4_right_descriptor_slave_agent_rdata_fifo_out_valid;                       // dma_comm_4_right_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_038:in_0_valid
	wire  [257:0] dma_comm_4_right_descriptor_slave_agent_rdata_fifo_out_data;                        // dma_comm_4_right_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_038:in_0_data
	wire          dma_comm_4_right_descriptor_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_038:in_0_ready -> dma_comm_4_right_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_038_out_0_valid;                                                  // avalon_st_adapter_038:out_0_valid -> dma_comm_4_right_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_038_out_0_data;                                                   // avalon_st_adapter_038:out_0_data -> dma_comm_4_right_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_038_out_0_ready;                                                  // dma_comm_4_right_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_038:out_0_ready
	wire    [0:0] avalon_st_adapter_038_out_0_error;                                                  // avalon_st_adapter_038:out_0_error -> dma_comm_4_right_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_5_left_descriptor_slave_agent_rdata_fifo_out_valid;                        // dma_comm_5_left_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_039:in_0_valid
	wire  [257:0] dma_comm_5_left_descriptor_slave_agent_rdata_fifo_out_data;                         // dma_comm_5_left_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_039:in_0_data
	wire          dma_comm_5_left_descriptor_slave_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_039:in_0_ready -> dma_comm_5_left_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_039_out_0_valid;                                                  // avalon_st_adapter_039:out_0_valid -> dma_comm_5_left_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_039_out_0_data;                                                   // avalon_st_adapter_039:out_0_data -> dma_comm_5_left_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_039_out_0_ready;                                                  // dma_comm_5_left_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_039:out_0_ready
	wire    [0:0] avalon_st_adapter_039_out_0_error;                                                  // avalon_st_adapter_039:out_0_error -> dma_comm_5_left_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_5_right_descriptor_slave_agent_rdata_fifo_out_valid;                       // dma_comm_5_right_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_040:in_0_valid
	wire  [257:0] dma_comm_5_right_descriptor_slave_agent_rdata_fifo_out_data;                        // dma_comm_5_right_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_040:in_0_data
	wire          dma_comm_5_right_descriptor_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_040:in_0_ready -> dma_comm_5_right_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_040_out_0_valid;                                                  // avalon_st_adapter_040:out_0_valid -> dma_comm_5_right_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_040_out_0_data;                                                   // avalon_st_adapter_040:out_0_data -> dma_comm_5_right_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_040_out_0_ready;                                                  // dma_comm_5_right_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_040:out_0_ready
	wire    [0:0] avalon_st_adapter_040_out_0_error;                                                  // avalon_st_adapter_040:out_0_error -> dma_comm_5_right_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_6_left_descriptor_slave_agent_rdata_fifo_out_valid;                        // dma_comm_6_left_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_041:in_0_valid
	wire  [257:0] dma_comm_6_left_descriptor_slave_agent_rdata_fifo_out_data;                         // dma_comm_6_left_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_041:in_0_data
	wire          dma_comm_6_left_descriptor_slave_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_041:in_0_ready -> dma_comm_6_left_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_041_out_0_valid;                                                  // avalon_st_adapter_041:out_0_valid -> dma_comm_6_left_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_041_out_0_data;                                                   // avalon_st_adapter_041:out_0_data -> dma_comm_6_left_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_041_out_0_ready;                                                  // dma_comm_6_left_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_041:out_0_ready
	wire    [0:0] avalon_st_adapter_041_out_0_error;                                                  // avalon_st_adapter_041:out_0_error -> dma_comm_6_left_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_comm_6_right_descriptor_slave_agent_rdata_fifo_out_valid;                       // dma_comm_6_right_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_042:in_0_valid
	wire  [257:0] dma_comm_6_right_descriptor_slave_agent_rdata_fifo_out_data;                        // dma_comm_6_right_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_042:in_0_data
	wire          dma_comm_6_right_descriptor_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_042:in_0_ready -> dma_comm_6_right_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_042_out_0_valid;                                                  // avalon_st_adapter_042:out_0_valid -> dma_comm_6_right_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_042_out_0_data;                                                   // avalon_st_adapter_042:out_0_data -> dma_comm_6_right_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_042_out_0_ready;                                                  // dma_comm_6_right_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_042:out_0_ready
	wire    [0:0] avalon_st_adapter_042_out_0_error;                                                  // avalon_st_adapter_042:out_0_error -> dma_comm_6_right_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_out_valid;                       // dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_043:in_0_valid
	wire  [257:0] dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_out_data;                        // dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_043:in_0_data
	wire          dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_043:in_0_ready -> dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_043_out_0_valid;                                                  // avalon_st_adapter_043:out_0_valid -> dma_ftdi_rx_usb3_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_043_out_0_data;                                                   // avalon_st_adapter_043:out_0_data -> dma_ftdi_rx_usb3_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_043_out_0_ready;                                                  // dma_ftdi_rx_usb3_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_043:out_0_ready
	wire    [0:0] avalon_st_adapter_043_out_0_error;                                                  // avalon_st_adapter_043:out_0_error -> dma_ftdi_rx_usb3_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_out_valid;                       // dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_044:in_0_valid
	wire  [257:0] dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_out_data;                        // dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_044:in_0_data
	wire          dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_044:in_0_ready -> dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_044_out_0_valid;                                                  // avalon_st_adapter_044:out_0_valid -> dma_ftdi_tx_usb3_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_044_out_0_data;                                                   // avalon_st_adapter_044:out_0_data -> dma_ftdi_tx_usb3_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_044_out_0_ready;                                                  // dma_ftdi_tx_usb3_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_044:out_0_ready
	wire    [0:0] avalon_st_adapter_044_out_0_error;                                                  // avalon_st_adapter_044:out_0_error -> dma_ftdi_tx_usb3_descriptor_slave_agent:rdata_fifo_sink_error
	wire          clock_bridge_afi_50_s0_agent_rdata_fifo_src_valid;                                  // clock_bridge_afi_50_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_045:in_0_valid
	wire   [33:0] clock_bridge_afi_50_s0_agent_rdata_fifo_src_data;                                   // clock_bridge_afi_50_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_045:in_0_data
	wire          clock_bridge_afi_50_s0_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_045:in_0_ready -> clock_bridge_afi_50_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_045_out_0_valid;                                                  // avalon_st_adapter_045:out_0_valid -> clock_bridge_afi_50_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_045_out_0_data;                                                   // avalon_st_adapter_045:out_0_data -> clock_bridge_afi_50_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_045_out_0_ready;                                                  // clock_bridge_afi_50_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_045:out_0_ready
	wire    [0:0] avalon_st_adapter_045_out_0_error;                                                  // avalon_st_adapter_045:out_0_error -> clock_bridge_afi_50_s0_agent:rdata_fifo_sink_error
	wire          onchip_memory_s1_agent_rdata_fifo_src_valid;                                        // onchip_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_046:in_0_valid
	wire   [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                         // onchip_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_046:in_0_data
	wire          onchip_memory_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_046:in_0_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_046_out_0_valid;                                                  // avalon_st_adapter_046:out_0_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_046_out_0_data;                                                   // avalon_st_adapter_046:out_0_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_046_out_0_ready;                                                  // onchip_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_046:out_0_ready
	wire    [0:0] avalon_st_adapter_046_out_0_error;                                                  // avalon_st_adapter_046:out_0_error -> onchip_memory_s1_agent:rdata_fifo_sink_error
	wire          ext_flash_uas_agent_rdata_fifo_out_valid;                                           // ext_flash_uas_agent_rdata_fifo:out_valid -> avalon_st_adapter_047:in_0_valid
	wire   [17:0] ext_flash_uas_agent_rdata_fifo_out_data;                                            // ext_flash_uas_agent_rdata_fifo:out_data -> avalon_st_adapter_047:in_0_data
	wire          ext_flash_uas_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_047:in_0_ready -> ext_flash_uas_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_047_out_0_valid;                                                  // avalon_st_adapter_047:out_0_valid -> ext_flash_uas_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_047_out_0_data;                                                   // avalon_st_adapter_047:out_0_data -> ext_flash_uas_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_047_out_0_ready;                                                  // ext_flash_uas_agent:rdata_fifo_sink_ready -> avalon_st_adapter_047:out_0_ready
	wire    [0:0] avalon_st_adapter_047_out_0_error;                                                  // avalon_st_adapter_047:out_0_error -> ext_flash_uas_agent:rdata_fifo_sink_error
	wire          ddr2_address_span_extender_windowed_slave_agent_rdata_fifo_src_valid;               // ddr2_address_span_extender_windowed_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_048:in_0_valid
	wire   [33:0] ddr2_address_span_extender_windowed_slave_agent_rdata_fifo_src_data;                // ddr2_address_span_extender_windowed_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_048:in_0_data
	wire          ddr2_address_span_extender_windowed_slave_agent_rdata_fifo_src_ready;               // avalon_st_adapter_048:in_0_ready -> ddr2_address_span_extender_windowed_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_048_out_0_valid;                                                  // avalon_st_adapter_048:out_0_valid -> ddr2_address_span_extender_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_048_out_0_data;                                                   // avalon_st_adapter_048:out_0_data -> ddr2_address_span_extender_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_048_out_0_ready;                                                  // ddr2_address_span_extender_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_048:out_0_ready
	wire    [0:0] avalon_st_adapter_048_out_0_error;                                                  // avalon_st_adapter_048:out_0_error -> ddr2_address_span_extender_windowed_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_data_master_translator (
		.clk                    (clk_100_clk_clk),                                                             //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (clk_100_clk_clk),                                                                    //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (nios2_gen2_0_instruction_master_burstcount),                                         //                          .burstcount
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_0_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_100_clk_clk),                                      //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rmap_mem_nfee_comm_1_avalon_rmap_slave_0_translator (
		.clk                    (clk_100_clk_clk),                                                 //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_read),          //                         .read
		.uav_write              (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_write),                  //                         .write
		.av_read                (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_read),                   //                         .read
		.av_readdata            (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_readdata),               //                         .readdata
		.av_writedata           (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_writedata),              //                         .writedata
		.av_byteenable          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_byteenable),             //                         .byteenable
		.av_waitrequest         (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rmap_mem_nfee_comm_2_avalon_rmap_slave_0_translator (
		.clk                    (clk_100_clk_clk),                                                 //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_read),          //                         .read
		.uav_write              (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_write),                  //                         .write
		.av_read                (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_read),                   //                         .read
		.av_readdata            (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_readdata),               //                         .readdata
		.av_writedata           (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_writedata),              //                         .writedata
		.av_byteenable          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_byteenable),             //                         .byteenable
		.av_waitrequest         (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rmap_mem_nfee_comm_3_avalon_rmap_slave_0_translator (
		.clk                    (clk_100_clk_clk),                                                 //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_read),          //                         .read
		.uav_write              (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_write),                  //                         .write
		.av_read                (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_read),                   //                         .read
		.av_readdata            (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_readdata),               //                         .readdata
		.av_writedata           (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_writedata),              //                         .writedata
		.av_byteenable          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_byteenable),             //                         .byteenable
		.av_waitrequest         (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rmap_mem_nfee_comm_4_avalon_rmap_slave_0_translator (
		.clk                    (clk_100_clk_clk),                                                 //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_read),          //                         .read
		.uav_write              (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_write),                  //                         .write
		.av_read                (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_read),                   //                         .read
		.av_readdata            (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_readdata),               //                         .readdata
		.av_writedata           (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_writedata),              //                         .writedata
		.av_byteenable          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_byteenable),             //                         .byteenable
		.av_waitrequest         (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rmap_mem_nfee_comm_5_avalon_rmap_slave_0_translator (
		.clk                    (clk_100_clk_clk),                                                 //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_read),          //                         .read
		.uav_write              (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_write),                  //                         .write
		.av_read                (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_read),                   //                         .read
		.av_readdata            (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_readdata),               //                         .readdata
		.av_writedata           (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_writedata),              //                         .writedata
		.av_byteenable          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_byteenable),             //                         .byteenable
		.av_waitrequest         (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rmap_mem_nfee_comm_6_avalon_rmap_slave_0_translator (
		.clk                    (clk_100_clk_clk),                                                 //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_read),          //                         .read
		.uav_write              (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_write),                  //                         .write
		.av_read                (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_read),                   //                         .read
		.av_readdata            (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_readdata),               //                         .readdata
		.av_writedata           (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_writedata),              //                         .writedata
		.av_byteenable          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_byteenable),             //                         .byteenable
		.av_waitrequest         (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ftdi_usb3_0_avalon_slave_config_translator (
		.clk                    (clk_100_clk_clk),                                        //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (ftdi_usb3_0_avalon_slave_config_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (ftdi_usb3_0_avalon_slave_config_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (ftdi_usb3_0_avalon_slave_config_agent_m0_read),          //                         .read
		.uav_write              (ftdi_usb3_0_avalon_slave_config_agent_m0_write),         //                         .write
		.uav_waitrequest        (ftdi_usb3_0_avalon_slave_config_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (ftdi_usb3_0_avalon_slave_config_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (ftdi_usb3_0_avalon_slave_config_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (ftdi_usb3_0_avalon_slave_config_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (ftdi_usb3_0_avalon_slave_config_agent_m0_writedata),     //                         .writedata
		.uav_lock               (ftdi_usb3_0_avalon_slave_config_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (ftdi_usb3_0_avalon_slave_config_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (FTDI_USB3_0_avalon_slave_config_address),                //      avalon_anti_slave_0.address
		.av_write               (FTDI_USB3_0_avalon_slave_config_write),                  //                         .write
		.av_read                (FTDI_USB3_0_avalon_slave_config_read),                   //                         .read
		.av_readdata            (FTDI_USB3_0_avalon_slave_config_readdata),               //                         .readdata
		.av_writedata           (FTDI_USB3_0_avalon_slave_config_writedata),              //                         .writedata
		.av_byteenable          (FTDI_USB3_0_avalon_slave_config_byteenable),             //                         .byteenable
		.av_waitrequest         (FTDI_USB3_0_avalon_slave_config_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) comm_pedreiro_v1_01_1_avalon_slave_windowing_translator (
		.clk                    (clk_100_clk_clk),                                                     //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_read),          //                         .read
		.uav_write              (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_write),         //                         .write
		.uav_waitrequest        (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_writedata),     //                         .writedata
		.uav_lock               (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (COMM_Pedreiro_v1_01_1_avalon_slave_windowing_address),                //      avalon_anti_slave_0.address
		.av_write               (COMM_Pedreiro_v1_01_1_avalon_slave_windowing_write),                  //                         .write
		.av_read                (COMM_Pedreiro_v1_01_1_avalon_slave_windowing_read),                   //                         .read
		.av_readdata            (COMM_Pedreiro_v1_01_1_avalon_slave_windowing_readdata),               //                         .readdata
		.av_writedata           (COMM_Pedreiro_v1_01_1_avalon_slave_windowing_writedata),              //                         .writedata
		.av_byteenable          (COMM_Pedreiro_v1_01_1_avalon_slave_windowing_byteenable),             //                         .byteenable
		.av_waitrequest         (COMM_Pedreiro_v1_01_1_avalon_slave_windowing_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) comm_pedreiro_v1_01_2_avalon_slave_windowing_translator (
		.clk                    (clk_100_clk_clk),                                                     //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_read),          //                         .read
		.uav_write              (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_write),         //                         .write
		.uav_waitrequest        (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_writedata),     //                         .writedata
		.uav_lock               (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (COMM_Pedreiro_v1_01_2_avalon_slave_windowing_address),                //      avalon_anti_slave_0.address
		.av_write               (COMM_Pedreiro_v1_01_2_avalon_slave_windowing_write),                  //                         .write
		.av_read                (COMM_Pedreiro_v1_01_2_avalon_slave_windowing_read),                   //                         .read
		.av_readdata            (COMM_Pedreiro_v1_01_2_avalon_slave_windowing_readdata),               //                         .readdata
		.av_writedata           (COMM_Pedreiro_v1_01_2_avalon_slave_windowing_writedata),              //                         .writedata
		.av_byteenable          (COMM_Pedreiro_v1_01_2_avalon_slave_windowing_byteenable),             //                         .byteenable
		.av_waitrequest         (COMM_Pedreiro_v1_01_2_avalon_slave_windowing_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) comm_pedreiro_v1_01_3_avalon_slave_windowing_translator (
		.clk                    (clk_100_clk_clk),                                                     //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_read),          //                         .read
		.uav_write              (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_write),         //                         .write
		.uav_waitrequest        (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_writedata),     //                         .writedata
		.uav_lock               (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (COMM_Pedreiro_v1_01_3_avalon_slave_windowing_address),                //      avalon_anti_slave_0.address
		.av_write               (COMM_Pedreiro_v1_01_3_avalon_slave_windowing_write),                  //                         .write
		.av_read                (COMM_Pedreiro_v1_01_3_avalon_slave_windowing_read),                   //                         .read
		.av_readdata            (COMM_Pedreiro_v1_01_3_avalon_slave_windowing_readdata),               //                         .readdata
		.av_writedata           (COMM_Pedreiro_v1_01_3_avalon_slave_windowing_writedata),              //                         .writedata
		.av_byteenable          (COMM_Pedreiro_v1_01_3_avalon_slave_windowing_byteenable),             //                         .byteenable
		.av_waitrequest         (COMM_Pedreiro_v1_01_3_avalon_slave_windowing_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) comm_pedreiro_v1_01_4_avalon_slave_windowing_translator (
		.clk                    (clk_100_clk_clk),                                                     //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_read),          //                         .read
		.uav_write              (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_write),         //                         .write
		.uav_waitrequest        (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_writedata),     //                         .writedata
		.uav_lock               (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (COMM_Pedreiro_v1_01_4_avalon_slave_windowing_address),                //      avalon_anti_slave_0.address
		.av_write               (COMM_Pedreiro_v1_01_4_avalon_slave_windowing_write),                  //                         .write
		.av_read                (COMM_Pedreiro_v1_01_4_avalon_slave_windowing_read),                   //                         .read
		.av_readdata            (COMM_Pedreiro_v1_01_4_avalon_slave_windowing_readdata),               //                         .readdata
		.av_writedata           (COMM_Pedreiro_v1_01_4_avalon_slave_windowing_writedata),              //                         .writedata
		.av_byteenable          (COMM_Pedreiro_v1_01_4_avalon_slave_windowing_byteenable),             //                         .byteenable
		.av_waitrequest         (COMM_Pedreiro_v1_01_4_avalon_slave_windowing_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) comm_pedreiro_v1_01_5_avalon_slave_windowing_translator (
		.clk                    (clk_100_clk_clk),                                                     //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_read),          //                         .read
		.uav_write              (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_write),         //                         .write
		.uav_waitrequest        (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_writedata),     //                         .writedata
		.uav_lock               (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (COMM_Pedreiro_v1_01_5_avalon_slave_windowing_address),                //      avalon_anti_slave_0.address
		.av_write               (COMM_Pedreiro_v1_01_5_avalon_slave_windowing_write),                  //                         .write
		.av_read                (COMM_Pedreiro_v1_01_5_avalon_slave_windowing_read),                   //                         .read
		.av_readdata            (COMM_Pedreiro_v1_01_5_avalon_slave_windowing_readdata),               //                         .readdata
		.av_writedata           (COMM_Pedreiro_v1_01_5_avalon_slave_windowing_writedata),              //                         .writedata
		.av_byteenable          (COMM_Pedreiro_v1_01_5_avalon_slave_windowing_byteenable),             //                         .byteenable
		.av_waitrequest         (COMM_Pedreiro_v1_01_5_avalon_slave_windowing_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) comm_pedreiro_v1_01_6_avalon_slave_windowing_translator (
		.clk                    (clk_100_clk_clk),                                                     //                      clk.clk
		.reset                  (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_read),          //                         .read
		.uav_write              (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_write),         //                         .write
		.uav_waitrequest        (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_writedata),     //                         .writedata
		.uav_lock               (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (COMM_Pedreiro_v1_01_6_avalon_slave_windowing_address),                //      avalon_anti_slave_0.address
		.av_write               (COMM_Pedreiro_v1_01_6_avalon_slave_windowing_write),                  //                         .write
		.av_read                (COMM_Pedreiro_v1_01_6_avalon_slave_windowing_read),                   //                         .read
		.av_readdata            (COMM_Pedreiro_v1_01_6_avalon_slave_windowing_readdata),               //                         .readdata
		.av_writedata           (COMM_Pedreiro_v1_01_6_avalon_slave_windowing_writedata),              //                         .writedata
		.av_byteenable          (COMM_Pedreiro_v1_01_6_avalon_slave_windowing_byteenable),             //                         .byteenable
		.av_waitrequest         (COMM_Pedreiro_v1_01_6_avalon_slave_windowing_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr2_address_span_extender_cntl_translator (
		.clk                    (clk_100_clk_clk),                                        //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (ddr2_address_span_extender_cntl_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (ddr2_address_span_extender_cntl_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (ddr2_address_span_extender_cntl_agent_m0_read),          //                         .read
		.uav_write              (ddr2_address_span_extender_cntl_agent_m0_write),         //                         .write
		.uav_waitrequest        (ddr2_address_span_extender_cntl_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (ddr2_address_span_extender_cntl_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (ddr2_address_span_extender_cntl_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (ddr2_address_span_extender_cntl_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (ddr2_address_span_extender_cntl_agent_m0_writedata),     //                         .writedata
		.uav_lock               (ddr2_address_span_extender_cntl_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (ddr2_address_span_extender_cntl_agent_m0_debugaccess),   //                         .debugaccess
		.av_write               (ddr2_address_span_extender_cntl_write),                  //      avalon_anti_slave_0.write
		.av_read                (ddr2_address_span_extender_cntl_read),                   //                         .read
		.av_readdata            (ddr2_address_span_extender_cntl_readdata),               //                         .readdata
		.av_writedata           (ddr2_address_span_extender_cntl_writedata),              //                         .writedata
		.av_byteenable          (ddr2_address_span_extender_cntl_byteenable),             //                         .byteenable
		.av_address             (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_100_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_1_left_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_1_left_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_1_left_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (dma_comm_1_left_csr_agent_m0_read),             //                         .read
		.uav_write              (dma_comm_1_left_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (dma_comm_1_left_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (dma_comm_1_left_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (dma_comm_1_left_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (dma_comm_1_left_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (dma_comm_1_left_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (dma_comm_1_left_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (dma_comm_1_left_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (dma_comm_1_left_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (dma_comm_1_left_csr_write),                     //                         .write
		.av_read                (dma_comm_1_left_csr_read),                      //                         .read
		.av_readdata            (dma_comm_1_left_csr_readdata),                  //                         .readdata
		.av_writedata           (dma_comm_1_left_csr_writedata),                 //                         .writedata
		.av_byteenable          (dma_comm_1_left_csr_byteenable),                //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_1_right_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_1_right_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_1_right_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dma_comm_1_right_csr_agent_m0_read),            //                         .read
		.uav_write              (dma_comm_1_right_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (dma_comm_1_right_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dma_comm_1_right_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dma_comm_1_right_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dma_comm_1_right_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dma_comm_1_right_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dma_comm_1_right_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dma_comm_1_right_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (dma_comm_1_right_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (dma_comm_1_right_csr_write),                    //                         .write
		.av_read                (dma_comm_1_right_csr_read),                     //                         .read
		.av_readdata            (dma_comm_1_right_csr_readdata),                 //                         .readdata
		.av_writedata           (dma_comm_1_right_csr_writedata),                //                         .writedata
		.av_byteenable          (dma_comm_1_right_csr_byteenable),               //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_2_left_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_2_left_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_2_left_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (dma_comm_2_left_csr_agent_m0_read),             //                         .read
		.uav_write              (dma_comm_2_left_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (dma_comm_2_left_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (dma_comm_2_left_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (dma_comm_2_left_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (dma_comm_2_left_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (dma_comm_2_left_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (dma_comm_2_left_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (dma_comm_2_left_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (dma_comm_2_left_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (dma_comm_2_left_csr_write),                     //                         .write
		.av_read                (dma_comm_2_left_csr_read),                      //                         .read
		.av_readdata            (dma_comm_2_left_csr_readdata),                  //                         .readdata
		.av_writedata           (dma_comm_2_left_csr_writedata),                 //                         .writedata
		.av_byteenable          (dma_comm_2_left_csr_byteenable),                //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_2_right_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_2_right_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_2_right_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dma_comm_2_right_csr_agent_m0_read),            //                         .read
		.uav_write              (dma_comm_2_right_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (dma_comm_2_right_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dma_comm_2_right_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dma_comm_2_right_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dma_comm_2_right_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dma_comm_2_right_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dma_comm_2_right_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dma_comm_2_right_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (dma_comm_2_right_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (dma_comm_2_right_csr_write),                    //                         .write
		.av_read                (dma_comm_2_right_csr_read),                     //                         .read
		.av_readdata            (dma_comm_2_right_csr_readdata),                 //                         .readdata
		.av_writedata           (dma_comm_2_right_csr_writedata),                //                         .writedata
		.av_byteenable          (dma_comm_2_right_csr_byteenable),               //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_3_left_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_3_left_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_3_left_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (dma_comm_3_left_csr_agent_m0_read),             //                         .read
		.uav_write              (dma_comm_3_left_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (dma_comm_3_left_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (dma_comm_3_left_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (dma_comm_3_left_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (dma_comm_3_left_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (dma_comm_3_left_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (dma_comm_3_left_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (dma_comm_3_left_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (dma_comm_3_left_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (dma_comm_3_left_csr_write),                     //                         .write
		.av_read                (dma_comm_3_left_csr_read),                      //                         .read
		.av_readdata            (dma_comm_3_left_csr_readdata),                  //                         .readdata
		.av_writedata           (dma_comm_3_left_csr_writedata),                 //                         .writedata
		.av_byteenable          (dma_comm_3_left_csr_byteenable),                //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_3_right_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_3_right_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_3_right_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dma_comm_3_right_csr_agent_m0_read),            //                         .read
		.uav_write              (dma_comm_3_right_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (dma_comm_3_right_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dma_comm_3_right_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dma_comm_3_right_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dma_comm_3_right_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dma_comm_3_right_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dma_comm_3_right_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dma_comm_3_right_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (dma_comm_3_right_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (dma_comm_3_right_csr_write),                    //                         .write
		.av_read                (dma_comm_3_right_csr_read),                     //                         .read
		.av_readdata            (dma_comm_3_right_csr_readdata),                 //                         .readdata
		.av_writedata           (dma_comm_3_right_csr_writedata),                //                         .writedata
		.av_byteenable          (dma_comm_3_right_csr_byteenable),               //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_4_left_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_4_left_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_4_left_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (dma_comm_4_left_csr_agent_m0_read),             //                         .read
		.uav_write              (dma_comm_4_left_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (dma_comm_4_left_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (dma_comm_4_left_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (dma_comm_4_left_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (dma_comm_4_left_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (dma_comm_4_left_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (dma_comm_4_left_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (dma_comm_4_left_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (dma_comm_4_left_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (dma_comm_4_left_csr_write),                     //                         .write
		.av_read                (dma_comm_4_left_csr_read),                      //                         .read
		.av_readdata            (dma_comm_4_left_csr_readdata),                  //                         .readdata
		.av_writedata           (dma_comm_4_left_csr_writedata),                 //                         .writedata
		.av_byteenable          (dma_comm_4_left_csr_byteenable),                //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_4_right_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_4_right_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_4_right_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dma_comm_4_right_csr_agent_m0_read),            //                         .read
		.uav_write              (dma_comm_4_right_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (dma_comm_4_right_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dma_comm_4_right_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dma_comm_4_right_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dma_comm_4_right_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dma_comm_4_right_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dma_comm_4_right_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dma_comm_4_right_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (dma_comm_4_right_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (dma_comm_4_right_csr_write),                    //                         .write
		.av_read                (dma_comm_4_right_csr_read),                     //                         .read
		.av_readdata            (dma_comm_4_right_csr_readdata),                 //                         .readdata
		.av_writedata           (dma_comm_4_right_csr_writedata),                //                         .writedata
		.av_byteenable          (dma_comm_4_right_csr_byteenable),               //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_5_left_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_5_left_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_5_left_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (dma_comm_5_left_csr_agent_m0_read),             //                         .read
		.uav_write              (dma_comm_5_left_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (dma_comm_5_left_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (dma_comm_5_left_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (dma_comm_5_left_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (dma_comm_5_left_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (dma_comm_5_left_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (dma_comm_5_left_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (dma_comm_5_left_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (dma_comm_5_left_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (dma_comm_5_left_csr_write),                     //                         .write
		.av_read                (dma_comm_5_left_csr_read),                      //                         .read
		.av_readdata            (dma_comm_5_left_csr_readdata),                  //                         .readdata
		.av_writedata           (dma_comm_5_left_csr_writedata),                 //                         .writedata
		.av_byteenable          (dma_comm_5_left_csr_byteenable),                //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_5_right_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_5_right_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_5_right_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dma_comm_5_right_csr_agent_m0_read),            //                         .read
		.uav_write              (dma_comm_5_right_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (dma_comm_5_right_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dma_comm_5_right_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dma_comm_5_right_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dma_comm_5_right_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dma_comm_5_right_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dma_comm_5_right_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dma_comm_5_right_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (dma_comm_5_right_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (dma_comm_5_right_csr_write),                    //                         .write
		.av_read                (dma_comm_5_right_csr_read),                     //                         .read
		.av_readdata            (dma_comm_5_right_csr_readdata),                 //                         .readdata
		.av_writedata           (dma_comm_5_right_csr_writedata),                //                         .writedata
		.av_byteenable          (dma_comm_5_right_csr_byteenable),               //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_6_left_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_6_left_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_6_left_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (dma_comm_6_left_csr_agent_m0_read),             //                         .read
		.uav_write              (dma_comm_6_left_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (dma_comm_6_left_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (dma_comm_6_left_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (dma_comm_6_left_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (dma_comm_6_left_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (dma_comm_6_left_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (dma_comm_6_left_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (dma_comm_6_left_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (dma_comm_6_left_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (dma_comm_6_left_csr_write),                     //                         .write
		.av_read                (dma_comm_6_left_csr_read),                      //                         .read
		.av_readdata            (dma_comm_6_left_csr_readdata),                  //                         .readdata
		.av_writedata           (dma_comm_6_left_csr_writedata),                 //                         .writedata
		.av_byteenable          (dma_comm_6_left_csr_byteenable),                //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_6_right_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_comm_6_right_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_6_right_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dma_comm_6_right_csr_agent_m0_read),            //                         .read
		.uav_write              (dma_comm_6_right_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (dma_comm_6_right_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dma_comm_6_right_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dma_comm_6_right_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dma_comm_6_right_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dma_comm_6_right_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dma_comm_6_right_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dma_comm_6_right_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (dma_comm_6_right_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (dma_comm_6_right_csr_write),                    //                         .write
		.av_read                (dma_comm_6_right_csr_read),                     //                         .read
		.av_readdata            (dma_comm_6_right_csr_readdata),                 //                         .readdata
		.av_writedata           (dma_comm_6_right_csr_writedata),                //                         .writedata
		.av_byteenable          (dma_comm_6_right_csr_byteenable),               //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_ftdi_rx_usb3_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_ftdi_rx_usb3_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dma_ftdi_rx_usb3_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dma_ftdi_rx_usb3_csr_agent_m0_read),            //                         .read
		.uav_write              (dma_ftdi_rx_usb3_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (dma_ftdi_rx_usb3_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dma_ftdi_rx_usb3_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dma_ftdi_rx_usb3_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dma_ftdi_rx_usb3_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dma_ftdi_rx_usb3_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dma_ftdi_rx_usb3_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dma_ftdi_rx_usb3_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (dma_ftdi_rx_usb3_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (dma_ftdi_rx_usb3_csr_write),                    //                         .write
		.av_read                (dma_ftdi_rx_usb3_csr_read),                     //                         .read
		.av_readdata            (dma_ftdi_rx_usb3_csr_readdata),                 //                         .readdata
		.av_writedata           (dma_ftdi_rx_usb3_csr_writedata),                //                         .writedata
		.av_byteenable          (dma_ftdi_rx_usb3_csr_byteenable),               //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_ftdi_tx_usb3_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_ftdi_tx_usb3_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dma_ftdi_tx_usb3_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dma_ftdi_tx_usb3_csr_agent_m0_read),            //                         .read
		.uav_write              (dma_ftdi_tx_usb3_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (dma_ftdi_tx_usb3_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dma_ftdi_tx_usb3_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dma_ftdi_tx_usb3_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dma_ftdi_tx_usb3_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dma_ftdi_tx_usb3_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dma_ftdi_tx_usb3_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dma_ftdi_tx_usb3_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (dma_ftdi_tx_usb3_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (dma_ftdi_tx_usb3_csr_write),                    //                         .write
		.av_read                (dma_ftdi_tx_usb3_csr_read),                     //                         .read
		.av_readdata            (dma_ftdi_tx_usb3_csr_readdata),                 //                         .readdata
		.av_writedata           (dma_ftdi_tx_usb3_csr_writedata),                //                         .writedata
		.av_byteenable          (dma_ftdi_tx_usb3_csr_byteenable),               //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (clk_100_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_1_left_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_1_left_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                     // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_1_left_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                  //                         .burstcount
		.uav_read               (dma_comm_1_left_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                        //                         .read
		.uav_write              (dma_comm_1_left_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                       //                         .write
		.uav_waitrequest        (dma_comm_1_left_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                 //                         .waitrequest
		.uav_readdatavalid      (dma_comm_1_left_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                               //                         .readdatavalid
		.uav_byteenable         (dma_comm_1_left_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                  //                         .byteenable
		.uav_readdata           (dma_comm_1_left_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                    //                         .readdata
		.uav_writedata          (dma_comm_1_left_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                   //                         .writedata
		.uav_lock               (dma_comm_1_left_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                        //                         .lock
		.uav_debugaccess        (dma_comm_1_left_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                 //                         .debugaccess
		.av_write               (dma_comm_1_left_descriptor_slave_write),                                                                                                                                                                                                                                //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_1_left_descriptor_slave_writedata),                                                                                                                                                                                                                            //                         .writedata
		.av_byteenable          (dma_comm_1_left_descriptor_slave_byteenable),                                                                                                                                                                                                                           //                         .byteenable
		.av_waitrequest         (dma_comm_1_left_descriptor_slave_waitrequest),                                                                                                                                                                                                                          //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_1_right_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_1_right_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                    // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_1_right_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                 //                         .burstcount
		.uav_read               (dma_comm_1_right_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                       //                         .read
		.uav_write              (dma_comm_1_right_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                      //                         .write
		.uav_waitrequest        (dma_comm_1_right_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                //                         .waitrequest
		.uav_readdatavalid      (dma_comm_1_right_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                              //                         .readdatavalid
		.uav_byteenable         (dma_comm_1_right_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                 //                         .byteenable
		.uav_readdata           (dma_comm_1_right_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                   //                         .readdata
		.uav_writedata          (dma_comm_1_right_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                  //                         .writedata
		.uav_lock               (dma_comm_1_right_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                       //                         .lock
		.uav_debugaccess        (dma_comm_1_right_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                //                         .debugaccess
		.av_write               (dma_comm_1_right_descriptor_slave_write),                                                                                                                                                                                                                               //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_1_right_descriptor_slave_writedata),                                                                                                                                                                                                                           //                         .writedata
		.av_byteenable          (dma_comm_1_right_descriptor_slave_byteenable),                                                                                                                                                                                                                          //                         .byteenable
		.av_waitrequest         (dma_comm_1_right_descriptor_slave_waitrequest),                                                                                                                                                                                                                         //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_2_left_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_2_left_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                     // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_2_left_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                  //                         .burstcount
		.uav_read               (dma_comm_2_left_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                        //                         .read
		.uav_write              (dma_comm_2_left_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                       //                         .write
		.uav_waitrequest        (dma_comm_2_left_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                 //                         .waitrequest
		.uav_readdatavalid      (dma_comm_2_left_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                               //                         .readdatavalid
		.uav_byteenable         (dma_comm_2_left_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                  //                         .byteenable
		.uav_readdata           (dma_comm_2_left_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                    //                         .readdata
		.uav_writedata          (dma_comm_2_left_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                   //                         .writedata
		.uav_lock               (dma_comm_2_left_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                        //                         .lock
		.uav_debugaccess        (dma_comm_2_left_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                 //                         .debugaccess
		.av_write               (dma_comm_2_left_descriptor_slave_write),                                                                                                                                                                                                                                //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_2_left_descriptor_slave_writedata),                                                                                                                                                                                                                            //                         .writedata
		.av_byteenable          (dma_comm_2_left_descriptor_slave_byteenable),                                                                                                                                                                                                                           //                         .byteenable
		.av_waitrequest         (dma_comm_2_left_descriptor_slave_waitrequest),                                                                                                                                                                                                                          //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_2_right_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_2_right_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                    // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_2_right_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                 //                         .burstcount
		.uav_read               (dma_comm_2_right_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                       //                         .read
		.uav_write              (dma_comm_2_right_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                      //                         .write
		.uav_waitrequest        (dma_comm_2_right_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                //                         .waitrequest
		.uav_readdatavalid      (dma_comm_2_right_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                              //                         .readdatavalid
		.uav_byteenable         (dma_comm_2_right_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                 //                         .byteenable
		.uav_readdata           (dma_comm_2_right_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                   //                         .readdata
		.uav_writedata          (dma_comm_2_right_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                  //                         .writedata
		.uav_lock               (dma_comm_2_right_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                       //                         .lock
		.uav_debugaccess        (dma_comm_2_right_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                //                         .debugaccess
		.av_write               (dma_comm_2_right_descriptor_slave_write),                                                                                                                                                                                                                               //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_2_right_descriptor_slave_writedata),                                                                                                                                                                                                                           //                         .writedata
		.av_byteenable          (dma_comm_2_right_descriptor_slave_byteenable),                                                                                                                                                                                                                          //                         .byteenable
		.av_waitrequest         (dma_comm_2_right_descriptor_slave_waitrequest),                                                                                                                                                                                                                         //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_3_left_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_3_left_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                     // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_3_left_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                  //                         .burstcount
		.uav_read               (dma_comm_3_left_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                        //                         .read
		.uav_write              (dma_comm_3_left_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                       //                         .write
		.uav_waitrequest        (dma_comm_3_left_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                 //                         .waitrequest
		.uav_readdatavalid      (dma_comm_3_left_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                               //                         .readdatavalid
		.uav_byteenable         (dma_comm_3_left_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                  //                         .byteenable
		.uav_readdata           (dma_comm_3_left_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                    //                         .readdata
		.uav_writedata          (dma_comm_3_left_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                   //                         .writedata
		.uav_lock               (dma_comm_3_left_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                        //                         .lock
		.uav_debugaccess        (dma_comm_3_left_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                 //                         .debugaccess
		.av_write               (dma_comm_3_left_descriptor_slave_write),                                                                                                                                                                                                                                //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_3_left_descriptor_slave_writedata),                                                                                                                                                                                                                            //                         .writedata
		.av_byteenable          (dma_comm_3_left_descriptor_slave_byteenable),                                                                                                                                                                                                                           //                         .byteenable
		.av_waitrequest         (dma_comm_3_left_descriptor_slave_waitrequest),                                                                                                                                                                                                                          //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_3_right_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_3_right_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                    // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_3_right_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                 //                         .burstcount
		.uav_read               (dma_comm_3_right_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                       //                         .read
		.uav_write              (dma_comm_3_right_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                      //                         .write
		.uav_waitrequest        (dma_comm_3_right_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                //                         .waitrequest
		.uav_readdatavalid      (dma_comm_3_right_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                              //                         .readdatavalid
		.uav_byteenable         (dma_comm_3_right_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                 //                         .byteenable
		.uav_readdata           (dma_comm_3_right_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                   //                         .readdata
		.uav_writedata          (dma_comm_3_right_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                  //                         .writedata
		.uav_lock               (dma_comm_3_right_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                       //                         .lock
		.uav_debugaccess        (dma_comm_3_right_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                //                         .debugaccess
		.av_write               (dma_comm_3_right_descriptor_slave_write),                                                                                                                                                                                                                               //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_3_right_descriptor_slave_writedata),                                                                                                                                                                                                                           //                         .writedata
		.av_byteenable          (dma_comm_3_right_descriptor_slave_byteenable),                                                                                                                                                                                                                          //                         .byteenable
		.av_waitrequest         (dma_comm_3_right_descriptor_slave_waitrequest),                                                                                                                                                                                                                         //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_4_left_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_4_left_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                     // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_4_left_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                  //                         .burstcount
		.uav_read               (dma_comm_4_left_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                        //                         .read
		.uav_write              (dma_comm_4_left_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                       //                         .write
		.uav_waitrequest        (dma_comm_4_left_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                 //                         .waitrequest
		.uav_readdatavalid      (dma_comm_4_left_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                               //                         .readdatavalid
		.uav_byteenable         (dma_comm_4_left_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                  //                         .byteenable
		.uav_readdata           (dma_comm_4_left_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                    //                         .readdata
		.uav_writedata          (dma_comm_4_left_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                   //                         .writedata
		.uav_lock               (dma_comm_4_left_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                        //                         .lock
		.uav_debugaccess        (dma_comm_4_left_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                 //                         .debugaccess
		.av_write               (dma_comm_4_left_descriptor_slave_write),                                                                                                                                                                                                                                //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_4_left_descriptor_slave_writedata),                                                                                                                                                                                                                            //                         .writedata
		.av_byteenable          (dma_comm_4_left_descriptor_slave_byteenable),                                                                                                                                                                                                                           //                         .byteenable
		.av_waitrequest         (dma_comm_4_left_descriptor_slave_waitrequest),                                                                                                                                                                                                                          //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_4_right_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_4_right_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                    // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_4_right_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                 //                         .burstcount
		.uav_read               (dma_comm_4_right_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                       //                         .read
		.uav_write              (dma_comm_4_right_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                      //                         .write
		.uav_waitrequest        (dma_comm_4_right_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                //                         .waitrequest
		.uav_readdatavalid      (dma_comm_4_right_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                              //                         .readdatavalid
		.uav_byteenable         (dma_comm_4_right_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                 //                         .byteenable
		.uav_readdata           (dma_comm_4_right_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                   //                         .readdata
		.uav_writedata          (dma_comm_4_right_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                  //                         .writedata
		.uav_lock               (dma_comm_4_right_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                       //                         .lock
		.uav_debugaccess        (dma_comm_4_right_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                //                         .debugaccess
		.av_write               (dma_comm_4_right_descriptor_slave_write),                                                                                                                                                                                                                               //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_4_right_descriptor_slave_writedata),                                                                                                                                                                                                                           //                         .writedata
		.av_byteenable          (dma_comm_4_right_descriptor_slave_byteenable),                                                                                                                                                                                                                          //                         .byteenable
		.av_waitrequest         (dma_comm_4_right_descriptor_slave_waitrequest),                                                                                                                                                                                                                         //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_5_left_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_5_left_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                     // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_5_left_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                  //                         .burstcount
		.uav_read               (dma_comm_5_left_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                        //                         .read
		.uav_write              (dma_comm_5_left_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                       //                         .write
		.uav_waitrequest        (dma_comm_5_left_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                 //                         .waitrequest
		.uav_readdatavalid      (dma_comm_5_left_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                               //                         .readdatavalid
		.uav_byteenable         (dma_comm_5_left_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                  //                         .byteenable
		.uav_readdata           (dma_comm_5_left_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                    //                         .readdata
		.uav_writedata          (dma_comm_5_left_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                   //                         .writedata
		.uav_lock               (dma_comm_5_left_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                        //                         .lock
		.uav_debugaccess        (dma_comm_5_left_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                 //                         .debugaccess
		.av_write               (dma_comm_5_left_descriptor_slave_write),                                                                                                                                                                                                                                //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_5_left_descriptor_slave_writedata),                                                                                                                                                                                                                            //                         .writedata
		.av_byteenable          (dma_comm_5_left_descriptor_slave_byteenable),                                                                                                                                                                                                                           //                         .byteenable
		.av_waitrequest         (dma_comm_5_left_descriptor_slave_waitrequest),                                                                                                                                                                                                                          //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_5_right_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_5_right_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                    // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_5_right_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                 //                         .burstcount
		.uav_read               (dma_comm_5_right_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                       //                         .read
		.uav_write              (dma_comm_5_right_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                      //                         .write
		.uav_waitrequest        (dma_comm_5_right_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                //                         .waitrequest
		.uav_readdatavalid      (dma_comm_5_right_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                              //                         .readdatavalid
		.uav_byteenable         (dma_comm_5_right_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                 //                         .byteenable
		.uav_readdata           (dma_comm_5_right_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                   //                         .readdata
		.uav_writedata          (dma_comm_5_right_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                  //                         .writedata
		.uav_lock               (dma_comm_5_right_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                       //                         .lock
		.uav_debugaccess        (dma_comm_5_right_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                //                         .debugaccess
		.av_write               (dma_comm_5_right_descriptor_slave_write),                                                                                                                                                                                                                               //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_5_right_descriptor_slave_writedata),                                                                                                                                                                                                                           //                         .writedata
		.av_byteenable          (dma_comm_5_right_descriptor_slave_byteenable),                                                                                                                                                                                                                          //                         .byteenable
		.av_waitrequest         (dma_comm_5_right_descriptor_slave_waitrequest),                                                                                                                                                                                                                         //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_6_left_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_6_left_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                     // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_6_left_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                  //                         .burstcount
		.uav_read               (dma_comm_6_left_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                        //                         .read
		.uav_write              (dma_comm_6_left_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                       //                         .write
		.uav_waitrequest        (dma_comm_6_left_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                 //                         .waitrequest
		.uav_readdatavalid      (dma_comm_6_left_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                               //                         .readdatavalid
		.uav_byteenable         (dma_comm_6_left_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                  //                         .byteenable
		.uav_readdata           (dma_comm_6_left_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                    //                         .readdata
		.uav_writedata          (dma_comm_6_left_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                   //                         .writedata
		.uav_lock               (dma_comm_6_left_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                        //                         .lock
		.uav_debugaccess        (dma_comm_6_left_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                 //                         .debugaccess
		.av_write               (dma_comm_6_left_descriptor_slave_write),                                                                                                                                                                                                                                //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_6_left_descriptor_slave_writedata),                                                                                                                                                                                                                            //                         .writedata
		.av_byteenable          (dma_comm_6_left_descriptor_slave_byteenable),                                                                                                                                                                                                                           //                         .byteenable
		.av_waitrequest         (dma_comm_6_left_descriptor_slave_waitrequest),                                                                                                                                                                                                                          //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_comm_6_right_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_comm_6_right_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                    // avalon_universal_slave_0.address
		.uav_burstcount         (dma_comm_6_right_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                 //                         .burstcount
		.uav_read               (dma_comm_6_right_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                       //                         .read
		.uav_write              (dma_comm_6_right_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                      //                         .write
		.uav_waitrequest        (dma_comm_6_right_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                //                         .waitrequest
		.uav_readdatavalid      (dma_comm_6_right_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                              //                         .readdatavalid
		.uav_byteenable         (dma_comm_6_right_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                 //                         .byteenable
		.uav_readdata           (dma_comm_6_right_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                   //                         .readdata
		.uav_writedata          (dma_comm_6_right_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                  //                         .writedata
		.uav_lock               (dma_comm_6_right_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                       //                         .lock
		.uav_debugaccess        (dma_comm_6_right_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                //                         .debugaccess
		.av_write               (dma_comm_6_right_descriptor_slave_write),                                                                                                                                                                                                                               //      avalon_anti_slave_0.write
		.av_writedata           (dma_comm_6_right_descriptor_slave_writedata),                                                                                                                                                                                                                           //                         .writedata
		.av_byteenable          (dma_comm_6_right_descriptor_slave_byteenable),                                                                                                                                                                                                                          //                         .byteenable
		.av_waitrequest         (dma_comm_6_right_descriptor_slave_waitrequest),                                                                                                                                                                                                                         //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_ftdi_rx_usb3_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                    // avalon_universal_slave_0.address
		.uav_burstcount         (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                 //                         .burstcount
		.uav_read               (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                       //                         .read
		.uav_write              (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                      //                         .write
		.uav_waitrequest        (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                //                         .waitrequest
		.uav_readdatavalid      (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                              //                         .readdatavalid
		.uav_byteenable         (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                 //                         .byteenable
		.uav_readdata           (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                   //                         .readdata
		.uav_writedata          (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                  //                         .writedata
		.uav_lock               (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                       //                         .lock
		.uav_debugaccess        (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                //                         .debugaccess
		.av_write               (dma_ftdi_rx_usb3_descriptor_slave_write),                                                                                                                                                                                                                               //      avalon_anti_slave_0.write
		.av_writedata           (dma_ftdi_rx_usb3_descriptor_slave_writedata),                                                                                                                                                                                                                           //                         .writedata
		.av_byteenable          (dma_ftdi_rx_usb3_descriptor_slave_byteenable),                                                                                                                                                                                                                          //                         .byteenable
		.av_waitrequest         (dma_ftdi_rx_usb3_descriptor_slave_waitrequest),                                                                                                                                                                                                                         //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_ftdi_tx_usb3_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                                                                                                                                                       //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                         //                    reset.reset
		.uav_address            (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                    // avalon_universal_slave_0.address
		.uav_burstcount         (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                 //                         .burstcount
		.uav_read               (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                       //                         .read
		.uav_write              (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                      //                         .write
		.uav_waitrequest        (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                //                         .waitrequest
		.uav_readdatavalid      (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                              //                         .readdatavalid
		.uav_byteenable         (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                 //                         .byteenable
		.uav_readdata           (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                   //                         .readdata
		.uav_writedata          (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                  //                         .writedata
		.uav_lock               (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                       //                         .lock
		.uav_debugaccess        (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                //                         .debugaccess
		.av_write               (dma_ftdi_tx_usb3_descriptor_slave_write),                                                                                                                                                                                                                               //      avalon_anti_slave_0.write
		.av_writedata           (dma_ftdi_tx_usb3_descriptor_slave_writedata),                                                                                                                                                                                                                           //                         .writedata
		.av_byteenable          (dma_ftdi_tx_usb3_descriptor_slave_byteenable),                                                                                                                                                                                                                          //                         .byteenable
		.av_waitrequest         (dma_ftdi_tx_usb3_descriptor_slave_waitrequest),                                                                                                                                                                                                                         //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) clock_bridge_afi_50_s0_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (clock_bridge_afi_50_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (clock_bridge_afi_50_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (clock_bridge_afi_50_s0_agent_m0_read),          //                         .read
		.uav_write              (clock_bridge_afi_50_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (clock_bridge_afi_50_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (clock_bridge_afi_50_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (clock_bridge_afi_50_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (clock_bridge_afi_50_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (clock_bridge_afi_50_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (clock_bridge_afi_50_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (clock_bridge_afi_50_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (clock_bridge_afi_50_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (clock_bridge_afi_50_s0_write),                  //                         .write
		.av_read                (clock_bridge_afi_50_s0_read),                   //                         .read
		.av_readdata            (clock_bridge_afi_50_s0_readdata),               //                         .readdata
		.av_writedata           (clock_bridge_afi_50_s0_writedata),              //                         .writedata
		.av_burstcount          (clock_bridge_afi_50_s0_burstcount),             //                         .burstcount
		.av_byteenable          (clock_bridge_afi_50_s0_byteenable),             //                         .byteenable
		.av_readdatavalid       (clock_bridge_afi_50_s0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (clock_bridge_afi_50_s0_waitrequest),            //                         .waitrequest
		.av_debugaccess         (clock_bridge_afi_50_s0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),                //                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (onchip_memory_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (onchip_memory_s1_write),                        //                         .write
		.av_readdata            (onchip_memory_s1_readdata),                     //                         .readdata
		.av_writedata           (onchip_memory_s1_writedata),                    //                         .writedata
		.av_byteenable          (onchip_memory_s1_byteenable),                   //                         .byteenable
		.av_chipselect          (onchip_memory_s1_chipselect),                   //                         .chipselect
		.av_clken               (onchip_memory_s1_clken),                        //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (2),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ext_flash_uas_translator (
		.clk                    (clk_100_clk_clk),                             //                      clk.clk
		.reset                  (ext_flash_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ext_flash_uas_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (ext_flash_uas_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (ext_flash_uas_agent_m0_read),                 //                         .read
		.uav_write              (ext_flash_uas_agent_m0_write),                //                         .write
		.uav_waitrequest        (ext_flash_uas_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (ext_flash_uas_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (ext_flash_uas_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (ext_flash_uas_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (ext_flash_uas_agent_m0_writedata),            //                         .writedata
		.uav_lock               (ext_flash_uas_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (ext_flash_uas_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (ext_flash_uas_address),                       //      avalon_anti_slave_0.address
		.av_write               (ext_flash_uas_write),                         //                         .write
		.av_read                (ext_flash_uas_read),                          //                         .read
		.av_readdata            (ext_flash_uas_readdata),                      //                         .readdata
		.av_writedata           (ext_flash_uas_writedata),                     //                         .writedata
		.av_burstcount          (ext_flash_uas_burstcount),                    //                         .burstcount
		.av_byteenable          (ext_flash_uas_byteenable),                    //                         .byteenable
		.av_readdatavalid       (ext_flash_uas_readdatavalid),                 //                         .readdatavalid
		.av_waitrequest         (ext_flash_uas_waitrequest),                   //                         .waitrequest
		.av_lock                (ext_flash_uas_lock),                          //                         .lock
		.av_debugaccess         (ext_flash_uas_debugaccess),                   //                         .debugaccess
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (29),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr2_address_span_extender_windowed_slave_translator (
		.clk                    (clk_100_clk_clk),                                                  //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                    //                    reset.reset
		.uav_address            (ddr2_address_span_extender_windowed_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (ddr2_address_span_extender_windowed_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (ddr2_address_span_extender_windowed_slave_agent_m0_read),          //                         .read
		.uav_write              (ddr2_address_span_extender_windowed_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (ddr2_address_span_extender_windowed_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (ddr2_address_span_extender_windowed_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (ddr2_address_span_extender_windowed_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (ddr2_address_span_extender_windowed_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (ddr2_address_span_extender_windowed_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (ddr2_address_span_extender_windowed_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (ddr2_address_span_extender_windowed_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (ddr2_address_span_extender_windowed_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (ddr2_address_span_extender_windowed_slave_write),                  //                         .write
		.av_read                (ddr2_address_span_extender_windowed_slave_read),                   //                         .read
		.av_readdata            (ddr2_address_span_extender_windowed_slave_readdata),               //                         .readdata
		.av_writedata           (ddr2_address_span_extender_windowed_slave_writedata),              //                         .writedata
		.av_burstcount          (ddr2_address_span_extender_windowed_slave_burstcount),             //                         .burstcount
		.av_byteenable          (ddr2_address_span_extender_windowed_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (ddr2_address_span_extender_windowed_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (ddr2_address_span_extender_windowed_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (111),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (49),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (clk_100_clk_clk),                                                             //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (111),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (49),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (clk_100_clk_clk),                                                                    //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_0_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_100_clk_clk),                                                //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent (
		.clk                     (clk_100_clk_clk),                                                           //             clk.clk
		.reset                   (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                   //                .channel
		.rf_sink_ready           (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                           //       clk.clk
		.reset             (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent (
		.clk                     (clk_100_clk_clk),                                                           //             clk.clk
		.reset                   (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                   //                .channel
		.rf_sink_ready           (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                           //       clk.clk
		.reset             (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent (
		.clk                     (clk_100_clk_clk),                                                           //             clk.clk
		.reset                   (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                                   //                .channel
		.rf_sink_ready           (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                           //       clk.clk
		.reset             (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent (
		.clk                     (clk_100_clk_clk),                                                           //             clk.clk
		.reset                   (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                                   //                .channel
		.rf_sink_ready           (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                           //       clk.clk
		.reset             (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent (
		.clk                     (clk_100_clk_clk),                                                           //             clk.clk
		.reset                   (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                                   //                .channel
		.rf_sink_ready           (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                           //       clk.clk
		.reset             (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent (
		.clk                     (clk_100_clk_clk),                                                           //             clk.clk
		.reset                   (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                                   //                .channel
		.rf_sink_ready           (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                           //       clk.clk
		.reset             (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ftdi_usb3_0_avalon_slave_config_agent (
		.clk                     (clk_100_clk_clk),                                                  //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (ftdi_usb3_0_avalon_slave_config_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ftdi_usb3_0_avalon_slave_config_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ftdi_usb3_0_avalon_slave_config_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ftdi_usb3_0_avalon_slave_config_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ftdi_usb3_0_avalon_slave_config_agent_m0_lock),                    //                .lock
		.m0_readdata             (ftdi_usb3_0_avalon_slave_config_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ftdi_usb3_0_avalon_slave_config_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ftdi_usb3_0_avalon_slave_config_agent_m0_read),                    //                .read
		.m0_waitrequest          (ftdi_usb3_0_avalon_slave_config_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ftdi_usb3_0_avalon_slave_config_agent_m0_writedata),               //                .writedata
		.m0_write                (ftdi_usb3_0_avalon_slave_config_agent_m0_write),                   //                .write
		.rp_endofpacket          (ftdi_usb3_0_avalon_slave_config_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ftdi_usb3_0_avalon_slave_config_agent_rp_ready),                   //                .ready
		.rp_valid                (ftdi_usb3_0_avalon_slave_config_agent_rp_valid),                   //                .valid
		.rp_data                 (ftdi_usb3_0_avalon_slave_config_agent_rp_data),                    //                .data
		.rp_startofpacket        (ftdi_usb3_0_avalon_slave_config_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                          //                .channel
		.rf_sink_ready           (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ftdi_usb3_0_avalon_slave_config_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ftdi_usb3_0_avalon_slave_config_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ftdi_usb3_0_avalon_slave_config_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ftdi_usb3_0_avalon_slave_config_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ftdi_usb3_0_avalon_slave_config_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (ftdi_usb3_0_avalon_slave_config_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ftdi_usb3_0_avalon_slave_config_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ftdi_usb3_0_avalon_slave_config_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                  //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (ftdi_usb3_0_avalon_slave_config_agent_rf_source_data),             //        in.data
		.in_valid          (ftdi_usb3_0_avalon_slave_config_agent_rf_source_valid),            //          .valid
		.in_ready          (ftdi_usb3_0_avalon_slave_config_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ftdi_usb3_0_avalon_slave_config_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ftdi_usb3_0_avalon_slave_config_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ftdi_usb3_0_avalon_slave_config_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) comm_pedreiro_v1_01_1_avalon_slave_windowing_agent (
		.clk                     (clk_100_clk_clk),                                                               //             clk.clk
		.reset                   (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_address),                 //              m0.address
		.m0_burstcount           (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_lock),                    //                .lock
		.m0_readdata             (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_read),                    //                .read
		.m0_waitrequest          (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_writedata),               //                .writedata
		.m0_write                (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_m0_write),                   //                .write
		.rp_endofpacket          (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_ready),                   //                .ready
		.rp_valid                (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_valid),                   //                .valid
		.rp_data                 (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_data),                    //                .data
		.rp_startofpacket        (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                                         //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                                         //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                                          //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                                   //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                                       //                .channel
		.rf_sink_ready           (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                             //                .error
		.rdata_fifo_src_ready    (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                               //       clk.clk
		.reset             (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_data),             //        in.data
		.in_valid          (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_valid),            //          .valid
		.in_ready          (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) comm_pedreiro_v1_01_2_avalon_slave_windowing_agent (
		.clk                     (clk_100_clk_clk),                                                               //             clk.clk
		.reset                   (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_address),                 //              m0.address
		.m0_burstcount           (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_lock),                    //                .lock
		.m0_readdata             (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_read),                    //                .read
		.m0_waitrequest          (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_writedata),               //                .writedata
		.m0_write                (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_m0_write),                   //                .write
		.rp_endofpacket          (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_ready),                   //                .ready
		.rp_valid                (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_valid),                   //                .valid
		.rp_data                 (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_data),                    //                .data
		.rp_startofpacket        (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                                         //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                                         //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                                          //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                                   //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                                       //                .channel
		.rf_sink_ready           (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                             //                .error
		.rdata_fifo_src_ready    (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                               //       clk.clk
		.reset             (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_data),             //        in.data
		.in_valid          (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_valid),            //          .valid
		.in_ready          (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) comm_pedreiro_v1_01_3_avalon_slave_windowing_agent (
		.clk                     (clk_100_clk_clk),                                                               //             clk.clk
		.reset                   (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_address),                 //              m0.address
		.m0_burstcount           (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_lock),                    //                .lock
		.m0_readdata             (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_read),                    //                .read
		.m0_waitrequest          (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_writedata),               //                .writedata
		.m0_write                (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_m0_write),                   //                .write
		.rp_endofpacket          (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_ready),                   //                .ready
		.rp_valid                (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_valid),                   //                .valid
		.rp_data                 (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_data),                    //                .data
		.rp_startofpacket        (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                                         //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                                         //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                                          //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                                   //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                                       //                .channel
		.rf_sink_ready           (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                                             //                .error
		.rdata_fifo_src_ready    (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                               //       clk.clk
		.reset             (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_data),             //        in.data
		.in_valid          (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_valid),            //          .valid
		.in_ready          (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) comm_pedreiro_v1_01_4_avalon_slave_windowing_agent (
		.clk                     (clk_100_clk_clk),                                                               //             clk.clk
		.reset                   (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_address),                 //              m0.address
		.m0_burstcount           (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_lock),                    //                .lock
		.m0_readdata             (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_read),                    //                .read
		.m0_waitrequest          (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_writedata),               //                .writedata
		.m0_write                (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_m0_write),                   //                .write
		.rp_endofpacket          (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_ready),                   //                .ready
		.rp_valid                (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_valid),                   //                .valid
		.rp_data                 (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_data),                    //                .data
		.rp_startofpacket        (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                                         //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                                         //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                                          //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                                   //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                                       //                .channel
		.rf_sink_ready           (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                             //                .error
		.rdata_fifo_src_ready    (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                               //       clk.clk
		.reset             (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_data),             //        in.data
		.in_valid          (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_valid),            //          .valid
		.in_ready          (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) comm_pedreiro_v1_01_5_avalon_slave_windowing_agent (
		.clk                     (clk_100_clk_clk),                                                               //             clk.clk
		.reset                   (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_address),                 //              m0.address
		.m0_burstcount           (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_lock),                    //                .lock
		.m0_readdata             (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_read),                    //                .read
		.m0_waitrequest          (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_writedata),               //                .writedata
		.m0_write                (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_m0_write),                   //                .write
		.rp_endofpacket          (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_ready),                   //                .ready
		.rp_valid                (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_valid),                   //                .valid
		.rp_data                 (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_data),                    //                .data
		.rp_startofpacket        (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                                         //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                                         //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                                          //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                                                   //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                                       //                .channel
		.rf_sink_ready           (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                                             //                .error
		.rdata_fifo_src_ready    (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                               //       clk.clk
		.reset             (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_data),             //        in.data
		.in_valid          (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_valid),            //          .valid
		.in_ready          (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) comm_pedreiro_v1_01_6_avalon_slave_windowing_agent (
		.clk                     (clk_100_clk_clk),                                                               //             clk.clk
		.reset                   (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_address),                 //              m0.address
		.m0_burstcount           (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_lock),                    //                .lock
		.m0_readdata             (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_read),                    //                .read
		.m0_waitrequest          (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_writedata),               //                .writedata
		.m0_write                (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_m0_write),                   //                .write
		.rp_endofpacket          (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_ready),                   //                .ready
		.rp_valid                (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_valid),                   //                .valid
		.rp_data                 (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_data),                    //                .data
		.rp_startofpacket        (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                                         //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                                         //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                                          //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                                                   //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                                       //                .channel
		.rf_sink_ready           (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                                             //                .error
		.rdata_fifo_src_ready    (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                               //       clk.clk
		.reset             (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_data),             //        in.data
		.in_valid          (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_valid),            //          .valid
		.in_ready          (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (159),
		.PKT_ORI_BURST_SIZE_L      (157),
		.PKT_RESPONSE_STATUS_H     (156),
		.PKT_RESPONSE_STATUS_L     (155),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (133),
		.PKT_PROTECTION_H          (150),
		.PKT_PROTECTION_L          (148),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (140),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (146),
		.PKT_DEST_ID_L             (141),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (160),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr2_address_span_extender_cntl_agent (
		.clk                     (clk_100_clk_clk),                                                     //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (ddr2_address_span_extender_cntl_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ddr2_address_span_extender_cntl_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ddr2_address_span_extender_cntl_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ddr2_address_span_extender_cntl_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ddr2_address_span_extender_cntl_agent_m0_lock),                       //                .lock
		.m0_readdata             (ddr2_address_span_extender_cntl_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ddr2_address_span_extender_cntl_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ddr2_address_span_extender_cntl_agent_m0_read),                       //                .read
		.m0_waitrequest          (ddr2_address_span_extender_cntl_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ddr2_address_span_extender_cntl_agent_m0_writedata),                  //                .writedata
		.m0_write                (ddr2_address_span_extender_cntl_agent_m0_write),                      //                .write
		.rp_endofpacket          (ddr2_address_span_extender_cntl_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ddr2_address_span_extender_cntl_agent_rp_ready),                      //                .ready
		.rp_valid                (ddr2_address_span_extender_cntl_agent_rp_valid),                      //                .valid
		.rp_data                 (ddr2_address_span_extender_cntl_agent_rp_data),                       //                .data
		.rp_startofpacket        (ddr2_address_span_extender_cntl_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ddr2_address_span_extender_cntl_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (ddr2_address_span_extender_cntl_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (ddr2_address_span_extender_cntl_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (ddr2_address_span_extender_cntl_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (ddr2_address_span_extender_cntl_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (ddr2_address_span_extender_cntl_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ddr2_address_span_extender_cntl_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ddr2_address_span_extender_cntl_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ddr2_address_span_extender_cntl_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ddr2_address_span_extender_cntl_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ddr2_address_span_extender_cntl_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (ddr2_address_span_extender_cntl_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr2_address_span_extender_cntl_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ddr2_address_span_extender_cntl_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (161),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr2_address_span_extender_cntl_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                  //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (ddr2_address_span_extender_cntl_agent_rf_source_data),             //        in.data
		.in_valid          (ddr2_address_span_extender_cntl_agent_rf_source_valid),            //          .valid
		.in_ready          (ddr2_address_span_extender_cntl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ddr2_address_span_extender_cntl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ddr2_address_span_extender_cntl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ddr2_address_span_extender_cntl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr2_address_span_extender_cntl_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                            //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (ddr2_address_span_extender_cntl_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (ddr2_address_span_extender_cntl_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (ddr2_address_span_extender_cntl_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (ddr2_address_span_extender_cntl_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (ddr2_address_span_extender_cntl_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (ddr2_address_span_extender_cntl_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_100_clk_clk),                                           //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                                   //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                           //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_1_left_csr_agent (
		.clk                     (clk_100_clk_clk),                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (dma_comm_1_left_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_1_left_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_1_left_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_1_left_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_1_left_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_1_left_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_1_left_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_1_left_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_1_left_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_1_left_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_1_left_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_1_left_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_1_left_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_1_left_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_1_left_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_1_left_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                              //                .channel
		.rf_sink_ready           (dma_comm_1_left_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_1_left_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_1_left_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_1_left_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_1_left_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_1_left_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_1_left_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_1_left_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_1_left_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_1_left_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dma_comm_1_left_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_1_left_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_1_left_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_1_left_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (dma_comm_1_left_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_1_left_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_1_left_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_1_left_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_1_left_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_1_left_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_1_left_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_1_left_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_1_left_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_1_left_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_1_right_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dma_comm_1_right_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_1_right_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_1_right_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_1_right_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_1_right_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_1_right_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_1_right_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_1_right_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_1_right_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_1_right_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_1_right_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_1_right_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_1_right_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_1_right_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_1_right_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_1_right_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                               //                .channel
		.rf_sink_ready           (dma_comm_1_right_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_1_right_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_1_right_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_1_right_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_1_right_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_1_right_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_1_right_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_1_right_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_1_right_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_1_right_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (dma_comm_1_right_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_1_right_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_1_right_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_1_right_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_comm_1_right_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_1_right_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_1_right_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_1_right_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_1_right_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_1_right_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_1_right_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_1_right_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_1_right_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_1_right_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_2_left_csr_agent (
		.clk                     (clk_100_clk_clk),                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (dma_comm_2_left_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_2_left_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_2_left_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_2_left_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_2_left_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_2_left_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_2_left_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_2_left_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_2_left_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_2_left_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_2_left_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_2_left_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_2_left_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_2_left_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_2_left_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_2_left_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                              //                .channel
		.rf_sink_ready           (dma_comm_2_left_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_2_left_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_2_left_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_2_left_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_2_left_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_2_left_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_2_left_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_2_left_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_2_left_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_2_left_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dma_comm_2_left_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_2_left_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_2_left_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_2_left_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (dma_comm_2_left_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_2_left_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_2_left_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_2_left_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_2_left_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_2_left_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_2_left_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_2_left_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_2_left_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_2_left_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_2_right_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dma_comm_2_right_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_2_right_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_2_right_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_2_right_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_2_right_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_2_right_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_2_right_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_2_right_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_2_right_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_2_right_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_2_right_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_2_right_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_2_right_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_2_right_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_2_right_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_2_right_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                               //                .channel
		.rf_sink_ready           (dma_comm_2_right_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_2_right_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_2_right_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_2_right_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_2_right_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_2_right_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_2_right_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_2_right_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_2_right_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_2_right_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (dma_comm_2_right_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_2_right_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_2_right_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_2_right_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_comm_2_right_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_2_right_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_2_right_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_2_right_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_2_right_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_2_right_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_2_right_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_2_right_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_2_right_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_2_right_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_3_left_csr_agent (
		.clk                     (clk_100_clk_clk),                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (dma_comm_3_left_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_3_left_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_3_left_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_3_left_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_3_left_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_3_left_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_3_left_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_3_left_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_3_left_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_3_left_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_3_left_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_3_left_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_3_left_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_3_left_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_3_left_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_3_left_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_020_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                              //                .channel
		.rf_sink_ready           (dma_comm_3_left_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_3_left_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_3_left_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_3_left_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_3_left_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_3_left_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_3_left_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_3_left_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_3_left_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_3_left_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dma_comm_3_left_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_3_left_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_3_left_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_3_left_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (dma_comm_3_left_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_3_left_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_3_left_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_3_left_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_3_left_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_3_left_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_3_left_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_3_left_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_3_left_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_3_left_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_3_right_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dma_comm_3_right_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_3_right_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_3_right_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_3_right_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_3_right_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_3_right_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_3_right_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_3_right_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_3_right_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_3_right_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_3_right_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_3_right_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_3_right_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_3_right_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_3_right_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_3_right_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_021_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                               //                .channel
		.rf_sink_ready           (dma_comm_3_right_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_3_right_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_3_right_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_3_right_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_3_right_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_3_right_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_3_right_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_3_right_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_3_right_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_3_right_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (dma_comm_3_right_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_3_right_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_3_right_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_3_right_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_comm_3_right_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_3_right_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_3_right_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_3_right_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_3_right_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_3_right_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_3_right_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_3_right_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_3_right_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_3_right_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_4_left_csr_agent (
		.clk                     (clk_100_clk_clk),                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (dma_comm_4_left_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_4_left_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_4_left_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_4_left_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_4_left_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_4_left_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_4_left_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_4_left_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_4_left_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_4_left_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_4_left_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_4_left_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_4_left_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_4_left_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_4_left_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_4_left_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_022_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                              //                .channel
		.rf_sink_ready           (dma_comm_4_left_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_4_left_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_4_left_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_4_left_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_4_left_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_4_left_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_4_left_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_4_left_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_4_left_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_4_left_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dma_comm_4_left_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_4_left_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_4_left_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_4_left_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (dma_comm_4_left_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_4_left_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_4_left_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_4_left_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_4_left_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_4_left_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_4_left_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_4_left_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_4_left_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_4_left_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_4_right_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dma_comm_4_right_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_4_right_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_4_right_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_4_right_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_4_right_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_4_right_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_4_right_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_4_right_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_4_right_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_4_right_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_4_right_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_4_right_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_4_right_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_4_right_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_4_right_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_4_right_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_023_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                               //                .channel
		.rf_sink_ready           (dma_comm_4_right_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_4_right_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_4_right_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_4_right_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_4_right_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_4_right_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_4_right_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_4_right_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_4_right_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_4_right_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (dma_comm_4_right_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_4_right_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_4_right_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_4_right_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_comm_4_right_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_4_right_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_4_right_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_4_right_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_4_right_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_4_right_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_4_right_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_4_right_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_4_right_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_4_right_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_5_left_csr_agent (
		.clk                     (clk_100_clk_clk),                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (dma_comm_5_left_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_5_left_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_5_left_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_5_left_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_5_left_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_5_left_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_5_left_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_5_left_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_5_left_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_5_left_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_5_left_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_5_left_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_5_left_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_5_left_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_5_left_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_5_left_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_024_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                              //                .channel
		.rf_sink_ready           (dma_comm_5_left_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_5_left_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_5_left_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_5_left_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_5_left_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_5_left_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_5_left_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_5_left_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_5_left_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_5_left_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dma_comm_5_left_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_5_left_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_5_left_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_5_left_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (dma_comm_5_left_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_5_left_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_5_left_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_5_left_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_5_left_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_5_left_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_5_left_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_5_left_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_5_left_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_5_left_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_5_right_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dma_comm_5_right_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_5_right_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_5_right_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_5_right_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_5_right_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_5_right_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_5_right_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_5_right_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_5_right_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_5_right_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_5_right_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_5_right_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_5_right_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_5_right_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_5_right_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_5_right_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_025_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                               //                .channel
		.rf_sink_ready           (dma_comm_5_right_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_5_right_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_5_right_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_5_right_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_5_right_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_5_right_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_5_right_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_5_right_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_5_right_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_5_right_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (dma_comm_5_right_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_5_right_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_5_right_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_5_right_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_comm_5_right_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_5_right_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_5_right_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_5_right_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_5_right_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_5_right_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_5_right_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_5_right_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_5_right_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_5_right_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_6_left_csr_agent (
		.clk                     (clk_100_clk_clk),                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (dma_comm_6_left_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_6_left_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_6_left_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_6_left_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_6_left_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_6_left_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_6_left_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_6_left_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_6_left_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_6_left_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_6_left_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_6_left_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_6_left_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_6_left_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_6_left_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_6_left_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_026_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                              //                .channel
		.rf_sink_ready           (dma_comm_6_left_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_6_left_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_6_left_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_6_left_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_6_left_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_6_left_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_6_left_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_6_left_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_6_left_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_6_left_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dma_comm_6_left_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_6_left_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_6_left_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_6_left_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (dma_comm_6_left_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_6_left_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_6_left_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_6_left_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_6_left_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_6_left_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_6_left_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_6_left_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_6_left_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_6_left_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_6_right_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dma_comm_6_right_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_comm_6_right_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_comm_6_right_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_comm_6_right_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_comm_6_right_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_comm_6_right_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_comm_6_right_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_comm_6_right_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_comm_6_right_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_comm_6_right_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_comm_6_right_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_comm_6_right_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_comm_6_right_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_comm_6_right_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_comm_6_right_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_comm_6_right_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_027_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                               //                .channel
		.rf_sink_ready           (dma_comm_6_right_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_comm_6_right_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_comm_6_right_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_6_right_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_comm_6_right_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_comm_6_right_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_comm_6_right_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_comm_6_right_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_comm_6_right_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_comm_6_right_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (dma_comm_6_right_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_6_right_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_comm_6_right_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_6_right_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_comm_6_right_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_6_right_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_6_right_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_6_right_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_6_right_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_6_right_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_6_right_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_6_right_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_6_right_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_6_right_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_ftdi_rx_usb3_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dma_ftdi_rx_usb3_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_ftdi_rx_usb3_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_ftdi_rx_usb3_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_ftdi_rx_usb3_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_ftdi_rx_usb3_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_ftdi_rx_usb3_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_ftdi_rx_usb3_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_ftdi_rx_usb3_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_ftdi_rx_usb3_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_ftdi_rx_usb3_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_ftdi_rx_usb3_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_ftdi_rx_usb3_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_ftdi_rx_usb3_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_ftdi_rx_usb3_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_ftdi_rx_usb3_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_ftdi_rx_usb3_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_028_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_028_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_028_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_028_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_028_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_028_src_channel),                               //                .channel
		.rf_sink_ready           (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_ftdi_rx_usb3_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_ftdi_rx_usb3_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_ftdi_rx_usb3_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_ftdi_rx_usb3_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_ftdi_rx_usb3_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_028_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_028_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_028_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_028_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (dma_ftdi_rx_usb3_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_ftdi_rx_usb3_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_ftdi_rx_usb3_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_ftdi_rx_usb3_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_ftdi_rx_usb3_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_ftdi_rx_usb3_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_ftdi_rx_usb3_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_ftdi_rx_usb3_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_ftdi_rx_usb3_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_ftdi_rx_usb3_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_ftdi_tx_usb3_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dma_ftdi_tx_usb3_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_ftdi_tx_usb3_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_ftdi_tx_usb3_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_ftdi_tx_usb3_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_ftdi_tx_usb3_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_ftdi_tx_usb3_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_ftdi_tx_usb3_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_ftdi_tx_usb3_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_ftdi_tx_usb3_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_ftdi_tx_usb3_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_ftdi_tx_usb3_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_ftdi_tx_usb3_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_ftdi_tx_usb3_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_ftdi_tx_usb3_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_ftdi_tx_usb3_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_ftdi_tx_usb3_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_029_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_029_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_029_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_029_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_029_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_029_src_channel),                               //                .channel
		.rf_sink_ready           (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_ftdi_tx_usb3_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_ftdi_tx_usb3_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_ftdi_tx_usb3_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_ftdi_tx_usb3_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_ftdi_tx_usb3_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_029_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_029_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_029_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_029_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (dma_ftdi_tx_usb3_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_ftdi_tx_usb3_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_ftdi_tx_usb3_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_ftdi_tx_usb3_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_ftdi_tx_usb3_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_ftdi_tx_usb3_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_ftdi_tx_usb3_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_ftdi_tx_usb3_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_ftdi_tx_usb3_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_ftdi_tx_usb3_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (clk_100_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_030_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_030_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_030_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_030_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                               //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_1_left_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (dma_comm_1_left_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_1_left_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_1_left_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_1_left_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_1_left_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_1_left_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_1_left_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_1_left_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_1_left_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_1_left_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_1_left_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_1_left_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_1_left_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_1_left_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_1_left_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_1_left_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_1_left_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_1_left_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_1_left_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_1_left_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_1_left_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_031_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_031_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_031_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_031_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_1_left_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (dma_comm_1_left_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_1_left_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_1_left_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_1_left_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_1_left_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_1_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_1_left_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_1_right_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (dma_comm_1_right_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_1_right_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_1_right_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_1_right_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_1_right_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_1_right_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_1_right_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_1_right_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_1_right_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_1_right_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_1_right_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_1_right_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_1_right_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_1_right_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_1_right_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_1_right_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_1_right_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_1_right_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_1_right_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_1_right_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_1_right_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_032_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_032_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_032_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_032_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_1_right_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (dma_comm_1_right_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_1_right_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_1_right_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_1_right_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_1_right_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_1_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_1_right_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_2_left_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (dma_comm_2_left_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_2_left_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_2_left_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_2_left_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_2_left_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_2_left_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_2_left_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_2_left_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_2_left_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_2_left_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_2_left_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_2_left_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_2_left_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_2_left_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_2_left_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_2_left_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_2_left_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_2_left_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_2_left_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_2_left_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_2_left_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_033_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_033_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_033_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_033_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_2_left_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (dma_comm_2_left_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_2_left_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_2_left_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_2_left_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_2_left_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_2_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_2_left_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_2_right_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (dma_comm_2_right_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_2_right_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_2_right_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_2_right_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_2_right_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_2_right_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_2_right_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_2_right_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_2_right_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_2_right_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_2_right_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_2_right_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_2_right_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_2_right_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_2_right_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_2_right_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_2_right_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_2_right_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_2_right_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_2_right_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_2_right_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_034_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_034_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_034_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_034_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_2_right_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (dma_comm_2_right_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_2_right_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_2_right_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_2_right_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_2_right_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_2_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_2_right_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_3_left_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (dma_comm_3_left_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_3_left_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_3_left_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_3_left_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_3_left_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_3_left_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_3_left_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_3_left_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_3_left_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_3_left_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_3_left_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_3_left_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_3_left_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_3_left_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_3_left_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_3_left_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_3_left_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_3_left_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_3_left_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_3_left_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_3_left_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_035_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_035_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_035_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_035_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_3_left_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (dma_comm_3_left_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_3_left_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_3_left_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_3_left_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_3_left_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_3_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_3_left_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_3_right_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (dma_comm_3_right_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_3_right_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_3_right_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_3_right_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_3_right_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_3_right_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_3_right_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_3_right_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_3_right_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_3_right_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_3_right_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_3_right_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_3_right_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_3_right_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_3_right_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_3_right_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_3_right_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_3_right_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_3_right_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_3_right_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_3_right_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_036_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_036_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_036_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_036_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_3_right_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (dma_comm_3_right_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_3_right_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_3_right_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_3_right_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_3_right_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_3_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_3_right_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_4_left_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (dma_comm_4_left_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_4_left_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_4_left_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_4_left_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_4_left_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_4_left_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_4_left_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_4_left_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_4_left_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_4_left_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_4_left_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_4_left_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_4_left_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_4_left_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_4_left_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_4_left_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_4_left_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_4_left_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_4_left_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_4_left_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_4_left_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_037_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_037_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_037_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_037_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_4_left_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (dma_comm_4_left_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_4_left_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_4_left_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_4_left_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_4_left_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_4_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_4_left_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_4_right_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (dma_comm_4_right_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_4_right_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_4_right_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_4_right_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_4_right_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_4_right_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_4_right_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_4_right_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_4_right_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_4_right_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_4_right_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_4_right_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_4_right_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_4_right_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_4_right_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_4_right_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_4_right_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_4_right_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_4_right_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_4_right_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_4_right_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_038_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_038_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_038_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_038_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_4_right_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (dma_comm_4_right_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_4_right_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_4_right_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_4_right_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_4_right_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_4_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_4_right_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_5_left_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (dma_comm_5_left_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_5_left_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_5_left_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_5_left_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_5_left_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_5_left_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_5_left_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_5_left_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_5_left_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_5_left_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_5_left_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_5_left_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_5_left_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_5_left_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_5_left_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_5_left_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_5_left_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_5_left_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_5_left_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_5_left_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_5_left_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_039_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_039_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_039_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_039_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_5_left_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (dma_comm_5_left_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_5_left_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_5_left_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_5_left_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_5_left_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_5_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_5_left_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_5_right_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (dma_comm_5_right_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_5_right_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_5_right_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_5_right_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_5_right_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_5_right_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_5_right_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_5_right_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_5_right_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_5_right_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_5_right_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_5_right_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_5_right_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_5_right_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_5_right_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_5_right_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_5_right_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_5_right_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_5_right_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_5_right_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_5_right_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_040_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_040_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_040_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_040_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_5_right_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (dma_comm_5_right_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_5_right_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_5_right_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_5_right_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_5_right_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_5_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_5_right_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_6_left_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (dma_comm_6_left_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_6_left_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_6_left_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_6_left_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_6_left_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_6_left_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_6_left_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_6_left_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_6_left_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_6_left_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_6_left_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_6_left_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_6_left_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_6_left_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_6_left_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_6_left_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_6_left_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_6_left_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_6_left_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_6_left_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_6_left_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_041_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_041_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_041_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_041_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_6_left_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (dma_comm_6_left_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_6_left_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_6_left_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_6_left_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_6_left_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_6_left_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_6_left_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_comm_6_right_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (dma_comm_6_right_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_comm_6_right_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_comm_6_right_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_comm_6_right_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_comm_6_right_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_comm_6_right_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_comm_6_right_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_comm_6_right_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_comm_6_right_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_comm_6_right_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_comm_6_right_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_comm_6_right_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_comm_6_right_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_comm_6_right_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_comm_6_right_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_comm_6_right_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_comm_6_right_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_comm_6_right_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_comm_6_right_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_comm_6_right_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_comm_6_right_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_042_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_042_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_042_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_042_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_6_right_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (dma_comm_6_right_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_comm_6_right_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_comm_6_right_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_comm_6_right_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_comm_6_right_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_comm_6_right_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_comm_6_right_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_ftdi_rx_usb3_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_ftdi_rx_usb3_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_043_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_043_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_043_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_043_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_ftdi_rx_usb3_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_ftdi_rx_usb3_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (375),
		.PKT_ORI_BURST_SIZE_L      (373),
		.PKT_RESPONSE_STATUS_H     (372),
		.PKT_RESPONSE_STATUS_L     (371),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (366),
		.PKT_PROTECTION_L          (364),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (356),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (362),
		.PKT_DEST_ID_L             (357),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (376),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_ftdi_tx_usb3_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_ftdi_tx_usb3_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_044_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_044_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_044_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_044_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (377),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_ftdi_tx_usb3_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_ftdi_tx_usb3_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) clock_bridge_afi_50_s0_agent (
		.clk                     (clk_100_clk_clk),                                         //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (clock_bridge_afi_50_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (clock_bridge_afi_50_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (clock_bridge_afi_50_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (clock_bridge_afi_50_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (clock_bridge_afi_50_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (clock_bridge_afi_50_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (clock_bridge_afi_50_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (clock_bridge_afi_50_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (clock_bridge_afi_50_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (clock_bridge_afi_50_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (clock_bridge_afi_50_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (clock_bridge_afi_50_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (clock_bridge_afi_50_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (clock_bridge_afi_50_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (clock_bridge_afi_50_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (clock_bridge_afi_50_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_045_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_045_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_045_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_045_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_045_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_045_src_channel),                                 //                .channel
		.rf_sink_ready           (clock_bridge_afi_50_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (clock_bridge_afi_50_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (clock_bridge_afi_50_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (clock_bridge_afi_50_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (clock_bridge_afi_50_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (clock_bridge_afi_50_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (clock_bridge_afi_50_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (clock_bridge_afi_50_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (clock_bridge_afi_50_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (clock_bridge_afi_50_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_045_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_045_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_045_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_045_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (clock_bridge_afi_50_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (clock_bridge_afi_50_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (clock_bridge_afi_50_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) clock_bridge_afi_50_s0_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                         //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (clock_bridge_afi_50_s0_agent_rf_source_data),             //        in.data
		.in_valid          (clock_bridge_afi_50_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (clock_bridge_afi_50_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (clock_bridge_afi_50_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (clock_bridge_afi_50_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (clock_bridge_afi_50_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (clock_bridge_afi_50_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (clock_bridge_afi_50_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (clock_bridge_afi_50_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (clock_bridge_afi_50_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory_s1_agent (
		.clk                     (clk_100_clk_clk),                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_046_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_046_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_046_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_046_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ext_flash_uas_agent (
		.clk                     (clk_100_clk_clk),                                   //             clk.clk
		.reset                   (ext_flash_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (ext_flash_uas_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ext_flash_uas_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ext_flash_uas_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ext_flash_uas_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ext_flash_uas_agent_m0_lock),                       //                .lock
		.m0_readdata             (ext_flash_uas_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ext_flash_uas_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ext_flash_uas_agent_m0_read),                       //                .read
		.m0_waitrequest          (ext_flash_uas_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ext_flash_uas_agent_m0_writedata),                  //                .writedata
		.m0_write                (ext_flash_uas_agent_m0_write),                      //                .write
		.rp_endofpacket          (ext_flash_uas_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ext_flash_uas_agent_rp_ready),                      //                .ready
		.rp_valid                (ext_flash_uas_agent_rp_valid),                      //                .valid
		.rp_data                 (ext_flash_uas_agent_rp_data),                       //                .data
		.rp_startofpacket        (ext_flash_uas_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ext_flash_uas_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ext_flash_uas_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ext_flash_uas_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ext_flash_uas_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ext_flash_uas_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ext_flash_uas_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ext_flash_uas_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ext_flash_uas_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ext_flash_uas_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ext_flash_uas_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ext_flash_uas_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ext_flash_uas_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ext_flash_uas_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ext_flash_uas_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ext_flash_uas_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ext_flash_uas_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_047_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_047_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_047_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_047_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (ext_flash_uas_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ext_flash_uas_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ext_flash_uas_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_uas_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                //       clk.clk
		.reset             (ext_flash_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (ext_flash_uas_agent_rf_source_data),             //        in.data
		.in_valid          (ext_flash_uas_agent_rf_source_valid),            //          .valid
		.in_ready          (ext_flash_uas_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ext_flash_uas_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ext_flash_uas_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ext_flash_uas_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ext_flash_uas_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ext_flash_uas_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ext_flash_uas_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ext_flash_uas_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_uas_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                             //       clk.clk
		.reset             (ext_flash_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ext_flash_uas_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (ext_flash_uas_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (ext_flash_uas_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (ext_flash_uas_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (ext_flash_uas_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (ext_flash_uas_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (49),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr2_address_span_extender_windowed_slave_agent (
		.clk                     (clk_100_clk_clk),                                                            //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                              //       clk_reset.reset
		.m0_address              (ddr2_address_span_extender_windowed_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ddr2_address_span_extender_windowed_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ddr2_address_span_extender_windowed_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ddr2_address_span_extender_windowed_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ddr2_address_span_extender_windowed_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (ddr2_address_span_extender_windowed_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ddr2_address_span_extender_windowed_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ddr2_address_span_extender_windowed_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (ddr2_address_span_extender_windowed_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ddr2_address_span_extender_windowed_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (ddr2_address_span_extender_windowed_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (ddr2_address_span_extender_windowed_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ddr2_address_span_extender_windowed_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (ddr2_address_span_extender_windowed_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (ddr2_address_span_extender_windowed_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (ddr2_address_span_extender_windowed_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_048_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_mux_048_src_valid),                                                      //                .valid
		.cp_data                 (cmd_mux_048_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_mux_048_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_048_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_mux_048_src_channel),                                                    //                .channel
		.rf_sink_ready           (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ddr2_address_span_extender_windowed_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ddr2_address_span_extender_windowed_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ddr2_address_span_extender_windowed_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ddr2_address_span_extender_windowed_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ddr2_address_span_extender_windowed_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_048_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_048_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_048_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_048_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (ddr2_address_span_extender_windowed_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr2_address_span_extender_windowed_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ddr2_address_span_extender_windowed_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr2_address_span_extender_windowed_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                            //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (ddr2_address_span_extender_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (ddr2_address_span_extender_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (ddr2_address_span_extender_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ddr2_address_span_extender_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ddr2_address_span_extender_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ddr2_address_span_extender_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_1_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                 //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                        //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                      //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                 //       clk.clk
		.reset              (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //       src.ready
		.src_valid          (router_003_src_valid),                                            //          .valid
		.src_data           (router_003_src_data),                                             //          .data
		.src_channel        (router_003_src_channel),                                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_004 (
		.sink_ready         (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                 //       clk.clk
		.reset              (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_004_src_ready),                                            //       src.ready
		.src_valid          (router_004_src_valid),                                            //          .valid
		.src_data           (router_004_src_data),                                             //          .data
		.src_channel        (router_004_src_channel),                                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_005 (
		.sink_ready         (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                 //       clk.clk
		.reset              (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_005_src_ready),                                            //       src.ready
		.src_valid          (router_005_src_valid),                                            //          .valid
		.src_data           (router_005_src_data),                                             //          .data
		.src_channel        (router_005_src_channel),                                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_006 (
		.sink_ready         (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                 //       clk.clk
		.reset              (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_006_src_ready),                                            //       src.ready
		.src_valid          (router_006_src_valid),                                            //          .valid
		.src_data           (router_006_src_data),                                             //          .data
		.src_channel        (router_006_src_channel),                                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_007 (
		.sink_ready         (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                 //       clk.clk
		.reset              (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_007_src_ready),                                            //       src.ready
		.src_valid          (router_007_src_valid),                                            //          .valid
		.src_data           (router_007_src_data),                                             //          .data
		.src_channel        (router_007_src_channel),                                          //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_008 (
		.sink_ready         (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                 //       clk.clk
		.reset              (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_008_src_ready),                                            //       src.ready
		.src_valid          (router_008_src_valid),                                            //          .valid
		.src_data           (router_008_src_data),                                             //          .data
		.src_channel        (router_008_src_channel),                                          //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_009 (
		.sink_ready         (ftdi_usb3_0_avalon_slave_config_agent_rp_ready),         //      sink.ready
		.sink_valid         (ftdi_usb3_0_avalon_slave_config_agent_rp_valid),         //          .valid
		.sink_data          (ftdi_usb3_0_avalon_slave_config_agent_rp_data),          //          .data
		.sink_startofpacket (ftdi_usb3_0_avalon_slave_config_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ftdi_usb3_0_avalon_slave_config_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                        //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_009_src_ready),                                   //       src.ready
		.src_valid          (router_009_src_valid),                                   //          .valid
		.src_data           (router_009_src_data),                                    //          .data
		.src_channel        (router_009_src_channel),                                 //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_010 (
		.sink_ready         (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_ready),         //      sink.ready
		.sink_valid         (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_valid),         //          .valid
		.sink_data          (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_data),          //          .data
		.sink_startofpacket (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                     //       clk.clk
		.reset              (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_010_src_ready),                                                //       src.ready
		.src_valid          (router_010_src_valid),                                                //          .valid
		.src_data           (router_010_src_data),                                                 //          .data
		.src_channel        (router_010_src_channel),                                              //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_011 (
		.sink_ready         (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_ready),         //      sink.ready
		.sink_valid         (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_valid),         //          .valid
		.sink_data          (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_data),          //          .data
		.sink_startofpacket (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                     //       clk.clk
		.reset              (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_011_src_ready),                                                //       src.ready
		.src_valid          (router_011_src_valid),                                                //          .valid
		.src_data           (router_011_src_data),                                                 //          .data
		.src_channel        (router_011_src_channel),                                              //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_012 (
		.sink_ready         (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_ready),         //      sink.ready
		.sink_valid         (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_valid),         //          .valid
		.sink_data          (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_data),          //          .data
		.sink_startofpacket (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                     //       clk.clk
		.reset              (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_012_src_ready),                                                //       src.ready
		.src_valid          (router_012_src_valid),                                                //          .valid
		.src_data           (router_012_src_data),                                                 //          .data
		.src_channel        (router_012_src_channel),                                              //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_013 (
		.sink_ready         (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_ready),         //      sink.ready
		.sink_valid         (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_valid),         //          .valid
		.sink_data          (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_data),          //          .data
		.sink_startofpacket (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                     //       clk.clk
		.reset              (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_013_src_ready),                                                //       src.ready
		.src_valid          (router_013_src_valid),                                                //          .valid
		.src_data           (router_013_src_data),                                                 //          .data
		.src_channel        (router_013_src_channel),                                              //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_014 (
		.sink_ready         (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_ready),         //      sink.ready
		.sink_valid         (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_valid),         //          .valid
		.sink_data          (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_data),          //          .data
		.sink_startofpacket (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                     //       clk.clk
		.reset              (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_014_src_ready),                                                //       src.ready
		.src_valid          (router_014_src_valid),                                                //          .valid
		.src_data           (router_014_src_data),                                                 //          .data
		.src_channel        (router_014_src_channel),                                              //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_015 (
		.sink_ready         (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_ready),         //      sink.ready
		.sink_valid         (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_valid),         //          .valid
		.sink_data          (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_data),          //          .data
		.sink_startofpacket (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                     //       clk.clk
		.reset              (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_015_src_ready),                                                //       src.ready
		.src_valid          (router_015_src_valid),                                                //          .valid
		.src_data           (router_015_src_data),                                                 //          .data
		.src_channel        (router_015_src_channel),                                              //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_016 router_016 (
		.sink_ready         (ddr2_address_span_extender_cntl_agent_rp_ready),         //      sink.ready
		.sink_valid         (ddr2_address_span_extender_cntl_agent_rp_valid),         //          .valid
		.sink_data          (ddr2_address_span_extender_cntl_agent_rp_data),          //          .data
		.sink_startofpacket (ddr2_address_span_extender_cntl_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ddr2_address_span_extender_cntl_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                        //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_016_src_ready),                                   //       src.ready
		.src_valid          (router_016_src_valid),                                   //          .valid
		.src_data           (router_016_src_data),                                    //          .data
		.src_channel        (router_016_src_channel),                                 //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_017 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_017_src_ready),                            //       src.ready
		.src_valid          (router_017_src_valid),                            //          .valid
		.src_data           (router_017_src_data),                             //          .data
		.src_channel        (router_017_src_channel),                          //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_018 (
		.sink_ready         (dma_comm_1_left_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (dma_comm_1_left_csr_agent_rp_valid),            //          .valid
		.sink_data          (dma_comm_1_left_csr_agent_rp_data),             //          .data
		.sink_startofpacket (dma_comm_1_left_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (dma_comm_1_left_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                          //       src.ready
		.src_valid          (router_018_src_valid),                          //          .valid
		.src_data           (router_018_src_data),                           //          .data
		.src_channel        (router_018_src_channel),                        //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_019 (
		.sink_ready         (dma_comm_1_right_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (dma_comm_1_right_csr_agent_rp_valid),           //          .valid
		.sink_data          (dma_comm_1_right_csr_agent_rp_data),            //          .data
		.sink_startofpacket (dma_comm_1_right_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dma_comm_1_right_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                          //       src.ready
		.src_valid          (router_019_src_valid),                          //          .valid
		.src_data           (router_019_src_data),                           //          .data
		.src_channel        (router_019_src_channel),                        //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_020 (
		.sink_ready         (dma_comm_2_left_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (dma_comm_2_left_csr_agent_rp_valid),            //          .valid
		.sink_data          (dma_comm_2_left_csr_agent_rp_data),             //          .data
		.sink_startofpacket (dma_comm_2_left_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (dma_comm_2_left_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                          //       src.ready
		.src_valid          (router_020_src_valid),                          //          .valid
		.src_data           (router_020_src_data),                           //          .data
		.src_channel        (router_020_src_channel),                        //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_021 (
		.sink_ready         (dma_comm_2_right_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (dma_comm_2_right_csr_agent_rp_valid),           //          .valid
		.sink_data          (dma_comm_2_right_csr_agent_rp_data),            //          .data
		.sink_startofpacket (dma_comm_2_right_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dma_comm_2_right_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                          //       src.ready
		.src_valid          (router_021_src_valid),                          //          .valid
		.src_data           (router_021_src_data),                           //          .data
		.src_channel        (router_021_src_channel),                        //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_022 (
		.sink_ready         (dma_comm_3_left_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (dma_comm_3_left_csr_agent_rp_valid),            //          .valid
		.sink_data          (dma_comm_3_left_csr_agent_rp_data),             //          .data
		.sink_startofpacket (dma_comm_3_left_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (dma_comm_3_left_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                          //       src.ready
		.src_valid          (router_022_src_valid),                          //          .valid
		.src_data           (router_022_src_data),                           //          .data
		.src_channel        (router_022_src_channel),                        //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_023 (
		.sink_ready         (dma_comm_3_right_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (dma_comm_3_right_csr_agent_rp_valid),           //          .valid
		.sink_data          (dma_comm_3_right_csr_agent_rp_data),            //          .data
		.sink_startofpacket (dma_comm_3_right_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dma_comm_3_right_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                          //       src.ready
		.src_valid          (router_023_src_valid),                          //          .valid
		.src_data           (router_023_src_data),                           //          .data
		.src_channel        (router_023_src_channel),                        //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_024 (
		.sink_ready         (dma_comm_4_left_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (dma_comm_4_left_csr_agent_rp_valid),            //          .valid
		.sink_data          (dma_comm_4_left_csr_agent_rp_data),             //          .data
		.sink_startofpacket (dma_comm_4_left_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (dma_comm_4_left_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                          //       src.ready
		.src_valid          (router_024_src_valid),                          //          .valid
		.src_data           (router_024_src_data),                           //          .data
		.src_channel        (router_024_src_channel),                        //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_025 (
		.sink_ready         (dma_comm_4_right_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (dma_comm_4_right_csr_agent_rp_valid),           //          .valid
		.sink_data          (dma_comm_4_right_csr_agent_rp_data),            //          .data
		.sink_startofpacket (dma_comm_4_right_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dma_comm_4_right_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                          //       src.ready
		.src_valid          (router_025_src_valid),                          //          .valid
		.src_data           (router_025_src_data),                           //          .data
		.src_channel        (router_025_src_channel),                        //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_026 (
		.sink_ready         (dma_comm_5_left_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (dma_comm_5_left_csr_agent_rp_valid),            //          .valid
		.sink_data          (dma_comm_5_left_csr_agent_rp_data),             //          .data
		.sink_startofpacket (dma_comm_5_left_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (dma_comm_5_left_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                          //       src.ready
		.src_valid          (router_026_src_valid),                          //          .valid
		.src_data           (router_026_src_data),                           //          .data
		.src_channel        (router_026_src_channel),                        //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_027 (
		.sink_ready         (dma_comm_5_right_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (dma_comm_5_right_csr_agent_rp_valid),           //          .valid
		.sink_data          (dma_comm_5_right_csr_agent_rp_data),            //          .data
		.sink_startofpacket (dma_comm_5_right_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dma_comm_5_right_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                          //       src.ready
		.src_valid          (router_027_src_valid),                          //          .valid
		.src_data           (router_027_src_data),                           //          .data
		.src_channel        (router_027_src_channel),                        //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_028 (
		.sink_ready         (dma_comm_6_left_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (dma_comm_6_left_csr_agent_rp_valid),            //          .valid
		.sink_data          (dma_comm_6_left_csr_agent_rp_data),             //          .data
		.sink_startofpacket (dma_comm_6_left_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (dma_comm_6_left_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                          //       src.ready
		.src_valid          (router_028_src_valid),                          //          .valid
		.src_data           (router_028_src_data),                           //          .data
		.src_channel        (router_028_src_channel),                        //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_029 (
		.sink_ready         (dma_comm_6_right_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (dma_comm_6_right_csr_agent_rp_valid),           //          .valid
		.sink_data          (dma_comm_6_right_csr_agent_rp_data),            //          .data
		.sink_startofpacket (dma_comm_6_right_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dma_comm_6_right_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                          //       src.ready
		.src_valid          (router_029_src_valid),                          //          .valid
		.src_data           (router_029_src_data),                           //          .data
		.src_channel        (router_029_src_channel),                        //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_030 (
		.sink_ready         (dma_ftdi_rx_usb3_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (dma_ftdi_rx_usb3_csr_agent_rp_valid),           //          .valid
		.sink_data          (dma_ftdi_rx_usb3_csr_agent_rp_data),            //          .data
		.sink_startofpacket (dma_ftdi_rx_usb3_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dma_ftdi_rx_usb3_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                          //       src.ready
		.src_valid          (router_030_src_valid),                          //          .valid
		.src_data           (router_030_src_data),                           //          .data
		.src_channel        (router_030_src_channel),                        //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_031 (
		.sink_ready         (dma_ftdi_tx_usb3_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (dma_ftdi_tx_usb3_csr_agent_rp_valid),           //          .valid
		.sink_data          (dma_ftdi_tx_usb3_csr_agent_rp_data),            //          .data
		.sink_startofpacket (dma_ftdi_tx_usb3_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dma_ftdi_tx_usb3_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                          //       src.ready
		.src_valid          (router_031_src_valid),                          //          .valid
		.src_data           (router_031_src_data),                           //          .data
		.src_channel        (router_031_src_channel),                        //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_032 router_032 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                     //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_032_src_ready),                                //       src.ready
		.src_valid          (router_032_src_valid),                                //          .valid
		.src_data           (router_032_src_data),                                 //          .data
		.src_channel        (router_032_src_channel),                              //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_033 (
		.sink_ready         (dma_comm_1_left_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_1_left_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_1_left_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_1_left_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_1_left_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                         //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_033_src_ready),                                    //       src.ready
		.src_valid          (router_033_src_valid),                                    //          .valid
		.src_data           (router_033_src_data),                                     //          .data
		.src_channel        (router_033_src_channel),                                  //          .channel
		.src_startofpacket  (router_033_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_034 (
		.sink_ready         (dma_comm_1_right_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_1_right_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_1_right_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_1_right_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_1_right_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_034_src_ready),                                     //       src.ready
		.src_valid          (router_034_src_valid),                                     //          .valid
		.src_data           (router_034_src_data),                                      //          .data
		.src_channel        (router_034_src_channel),                                   //          .channel
		.src_startofpacket  (router_034_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_035 (
		.sink_ready         (dma_comm_2_left_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_2_left_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_2_left_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_2_left_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_2_left_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                         //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_035_src_ready),                                    //       src.ready
		.src_valid          (router_035_src_valid),                                    //          .valid
		.src_data           (router_035_src_data),                                     //          .data
		.src_channel        (router_035_src_channel),                                  //          .channel
		.src_startofpacket  (router_035_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_036 (
		.sink_ready         (dma_comm_2_right_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_2_right_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_2_right_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_2_right_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_2_right_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_036_src_ready),                                     //       src.ready
		.src_valid          (router_036_src_valid),                                     //          .valid
		.src_data           (router_036_src_data),                                      //          .data
		.src_channel        (router_036_src_channel),                                   //          .channel
		.src_startofpacket  (router_036_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_037 (
		.sink_ready         (dma_comm_3_left_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_3_left_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_3_left_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_3_left_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_3_left_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                         //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_037_src_ready),                                    //       src.ready
		.src_valid          (router_037_src_valid),                                    //          .valid
		.src_data           (router_037_src_data),                                     //          .data
		.src_channel        (router_037_src_channel),                                  //          .channel
		.src_startofpacket  (router_037_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_038 (
		.sink_ready         (dma_comm_3_right_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_3_right_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_3_right_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_3_right_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_3_right_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_038_src_ready),                                     //       src.ready
		.src_valid          (router_038_src_valid),                                     //          .valid
		.src_data           (router_038_src_data),                                      //          .data
		.src_channel        (router_038_src_channel),                                   //          .channel
		.src_startofpacket  (router_038_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_039 (
		.sink_ready         (dma_comm_4_left_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_4_left_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_4_left_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_4_left_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_4_left_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                         //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_039_src_ready),                                    //       src.ready
		.src_valid          (router_039_src_valid),                                    //          .valid
		.src_data           (router_039_src_data),                                     //          .data
		.src_channel        (router_039_src_channel),                                  //          .channel
		.src_startofpacket  (router_039_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_040 (
		.sink_ready         (dma_comm_4_right_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_4_right_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_4_right_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_4_right_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_4_right_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_040_src_ready),                                     //       src.ready
		.src_valid          (router_040_src_valid),                                     //          .valid
		.src_data           (router_040_src_data),                                      //          .data
		.src_channel        (router_040_src_channel),                                   //          .channel
		.src_startofpacket  (router_040_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_040_src_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_041 (
		.sink_ready         (dma_comm_5_left_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_5_left_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_5_left_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_5_left_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_5_left_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                         //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_041_src_ready),                                    //       src.ready
		.src_valid          (router_041_src_valid),                                    //          .valid
		.src_data           (router_041_src_data),                                     //          .data
		.src_channel        (router_041_src_channel),                                  //          .channel
		.src_startofpacket  (router_041_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_041_src_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_042 (
		.sink_ready         (dma_comm_5_right_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_5_right_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_5_right_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_5_right_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_5_right_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_042_src_ready),                                     //       src.ready
		.src_valid          (router_042_src_valid),                                     //          .valid
		.src_data           (router_042_src_data),                                      //          .data
		.src_channel        (router_042_src_channel),                                   //          .channel
		.src_startofpacket  (router_042_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_042_src_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_043 (
		.sink_ready         (dma_comm_6_left_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_6_left_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_6_left_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_6_left_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_6_left_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                         //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_043_src_ready),                                    //       src.ready
		.src_valid          (router_043_src_valid),                                    //          .valid
		.src_data           (router_043_src_data),                                     //          .data
		.src_channel        (router_043_src_channel),                                  //          .channel
		.src_startofpacket  (router_043_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_043_src_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_044 (
		.sink_ready         (dma_comm_6_right_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_comm_6_right_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_comm_6_right_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_comm_6_right_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_6_right_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_044_src_ready),                                     //       src.ready
		.src_valid          (router_044_src_valid),                                     //          .valid
		.src_data           (router_044_src_data),                                      //          .data
		.src_channel        (router_044_src_channel),                                   //          .channel
		.src_startofpacket  (router_044_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_044_src_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_045 (
		.sink_ready         (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_ftdi_rx_usb3_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_045_src_ready),                                     //       src.ready
		.src_valid          (router_045_src_valid),                                     //          .valid
		.src_data           (router_045_src_data),                                      //          .data
		.src_channel        (router_045_src_channel),                                   //          .channel
		.src_startofpacket  (router_045_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_045_src_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_033 router_046 (
		.sink_ready         (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_ftdi_tx_usb3_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_046_src_ready),                                     //       src.ready
		.src_valid          (router_046_src_valid),                                     //          .valid
		.src_data           (router_046_src_data),                                      //          .data
		.src_channel        (router_046_src_channel),                                   //          .channel
		.src_startofpacket  (router_046_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_046_src_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_047 (
		.sink_ready         (clock_bridge_afi_50_s0_agent_rp_ready),         //      sink.ready
		.sink_valid         (clock_bridge_afi_50_s0_agent_rp_valid),         //          .valid
		.sink_data          (clock_bridge_afi_50_s0_agent_rp_data),          //          .data
		.sink_startofpacket (clock_bridge_afi_50_s0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (clock_bridge_afi_50_s0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_047_src_ready),                          //       src.ready
		.src_valid          (router_047_src_valid),                          //          .valid
		.src_data           (router_047_src_data),                           //          .data
		.src_channel        (router_047_src_channel),                        //          .channel
		.src_startofpacket  (router_047_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_047_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_032 router_048 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),               //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),                //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_048_src_ready),                          //       src.ready
		.src_valid          (router_048_src_valid),                          //          .valid
		.src_data           (router_048_src_data),                           //          .data
		.src_channel        (router_048_src_channel),                        //          .channel
		.src_startofpacket  (router_048_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_048_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_049 router_049 (
		.sink_ready         (ext_flash_uas_agent_rp_ready),                //      sink.ready
		.sink_valid         (ext_flash_uas_agent_rp_valid),                //          .valid
		.sink_data          (ext_flash_uas_agent_rp_data),                 //          .data
		.sink_startofpacket (ext_flash_uas_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (ext_flash_uas_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_100_clk_clk),                             //       clk.clk
		.reset              (ext_flash_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_049_src_ready),                        //       src.ready
		.src_valid          (router_049_src_valid),                        //          .valid
		.src_data           (router_049_src_data),                         //          .data
		.src_channel        (router_049_src_channel),                      //          .channel
		.src_startofpacket  (router_049_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_049_src_endofpacket)                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_router_002 router_050 (
		.sink_ready         (ddr2_address_span_extender_windowed_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (ddr2_address_span_extender_windowed_slave_agent_rp_valid),         //          .valid
		.sink_data          (ddr2_address_span_extender_windowed_slave_agent_rp_data),          //          .data
		.sink_startofpacket (ddr2_address_span_extender_windowed_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ddr2_address_span_extender_windowed_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                  //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (router_050_src_ready),                                             //       src.ready
		.src_valid          (router_050_src_valid),                                             //          .valid
		.src_data           (router_050_src_data),                                              //          .data
		.src_channel        (router_050_src_channel),                                           //          .channel
		.src_startofpacket  (router_050_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_050_src_endofpacket)                                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (49),
		.VALID_WIDTH               (49),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_0_instruction_master_limiter (
		.clk                    (clk_100_clk_clk),                                               //       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                          //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                          //          .valid
		.cmd_sink_data          (router_001_src_data),                                           //          .data
		.cmd_sink_channel       (router_001_src_channel),                                        //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                  //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                    //          .endofpacket
		.cmd_src_ready          (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                         //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                       //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                          //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                   //          .endofpacket
		.rsp_src_ready          (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_0_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_0_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (49),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31),
		.ADAPTER_VERSION           ("13.1")
	) nios2_gen2_0_debug_mem_slave_burst_adapter (
		.clk                   (clk_100_clk_clk),                                                  //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_030_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_030_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_030_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_030_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_030_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_030_src_ready),                                            //          .ready
		.source0_valid         (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (49),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory_s1_burst_adapter (
		.clk                   (clk_100_clk_clk),                                      //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_046_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_046_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_046_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_046_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_046_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_046_src_ready),                                //          .ready
		.source0_valid         (onchip_memory_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (66),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (49),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31),
		.ADAPTER_VERSION           ("13.1")
	) ext_flash_uas_burst_adapter (
		.clk                   (clk_100_clk_clk),                                   //       cr0.clk
		.reset                 (ext_flash_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (ext_flash_uas_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (ext_flash_uas_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (ext_flash_uas_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (ext_flash_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (ext_flash_uas_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (ext_flash_uas_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (ext_flash_uas_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ext_flash_uas_burst_adapter_source0_data),          //          .data
		.source0_channel       (ext_flash_uas_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ext_flash_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ext_flash_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ext_flash_uas_burst_adapter_source0_ready)          //          .ready
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (clk_100_clk_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                               //      sink.ready
		.sink_channel        (router_src_channel),                             //          .channel
		.sink_data           (router_src_data),                                //          .data
		.sink_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                         //          .endofpacket
		.sink_valid          (router_src_valid),                               //          .valid
		.src0_ready          (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                           //          .valid
		.src0_data           (cmd_demux_src0_data),                            //          .data
		.src0_channel        (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                           //          .valid
		.src1_data           (cmd_demux_src1_data),                            //          .data
		.src1_channel        (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                           //          .valid
		.src2_data           (cmd_demux_src2_data),                            //          .data
		.src2_channel        (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                           //          .valid
		.src3_data           (cmd_demux_src3_data),                            //          .data
		.src3_channel        (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                           //          .valid
		.src4_data           (cmd_demux_src4_data),                            //          .data
		.src4_channel        (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                           //          .valid
		.src5_data           (cmd_demux_src5_data),                            //          .data
		.src5_channel        (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                           //          .valid
		.src6_data           (cmd_demux_src6_data),                            //          .data
		.src6_channel        (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                           //          .valid
		.src7_data           (cmd_demux_src7_data),                            //          .data
		.src7_channel        (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                           //          .valid
		.src8_data           (cmd_demux_src8_data),                            //          .data
		.src8_channel        (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                           //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                           //          .valid
		.src9_data           (cmd_demux_src9_data),                            //          .data
		.src9_channel        (cmd_demux_src9_channel),                         //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                          //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                          //          .valid
		.src10_data          (cmd_demux_src10_data),                           //          .data
		.src10_channel       (cmd_demux_src10_channel),                        //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                          //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                          //          .valid
		.src11_data          (cmd_demux_src11_data),                           //          .data
		.src11_channel       (cmd_demux_src11_channel),                        //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                          //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                          //          .valid
		.src12_data          (cmd_demux_src12_data),                           //          .data
		.src12_channel       (cmd_demux_src12_channel),                        //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                          //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                          //          .valid
		.src13_data          (cmd_demux_src13_data),                           //          .data
		.src13_channel       (cmd_demux_src13_channel),                        //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                    //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                          //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                          //          .valid
		.src14_data          (cmd_demux_src14_data),                           //          .data
		.src14_channel       (cmd_demux_src14_channel),                        //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                    //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                          //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                          //          .valid
		.src15_data          (cmd_demux_src15_data),                           //          .data
		.src15_channel       (cmd_demux_src15_channel),                        //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                    //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                          //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                          //          .valid
		.src16_data          (cmd_demux_src16_data),                           //          .data
		.src16_channel       (cmd_demux_src16_channel),                        //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                  //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                    //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                          //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                          //          .valid
		.src17_data          (cmd_demux_src17_data),                           //          .data
		.src17_channel       (cmd_demux_src17_channel),                        //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                  //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                    //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                          //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                          //          .valid
		.src18_data          (cmd_demux_src18_data),                           //          .data
		.src18_channel       (cmd_demux_src18_channel),                        //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                  //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                    //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                          //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                          //          .valid
		.src19_data          (cmd_demux_src19_data),                           //          .data
		.src19_channel       (cmd_demux_src19_channel),                        //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                  //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                    //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                          //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                          //          .valid
		.src20_data          (cmd_demux_src20_data),                           //          .data
		.src20_channel       (cmd_demux_src20_channel),                        //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                  //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                    //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                          //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                          //          .valid
		.src21_data          (cmd_demux_src21_data),                           //          .data
		.src21_channel       (cmd_demux_src21_channel),                        //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                  //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                    //          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                          //     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                          //          .valid
		.src22_data          (cmd_demux_src22_data),                           //          .data
		.src22_channel       (cmd_demux_src22_channel),                        //          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                  //          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                    //          .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                          //     src23.ready
		.src23_valid         (cmd_demux_src23_valid),                          //          .valid
		.src23_data          (cmd_demux_src23_data),                           //          .data
		.src23_channel       (cmd_demux_src23_channel),                        //          .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                  //          .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                    //          .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                          //     src24.ready
		.src24_valid         (cmd_demux_src24_valid),                          //          .valid
		.src24_data          (cmd_demux_src24_data),                           //          .data
		.src24_channel       (cmd_demux_src24_channel),                        //          .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),                  //          .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),                    //          .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                          //     src25.ready
		.src25_valid         (cmd_demux_src25_valid),                          //          .valid
		.src25_data          (cmd_demux_src25_data),                           //          .data
		.src25_channel       (cmd_demux_src25_channel),                        //          .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),                  //          .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),                    //          .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                          //     src26.ready
		.src26_valid         (cmd_demux_src26_valid),                          //          .valid
		.src26_data          (cmd_demux_src26_data),                           //          .data
		.src26_channel       (cmd_demux_src26_channel),                        //          .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),                  //          .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket),                    //          .endofpacket
		.src27_ready         (cmd_demux_src27_ready),                          //     src27.ready
		.src27_valid         (cmd_demux_src27_valid),                          //          .valid
		.src27_data          (cmd_demux_src27_data),                           //          .data
		.src27_channel       (cmd_demux_src27_channel),                        //          .channel
		.src27_startofpacket (cmd_demux_src27_startofpacket),                  //          .startofpacket
		.src27_endofpacket   (cmd_demux_src27_endofpacket),                    //          .endofpacket
		.src28_ready         (cmd_demux_src28_ready),                          //     src28.ready
		.src28_valid         (cmd_demux_src28_valid),                          //          .valid
		.src28_data          (cmd_demux_src28_data),                           //          .data
		.src28_channel       (cmd_demux_src28_channel),                        //          .channel
		.src28_startofpacket (cmd_demux_src28_startofpacket),                  //          .startofpacket
		.src28_endofpacket   (cmd_demux_src28_endofpacket),                    //          .endofpacket
		.src29_ready         (cmd_demux_src29_ready),                          //     src29.ready
		.src29_valid         (cmd_demux_src29_valid),                          //          .valid
		.src29_data          (cmd_demux_src29_data),                           //          .data
		.src29_channel       (cmd_demux_src29_channel),                        //          .channel
		.src29_startofpacket (cmd_demux_src29_startofpacket),                  //          .startofpacket
		.src29_endofpacket   (cmd_demux_src29_endofpacket),                    //          .endofpacket
		.src30_ready         (cmd_demux_src30_ready),                          //     src30.ready
		.src30_valid         (cmd_demux_src30_valid),                          //          .valid
		.src30_data          (cmd_demux_src30_data),                           //          .data
		.src30_channel       (cmd_demux_src30_channel),                        //          .channel
		.src30_startofpacket (cmd_demux_src30_startofpacket),                  //          .startofpacket
		.src30_endofpacket   (cmd_demux_src30_endofpacket),                    //          .endofpacket
		.src31_ready         (cmd_demux_src31_ready),                          //     src31.ready
		.src31_valid         (cmd_demux_src31_valid),                          //          .valid
		.src31_data          (cmd_demux_src31_data),                           //          .data
		.src31_channel       (cmd_demux_src31_channel),                        //          .channel
		.src31_startofpacket (cmd_demux_src31_startofpacket),                  //          .startofpacket
		.src31_endofpacket   (cmd_demux_src31_endofpacket),                    //          .endofpacket
		.src32_ready         (cmd_demux_src32_ready),                          //     src32.ready
		.src32_valid         (cmd_demux_src32_valid),                          //          .valid
		.src32_data          (cmd_demux_src32_data),                           //          .data
		.src32_channel       (cmd_demux_src32_channel),                        //          .channel
		.src32_startofpacket (cmd_demux_src32_startofpacket),                  //          .startofpacket
		.src32_endofpacket   (cmd_demux_src32_endofpacket),                    //          .endofpacket
		.src33_ready         (cmd_demux_src33_ready),                          //     src33.ready
		.src33_valid         (cmd_demux_src33_valid),                          //          .valid
		.src33_data          (cmd_demux_src33_data),                           //          .data
		.src33_channel       (cmd_demux_src33_channel),                        //          .channel
		.src33_startofpacket (cmd_demux_src33_startofpacket),                  //          .startofpacket
		.src33_endofpacket   (cmd_demux_src33_endofpacket),                    //          .endofpacket
		.src34_ready         (cmd_demux_src34_ready),                          //     src34.ready
		.src34_valid         (cmd_demux_src34_valid),                          //          .valid
		.src34_data          (cmd_demux_src34_data),                           //          .data
		.src34_channel       (cmd_demux_src34_channel),                        //          .channel
		.src34_startofpacket (cmd_demux_src34_startofpacket),                  //          .startofpacket
		.src34_endofpacket   (cmd_demux_src34_endofpacket),                    //          .endofpacket
		.src35_ready         (cmd_demux_src35_ready),                          //     src35.ready
		.src35_valid         (cmd_demux_src35_valid),                          //          .valid
		.src35_data          (cmd_demux_src35_data),                           //          .data
		.src35_channel       (cmd_demux_src35_channel),                        //          .channel
		.src35_startofpacket (cmd_demux_src35_startofpacket),                  //          .startofpacket
		.src35_endofpacket   (cmd_demux_src35_endofpacket),                    //          .endofpacket
		.src36_ready         (cmd_demux_src36_ready),                          //     src36.ready
		.src36_valid         (cmd_demux_src36_valid),                          //          .valid
		.src36_data          (cmd_demux_src36_data),                           //          .data
		.src36_channel       (cmd_demux_src36_channel),                        //          .channel
		.src36_startofpacket (cmd_demux_src36_startofpacket),                  //          .startofpacket
		.src36_endofpacket   (cmd_demux_src36_endofpacket),                    //          .endofpacket
		.src37_ready         (cmd_demux_src37_ready),                          //     src37.ready
		.src37_valid         (cmd_demux_src37_valid),                          //          .valid
		.src37_data          (cmd_demux_src37_data),                           //          .data
		.src37_channel       (cmd_demux_src37_channel),                        //          .channel
		.src37_startofpacket (cmd_demux_src37_startofpacket),                  //          .startofpacket
		.src37_endofpacket   (cmd_demux_src37_endofpacket),                    //          .endofpacket
		.src38_ready         (cmd_demux_src38_ready),                          //     src38.ready
		.src38_valid         (cmd_demux_src38_valid),                          //          .valid
		.src38_data          (cmd_demux_src38_data),                           //          .data
		.src38_channel       (cmd_demux_src38_channel),                        //          .channel
		.src38_startofpacket (cmd_demux_src38_startofpacket),                  //          .startofpacket
		.src38_endofpacket   (cmd_demux_src38_endofpacket),                    //          .endofpacket
		.src39_ready         (cmd_demux_src39_ready),                          //     src39.ready
		.src39_valid         (cmd_demux_src39_valid),                          //          .valid
		.src39_data          (cmd_demux_src39_data),                           //          .data
		.src39_channel       (cmd_demux_src39_channel),                        //          .channel
		.src39_startofpacket (cmd_demux_src39_startofpacket),                  //          .startofpacket
		.src39_endofpacket   (cmd_demux_src39_endofpacket),                    //          .endofpacket
		.src40_ready         (cmd_demux_src40_ready),                          //     src40.ready
		.src40_valid         (cmd_demux_src40_valid),                          //          .valid
		.src40_data          (cmd_demux_src40_data),                           //          .data
		.src40_channel       (cmd_demux_src40_channel),                        //          .channel
		.src40_startofpacket (cmd_demux_src40_startofpacket),                  //          .startofpacket
		.src40_endofpacket   (cmd_demux_src40_endofpacket),                    //          .endofpacket
		.src41_ready         (cmd_demux_src41_ready),                          //     src41.ready
		.src41_valid         (cmd_demux_src41_valid),                          //          .valid
		.src41_data          (cmd_demux_src41_data),                           //          .data
		.src41_channel       (cmd_demux_src41_channel),                        //          .channel
		.src41_startofpacket (cmd_demux_src41_startofpacket),                  //          .startofpacket
		.src41_endofpacket   (cmd_demux_src41_endofpacket),                    //          .endofpacket
		.src42_ready         (cmd_demux_src42_ready),                          //     src42.ready
		.src42_valid         (cmd_demux_src42_valid),                          //          .valid
		.src42_data          (cmd_demux_src42_data),                           //          .data
		.src42_channel       (cmd_demux_src42_channel),                        //          .channel
		.src42_startofpacket (cmd_demux_src42_startofpacket),                  //          .startofpacket
		.src42_endofpacket   (cmd_demux_src42_endofpacket),                    //          .endofpacket
		.src43_ready         (cmd_demux_src43_ready),                          //     src43.ready
		.src43_valid         (cmd_demux_src43_valid),                          //          .valid
		.src43_data          (cmd_demux_src43_data),                           //          .data
		.src43_channel       (cmd_demux_src43_channel),                        //          .channel
		.src43_startofpacket (cmd_demux_src43_startofpacket),                  //          .startofpacket
		.src43_endofpacket   (cmd_demux_src43_endofpacket),                    //          .endofpacket
		.src44_ready         (cmd_demux_src44_ready),                          //     src44.ready
		.src44_valid         (cmd_demux_src44_valid),                          //          .valid
		.src44_data          (cmd_demux_src44_data),                           //          .data
		.src44_channel       (cmd_demux_src44_channel),                        //          .channel
		.src44_startofpacket (cmd_demux_src44_startofpacket),                  //          .startofpacket
		.src44_endofpacket   (cmd_demux_src44_endofpacket),                    //          .endofpacket
		.src45_ready         (cmd_demux_src45_ready),                          //     src45.ready
		.src45_valid         (cmd_demux_src45_valid),                          //          .valid
		.src45_data          (cmd_demux_src45_data),                           //          .data
		.src45_channel       (cmd_demux_src45_channel),                        //          .channel
		.src45_startofpacket (cmd_demux_src45_startofpacket),                  //          .startofpacket
		.src45_endofpacket   (cmd_demux_src45_endofpacket),                    //          .endofpacket
		.src46_ready         (cmd_demux_src46_ready),                          //     src46.ready
		.src46_valid         (cmd_demux_src46_valid),                          //          .valid
		.src46_data          (cmd_demux_src46_data),                           //          .data
		.src46_channel       (cmd_demux_src46_channel),                        //          .channel
		.src46_startofpacket (cmd_demux_src46_startofpacket),                  //          .startofpacket
		.src46_endofpacket   (cmd_demux_src46_endofpacket),                    //          .endofpacket
		.src47_ready         (cmd_demux_src47_ready),                          //     src47.ready
		.src47_valid         (cmd_demux_src47_valid),                          //          .valid
		.src47_data          (cmd_demux_src47_data),                           //          .data
		.src47_channel       (cmd_demux_src47_channel),                        //          .channel
		.src47_startofpacket (cmd_demux_src47_startofpacket),                  //          .startofpacket
		.src47_endofpacket   (cmd_demux_src47_endofpacket),                    //          .endofpacket
		.src48_ready         (cmd_demux_src48_ready),                          //     src48.ready
		.src48_valid         (cmd_demux_src48_valid),                          //          .valid
		.src48_data          (cmd_demux_src48_data),                           //          .data
		.src48_channel       (cmd_demux_src48_channel),                        //          .channel
		.src48_startofpacket (cmd_demux_src48_startofpacket),                  //          .startofpacket
		.src48_endofpacket   (cmd_demux_src48_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_100_clk_clk),                                               //        clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_gen2_0_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                      //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                      //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                       //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                    //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                              //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                      //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                      //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                       //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                    //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                              //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                      //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                      //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                       //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                    //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                              //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                                 //           .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                       //          .valid
		.src_data            (cmd_mux_001_src_data),                                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                       //          .valid
		.src_data            (cmd_mux_002_src_data),                                        //          .data
		.src_channel         (cmd_mux_002_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src2_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                       //          .valid
		.src_data            (cmd_mux_003_src_data),                                        //          .data
		.src_channel         (cmd_mux_003_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src3_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                       //          .valid
		.src_data            (cmd_mux_004_src_data),                                        //          .data
		.src_channel         (cmd_mux_004_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src4_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                       //          .valid
		.src_data            (cmd_mux_005_src_data),                                        //          .data
		.src_channel         (cmd_mux_005_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src5_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                       //          .valid
		.src_data            (cmd_mux_006_src_data),                                        //          .data
		.src_channel         (cmd_mux_006_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src6_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //          .valid
		.src_data            (cmd_mux_007_src_data),                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                        //          .channel
		.sink0_data          (cmd_demux_src7_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                       //          .valid
		.src_data            (cmd_mux_008_src_data),                                        //          .data
		.src_channel         (cmd_mux_008_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src8_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                       //          .valid
		.src_data            (cmd_mux_009_src_data),                                        //          .data
		.src_channel         (cmd_mux_009_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src9_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                       //          .valid
		.src_data            (cmd_mux_010_src_data),                                        //          .data
		.src_channel         (cmd_mux_010_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src10_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_011 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                       //          .valid
		.src_data            (cmd_mux_011_src_data),                                        //          .data
		.src_channel         (cmd_mux_011_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src11_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_012 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                       //          .valid
		.src_data            (cmd_mux_012_src_data),                                        //          .data
		.src_channel         (cmd_mux_012_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src12_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_013 (
		.clk                 (clk_100_clk_clk),                                             //       clk.clk
		.reset               (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                       //          .valid
		.src_data            (cmd_mux_013_src_data),                                        //          .data
		.src_channel         (cmd_mux_013_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src13_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_014 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //          .valid
		.src_data            (cmd_mux_014_src_data),                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                       //          .channel
		.sink0_data          (cmd_demux_src14_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_015 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                         //          .valid
		.src_data            (cmd_mux_015_src_data),                          //          .data
		.src_channel         (cmd_mux_015_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                       //          .channel
		.sink0_data          (cmd_demux_src15_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_016 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                         //          .valid
		.src_data            (cmd_mux_016_src_data),                          //          .data
		.src_channel         (cmd_mux_016_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                       //          .channel
		.sink0_data          (cmd_demux_src16_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_017 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                         //          .valid
		.src_data            (cmd_mux_017_src_data),                          //          .data
		.src_channel         (cmd_mux_017_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                       //          .channel
		.sink0_data          (cmd_demux_src17_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_018 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                         //          .valid
		.src_data            (cmd_mux_018_src_data),                          //          .data
		.src_channel         (cmd_mux_018_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                       //          .channel
		.sink0_data          (cmd_demux_src18_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_019 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                         //          .valid
		.src_data            (cmd_mux_019_src_data),                          //          .data
		.src_channel         (cmd_mux_019_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                       //          .channel
		.sink0_data          (cmd_demux_src19_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_020 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                         //          .valid
		.src_data            (cmd_mux_020_src_data),                          //          .data
		.src_channel         (cmd_mux_020_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                       //          .channel
		.sink0_data          (cmd_demux_src20_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_021 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                         //          .valid
		.src_data            (cmd_mux_021_src_data),                          //          .data
		.src_channel         (cmd_mux_021_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                       //          .channel
		.sink0_data          (cmd_demux_src21_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_022 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                         //          .valid
		.src_data            (cmd_mux_022_src_data),                          //          .data
		.src_channel         (cmd_mux_022_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src22_channel),                       //          .channel
		.sink0_data          (cmd_demux_src22_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_023 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                         //          .valid
		.src_data            (cmd_mux_023_src_data),                          //          .data
		.src_channel         (cmd_mux_023_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src23_channel),                       //          .channel
		.sink0_data          (cmd_demux_src23_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_024 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                         //          .valid
		.src_data            (cmd_mux_024_src_data),                          //          .data
		.src_channel         (cmd_mux_024_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src24_channel),                       //          .channel
		.sink0_data          (cmd_demux_src24_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_025 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                         //          .valid
		.src_data            (cmd_mux_025_src_data),                          //          .data
		.src_channel         (cmd_mux_025_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src25_channel),                       //          .channel
		.sink0_data          (cmd_demux_src25_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_026 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                         //          .valid
		.src_data            (cmd_mux_026_src_data),                          //          .data
		.src_channel         (cmd_mux_026_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src26_channel),                       //          .channel
		.sink0_data          (cmd_demux_src26_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_027 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                         //          .valid
		.src_data            (cmd_mux_027_src_data),                          //          .data
		.src_channel         (cmd_mux_027_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src27_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src27_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src27_channel),                       //          .channel
		.sink0_data          (cmd_demux_src27_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src27_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src27_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_028 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                         //          .valid
		.src_data            (cmd_mux_028_src_data),                          //          .data
		.src_channel         (cmd_mux_028_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src28_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src28_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src28_channel),                       //          .channel
		.sink0_data          (cmd_demux_src28_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src28_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src28_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_029 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                         //          .valid
		.src_data            (cmd_mux_029_src_data),                          //          .data
		.src_channel         (cmd_mux_029_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src29_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src29_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src29_channel),                       //          .channel
		.sink0_data          (cmd_demux_src29_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src29_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src29_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux_030 cmd_mux_030 (
		.clk                 (clk_100_clk_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                          //          .valid
		.src_data            (cmd_mux_030_src_data),                           //          .data
		.src_channel         (cmd_mux_030_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src30_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src30_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src30_channel),                        //          .channel
		.sink0_data          (cmd_demux_src30_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src30_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src30_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_031 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_031_src_valid),                         //          .valid
		.src_data            (cmd_mux_031_src_data),                          //          .data
		.src_channel         (cmd_mux_031_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src31_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src31_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src31_channel),                       //          .channel
		.sink0_data          (cmd_demux_src31_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src31_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src31_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_032 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_032_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_032_src_valid),                         //          .valid
		.src_data            (cmd_mux_032_src_data),                          //          .data
		.src_channel         (cmd_mux_032_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_032_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_032_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src32_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src32_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src32_channel),                       //          .channel
		.sink0_data          (cmd_demux_src32_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src32_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src32_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_033 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_033_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_033_src_valid),                         //          .valid
		.src_data            (cmd_mux_033_src_data),                          //          .data
		.src_channel         (cmd_mux_033_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_033_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_033_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src33_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src33_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src33_channel),                       //          .channel
		.sink0_data          (cmd_demux_src33_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src33_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src33_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_034 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_034_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_034_src_valid),                         //          .valid
		.src_data            (cmd_mux_034_src_data),                          //          .data
		.src_channel         (cmd_mux_034_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_034_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_034_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src34_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src34_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src34_channel),                       //          .channel
		.sink0_data          (cmd_demux_src34_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src34_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src34_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_035 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_035_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_035_src_valid),                         //          .valid
		.src_data            (cmd_mux_035_src_data),                          //          .data
		.src_channel         (cmd_mux_035_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_035_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_035_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src35_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src35_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src35_channel),                       //          .channel
		.sink0_data          (cmd_demux_src35_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src35_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src35_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_036 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_036_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_036_src_valid),                         //          .valid
		.src_data            (cmd_mux_036_src_data),                          //          .data
		.src_channel         (cmd_mux_036_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_036_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_036_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src36_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src36_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src36_channel),                       //          .channel
		.sink0_data          (cmd_demux_src36_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src36_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src36_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_037 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_037_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_037_src_valid),                         //          .valid
		.src_data            (cmd_mux_037_src_data),                          //          .data
		.src_channel         (cmd_mux_037_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_037_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_037_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src37_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src37_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src37_channel),                       //          .channel
		.sink0_data          (cmd_demux_src37_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src37_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src37_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_038 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_038_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_038_src_valid),                         //          .valid
		.src_data            (cmd_mux_038_src_data),                          //          .data
		.src_channel         (cmd_mux_038_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_038_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_038_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src38_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src38_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src38_channel),                       //          .channel
		.sink0_data          (cmd_demux_src38_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src38_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src38_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_039 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_039_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_039_src_valid),                         //          .valid
		.src_data            (cmd_mux_039_src_data),                          //          .data
		.src_channel         (cmd_mux_039_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_039_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_039_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src39_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src39_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src39_channel),                       //          .channel
		.sink0_data          (cmd_demux_src39_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src39_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src39_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_040 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_040_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_040_src_valid),                         //          .valid
		.src_data            (cmd_mux_040_src_data),                          //          .data
		.src_channel         (cmd_mux_040_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_040_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_040_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src40_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src40_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src40_channel),                       //          .channel
		.sink0_data          (cmd_demux_src40_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src40_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src40_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_041 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_041_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_041_src_valid),                         //          .valid
		.src_data            (cmd_mux_041_src_data),                          //          .data
		.src_channel         (cmd_mux_041_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_041_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_041_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src41_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src41_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src41_channel),                       //          .channel
		.sink0_data          (cmd_demux_src41_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src41_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src41_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_042 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_042_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_042_src_valid),                         //          .valid
		.src_data            (cmd_mux_042_src_data),                          //          .data
		.src_channel         (cmd_mux_042_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_042_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_042_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src42_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src42_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src42_channel),                       //          .channel
		.sink0_data          (cmd_demux_src42_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src42_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src42_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_043 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_043_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_043_src_valid),                         //          .valid
		.src_data            (cmd_mux_043_src_data),                          //          .data
		.src_channel         (cmd_mux_043_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_043_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_043_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src43_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src43_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src43_channel),                       //          .channel
		.sink0_data          (cmd_demux_src43_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src43_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src43_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_044 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_044_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_044_src_valid),                         //          .valid
		.src_data            (cmd_mux_044_src_data),                          //          .data
		.src_channel         (cmd_mux_044_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_044_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_044_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src44_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src44_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src44_channel),                       //          .channel
		.sink0_data          (cmd_demux_src44_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src44_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src44_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_045 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_045_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_045_src_valid),                         //          .valid
		.src_data            (cmd_mux_045_src_data),                          //          .data
		.src_channel         (cmd_mux_045_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_045_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_045_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src45_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src45_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src45_channel),                       //          .channel
		.sink0_data          (cmd_demux_src45_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src45_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src45_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux_030 cmd_mux_046 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_046_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_046_src_valid),                         //          .valid
		.src_data            (cmd_mux_046_src_data),                          //          .data
		.src_channel         (cmd_mux_046_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_046_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_046_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src46_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src46_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src46_channel),                       //          .channel
		.sink0_data          (cmd_demux_src46_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src46_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src46_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux_030 cmd_mux_047 (
		.clk                 (clk_100_clk_clk),                             //       clk.clk
		.reset               (ext_flash_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_047_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_047_src_valid),                       //          .valid
		.src_data            (cmd_mux_047_src_data),                        //          .data
		.src_channel         (cmd_mux_047_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_047_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_047_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src47_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src47_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src47_channel),                     //          .channel
		.sink0_data          (cmd_demux_src47_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src47_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src47_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_cmd_mux cmd_mux_048 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_048_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_048_src_valid),                         //          .valid
		.src_data            (cmd_mux_048_src_data),                          //          .data
		.src_channel         (cmd_mux_048_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_048_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_048_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src48_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src48_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src48_channel),                       //          .channel
		.sink0_data          (cmd_demux_src48_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src48_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src48_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                        //      sink.ready
		.sink_channel       (router_003_src_channel),                                      //          .channel
		.sink_data          (router_003_src_data),                                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                        //      sink.ready
		.sink_channel       (router_004_src_channel),                                      //          .channel
		.sink_data          (router_004_src_data),                                         //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_004_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                        //      sink.ready
		.sink_channel       (router_005_src_channel),                                      //          .channel
		.sink_data          (router_005_src_data),                                         //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_005_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                        //      sink.ready
		.sink_channel       (router_006_src_channel),                                      //          .channel
		.sink_data          (router_006_src_data),                                         //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_006_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                        //      sink.ready
		.sink_channel       (router_007_src_channel),                                      //          .channel
		.sink_data          (router_007_src_data),                                         //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_007_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                        //      sink.ready
		.sink_channel       (router_008_src_channel),                                      //          .channel
		.sink_data          (router_008_src_data),                                         //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_008_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                        //      sink.ready
		.sink_channel       (router_010_src_channel),                                      //          .channel
		.sink_data          (router_010_src_data),                                         //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_010_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                        //      sink.ready
		.sink_channel       (router_011_src_channel),                                      //          .channel
		.sink_data          (router_011_src_data),                                         //          .data
		.sink_startofpacket (router_011_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_011_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_010 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                        //      sink.ready
		.sink_channel       (router_012_src_channel),                                      //          .channel
		.sink_data          (router_012_src_data),                                         //          .data
		.sink_startofpacket (router_012_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_012_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_011 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                        //      sink.ready
		.sink_channel       (router_013_src_channel),                                      //          .channel
		.sink_data          (router_013_src_data),                                         //          .data
		.sink_startofpacket (router_013_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_013_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_012 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                        //      sink.ready
		.sink_channel       (router_014_src_channel),                                      //          .channel
		.sink_data          (router_014_src_data),                                         //          .data
		.sink_startofpacket (router_014_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_014_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_012_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_013 (
		.clk                (clk_100_clk_clk),                                             //       clk.clk
		.reset              (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                        //      sink.ready
		.sink_channel       (router_015_src_channel),                                      //          .channel
		.sink_data          (router_015_src_data),                                         //          .data
		.sink_startofpacket (router_015_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_015_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                               //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_014 (
		.clk                (clk_100_clk_clk),                                                     //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.sink_ready         (ddr2_address_span_extender_cntl_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ddr2_address_span_extender_cntl_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (ddr2_address_span_extender_cntl_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (ddr2_address_span_extender_cntl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ddr2_address_span_extender_cntl_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ddr2_address_span_extender_cntl_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_015 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                          //      sink.ready
		.sink_channel       (router_017_src_channel),                        //          .channel
		.sink_data          (router_017_src_data),                           //          .data
		.sink_startofpacket (router_017_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_017_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_015_src0_data),                       //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_016 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_016_src0_data),                       //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_017 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                          //      sink.ready
		.sink_channel       (router_019_src_channel),                        //          .channel
		.sink_data          (router_019_src_data),                           //          .data
		.sink_startofpacket (router_019_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_019_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_017_src0_data),                       //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_018 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                          //      sink.ready
		.sink_channel       (router_020_src_channel),                        //          .channel
		.sink_data          (router_020_src_data),                           //          .data
		.sink_startofpacket (router_020_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_020_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_018_src0_data),                       //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_019 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                          //      sink.ready
		.sink_channel       (router_021_src_channel),                        //          .channel
		.sink_data          (router_021_src_data),                           //          .data
		.sink_startofpacket (router_021_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_021_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_019_src0_data),                       //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_020 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                          //      sink.ready
		.sink_channel       (router_022_src_channel),                        //          .channel
		.sink_data          (router_022_src_data),                           //          .data
		.sink_startofpacket (router_022_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_022_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_020_src0_data),                       //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_021 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                          //      sink.ready
		.sink_channel       (router_023_src_channel),                        //          .channel
		.sink_data          (router_023_src_data),                           //          .data
		.sink_startofpacket (router_023_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_023_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_021_src0_data),                       //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_022 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                          //      sink.ready
		.sink_channel       (router_024_src_channel),                        //          .channel
		.sink_data          (router_024_src_data),                           //          .data
		.sink_startofpacket (router_024_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_024_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_022_src0_data),                       //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_023 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                          //      sink.ready
		.sink_channel       (router_025_src_channel),                        //          .channel
		.sink_data          (router_025_src_data),                           //          .data
		.sink_startofpacket (router_025_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_025_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_023_src0_data),                       //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_024 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                          //      sink.ready
		.sink_channel       (router_026_src_channel),                        //          .channel
		.sink_data          (router_026_src_data),                           //          .data
		.sink_startofpacket (router_026_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_026_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_024_src0_data),                       //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_025 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                          //      sink.ready
		.sink_channel       (router_027_src_channel),                        //          .channel
		.sink_data          (router_027_src_data),                           //          .data
		.sink_startofpacket (router_027_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_027_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_025_src0_data),                       //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_026 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                          //      sink.ready
		.sink_channel       (router_028_src_channel),                        //          .channel
		.sink_data          (router_028_src_data),                           //          .data
		.sink_startofpacket (router_028_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_028_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_026_src0_data),                       //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_027 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                          //      sink.ready
		.sink_channel       (router_029_src_channel),                        //          .channel
		.sink_data          (router_029_src_data),                           //          .data
		.sink_startofpacket (router_029_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_029_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_027_src0_data),                       //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_028 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                          //      sink.ready
		.sink_channel       (router_030_src_channel),                        //          .channel
		.sink_data          (router_030_src_data),                           //          .data
		.sink_startofpacket (router_030_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_030_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_028_src0_data),                       //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_029 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                          //      sink.ready
		.sink_channel       (router_031_src_channel),                        //          .channel
		.sink_data          (router_031_src_data),                           //          .data
		.sink_startofpacket (router_031_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_031_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_029_src0_data),                       //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux_030 rsp_demux_030 (
		.clk                (clk_100_clk_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                           //      sink.ready
		.sink_channel       (router_032_src_channel),                         //          .channel
		.sink_data          (router_032_src_data),                            //          .data
		.sink_startofpacket (router_032_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_032_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_030_src0_data),                        //          .data
		.src0_channel       (rsp_demux_030_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_030_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_030_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_030_src1_data),                        //          .data
		.src1_channel       (rsp_demux_030_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_030_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_030_src1_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_031 (
		.clk                (clk_100_clk_clk),                                                      //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.sink_ready         (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_031_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_031_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket)                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_032 (
		.clk                (clk_100_clk_clk),                                                       //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_032_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_032_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_032_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_032_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_032_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_032_src0_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_033 (
		.clk                (clk_100_clk_clk),                                                      //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.sink_ready         (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_033_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_033_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_033_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_033_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_033_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_033_src0_endofpacket)                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_034 (
		.clk                (clk_100_clk_clk),                                                       //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_034_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_034_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_034_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_034_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_034_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_034_src0_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_035 (
		.clk                (clk_100_clk_clk),                                                      //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.sink_ready         (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_035_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_035_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_035_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_035_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_035_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_035_src0_endofpacket)                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_036 (
		.clk                (clk_100_clk_clk),                                                       //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_036_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_036_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_036_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_036_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_036_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_036_src0_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_037 (
		.clk                (clk_100_clk_clk),                                                      //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.sink_ready         (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_037_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_037_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_037_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_037_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_037_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_037_src0_endofpacket)                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_038 (
		.clk                (clk_100_clk_clk),                                                       //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_038_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_038_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_038_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_038_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_038_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_038_src0_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_039 (
		.clk                (clk_100_clk_clk),                                                      //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.sink_ready         (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_039_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_039_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_039_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_039_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_039_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_039_src0_endofpacket)                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_040 (
		.clk                (clk_100_clk_clk),                                                       //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_040_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_040_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_040_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_040_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_040_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_040_src0_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_041 (
		.clk                (clk_100_clk_clk),                                                      //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.sink_ready         (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_041_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_041_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_041_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_041_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_041_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_041_src0_endofpacket)                                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_042 (
		.clk                (clk_100_clk_clk),                                                       //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_042_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_042_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_042_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_042_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_042_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_042_src0_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_043 (
		.clk                (clk_100_clk_clk),                                                       //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_043_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_043_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_043_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_043_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_043_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_043_src0_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_044 (
		.clk                (clk_100_clk_clk),                                                       //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_044_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_044_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_044_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_044_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_044_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_044_src0_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_045 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_047_src_ready),                          //      sink.ready
		.sink_channel       (router_047_src_channel),                        //          .channel
		.sink_data          (router_047_src_data),                           //          .data
		.sink_startofpacket (router_047_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_047_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_047_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_045_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_045_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_045_src0_data),                       //          .data
		.src0_channel       (rsp_demux_045_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_045_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_045_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux_030 rsp_demux_046 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_048_src_ready),                          //      sink.ready
		.sink_channel       (router_048_src_channel),                        //          .channel
		.sink_data          (router_048_src_data),                           //          .data
		.sink_startofpacket (router_048_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_048_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_048_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_046_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_046_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_046_src0_data),                       //          .data
		.src0_channel       (rsp_demux_046_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_046_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_046_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_046_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_046_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_046_src1_data),                       //          .data
		.src1_channel       (rsp_demux_046_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_046_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_046_src1_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux_030 rsp_demux_047 (
		.clk                (clk_100_clk_clk),                                   //       clk.clk
		.reset              (ext_flash_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.sink_ready         (ext_flash_uas_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ext_flash_uas_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (ext_flash_uas_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (ext_flash_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ext_flash_uas_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ext_flash_uas_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_047_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_047_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_047_src0_data),                           //          .data
		.src0_channel       (rsp_demux_047_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_047_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_047_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_047_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_047_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_047_src1_data),                           //          .data
		.src1_channel       (rsp_demux_047_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_047_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_047_src1_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_demux rsp_demux_048 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_050_src_ready),                          //      sink.ready
		.sink_channel       (router_050_src_channel),                        //          .channel
		.sink_data          (router_050_src_data),                           //          .data
		.sink_startofpacket (router_050_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_050_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_050_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_048_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_048_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_048_src0_data),                       //          .data
		.src0_channel       (rsp_demux_048_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_048_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_048_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (clk_100_clk_clk),                                //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                              //          .valid
		.src_data             (rsp_mux_src_data),                               //          .data
		.src_channel          (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                         //          .channel
		.sink0_data           (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                       //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                     //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                       //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                     //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                       //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                     //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                       //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                     //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                       //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                     //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                        //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                        //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                       //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                        //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                       //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                        //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                 //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                       //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                        //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                 //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                       //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                       //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                     //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                        //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                 //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                       //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                       //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                     //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                        //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),               //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                 //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                       //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                       //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                     //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                        //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),               //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                 //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                       //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                       //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                     //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                        //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),               //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                 //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                       //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                       //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                     //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                        //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),               //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                 //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                       //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                       //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                     //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                        //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),               //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                 //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                       //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                       //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                     //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                        //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),               //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                 //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                       //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                       //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                     //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                        //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),               //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                 //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                       //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                       //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                     //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                        //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),               //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                 //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                       //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                       //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                     //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                        //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),               //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),                 //          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                       //    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                       //          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                     //          .channel
		.sink25_data          (rsp_demux_025_src0_data),                        //          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),               //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),                 //          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                       //    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                       //          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                     //          .channel
		.sink26_data          (rsp_demux_026_src0_data),                        //          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),               //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket),                 //          .endofpacket
		.sink27_ready         (rsp_demux_027_src0_ready),                       //    sink27.ready
		.sink27_valid         (rsp_demux_027_src0_valid),                       //          .valid
		.sink27_channel       (rsp_demux_027_src0_channel),                     //          .channel
		.sink27_data          (rsp_demux_027_src0_data),                        //          .data
		.sink27_startofpacket (rsp_demux_027_src0_startofpacket),               //          .startofpacket
		.sink27_endofpacket   (rsp_demux_027_src0_endofpacket),                 //          .endofpacket
		.sink28_ready         (rsp_demux_028_src0_ready),                       //    sink28.ready
		.sink28_valid         (rsp_demux_028_src0_valid),                       //          .valid
		.sink28_channel       (rsp_demux_028_src0_channel),                     //          .channel
		.sink28_data          (rsp_demux_028_src0_data),                        //          .data
		.sink28_startofpacket (rsp_demux_028_src0_startofpacket),               //          .startofpacket
		.sink28_endofpacket   (rsp_demux_028_src0_endofpacket),                 //          .endofpacket
		.sink29_ready         (rsp_demux_029_src0_ready),                       //    sink29.ready
		.sink29_valid         (rsp_demux_029_src0_valid),                       //          .valid
		.sink29_channel       (rsp_demux_029_src0_channel),                     //          .channel
		.sink29_data          (rsp_demux_029_src0_data),                        //          .data
		.sink29_startofpacket (rsp_demux_029_src0_startofpacket),               //          .startofpacket
		.sink29_endofpacket   (rsp_demux_029_src0_endofpacket),                 //          .endofpacket
		.sink30_ready         (rsp_demux_030_src0_ready),                       //    sink30.ready
		.sink30_valid         (rsp_demux_030_src0_valid),                       //          .valid
		.sink30_channel       (rsp_demux_030_src0_channel),                     //          .channel
		.sink30_data          (rsp_demux_030_src0_data),                        //          .data
		.sink30_startofpacket (rsp_demux_030_src0_startofpacket),               //          .startofpacket
		.sink30_endofpacket   (rsp_demux_030_src0_endofpacket),                 //          .endofpacket
		.sink31_ready         (rsp_demux_031_src0_ready),                       //    sink31.ready
		.sink31_valid         (rsp_demux_031_src0_valid),                       //          .valid
		.sink31_channel       (rsp_demux_031_src0_channel),                     //          .channel
		.sink31_data          (rsp_demux_031_src0_data),                        //          .data
		.sink31_startofpacket (rsp_demux_031_src0_startofpacket),               //          .startofpacket
		.sink31_endofpacket   (rsp_demux_031_src0_endofpacket),                 //          .endofpacket
		.sink32_ready         (rsp_demux_032_src0_ready),                       //    sink32.ready
		.sink32_valid         (rsp_demux_032_src0_valid),                       //          .valid
		.sink32_channel       (rsp_demux_032_src0_channel),                     //          .channel
		.sink32_data          (rsp_demux_032_src0_data),                        //          .data
		.sink32_startofpacket (rsp_demux_032_src0_startofpacket),               //          .startofpacket
		.sink32_endofpacket   (rsp_demux_032_src0_endofpacket),                 //          .endofpacket
		.sink33_ready         (rsp_demux_033_src0_ready),                       //    sink33.ready
		.sink33_valid         (rsp_demux_033_src0_valid),                       //          .valid
		.sink33_channel       (rsp_demux_033_src0_channel),                     //          .channel
		.sink33_data          (rsp_demux_033_src0_data),                        //          .data
		.sink33_startofpacket (rsp_demux_033_src0_startofpacket),               //          .startofpacket
		.sink33_endofpacket   (rsp_demux_033_src0_endofpacket),                 //          .endofpacket
		.sink34_ready         (rsp_demux_034_src0_ready),                       //    sink34.ready
		.sink34_valid         (rsp_demux_034_src0_valid),                       //          .valid
		.sink34_channel       (rsp_demux_034_src0_channel),                     //          .channel
		.sink34_data          (rsp_demux_034_src0_data),                        //          .data
		.sink34_startofpacket (rsp_demux_034_src0_startofpacket),               //          .startofpacket
		.sink34_endofpacket   (rsp_demux_034_src0_endofpacket),                 //          .endofpacket
		.sink35_ready         (rsp_demux_035_src0_ready),                       //    sink35.ready
		.sink35_valid         (rsp_demux_035_src0_valid),                       //          .valid
		.sink35_channel       (rsp_demux_035_src0_channel),                     //          .channel
		.sink35_data          (rsp_demux_035_src0_data),                        //          .data
		.sink35_startofpacket (rsp_demux_035_src0_startofpacket),               //          .startofpacket
		.sink35_endofpacket   (rsp_demux_035_src0_endofpacket),                 //          .endofpacket
		.sink36_ready         (rsp_demux_036_src0_ready),                       //    sink36.ready
		.sink36_valid         (rsp_demux_036_src0_valid),                       //          .valid
		.sink36_channel       (rsp_demux_036_src0_channel),                     //          .channel
		.sink36_data          (rsp_demux_036_src0_data),                        //          .data
		.sink36_startofpacket (rsp_demux_036_src0_startofpacket),               //          .startofpacket
		.sink36_endofpacket   (rsp_demux_036_src0_endofpacket),                 //          .endofpacket
		.sink37_ready         (rsp_demux_037_src0_ready),                       //    sink37.ready
		.sink37_valid         (rsp_demux_037_src0_valid),                       //          .valid
		.sink37_channel       (rsp_demux_037_src0_channel),                     //          .channel
		.sink37_data          (rsp_demux_037_src0_data),                        //          .data
		.sink37_startofpacket (rsp_demux_037_src0_startofpacket),               //          .startofpacket
		.sink37_endofpacket   (rsp_demux_037_src0_endofpacket),                 //          .endofpacket
		.sink38_ready         (rsp_demux_038_src0_ready),                       //    sink38.ready
		.sink38_valid         (rsp_demux_038_src0_valid),                       //          .valid
		.sink38_channel       (rsp_demux_038_src0_channel),                     //          .channel
		.sink38_data          (rsp_demux_038_src0_data),                        //          .data
		.sink38_startofpacket (rsp_demux_038_src0_startofpacket),               //          .startofpacket
		.sink38_endofpacket   (rsp_demux_038_src0_endofpacket),                 //          .endofpacket
		.sink39_ready         (rsp_demux_039_src0_ready),                       //    sink39.ready
		.sink39_valid         (rsp_demux_039_src0_valid),                       //          .valid
		.sink39_channel       (rsp_demux_039_src0_channel),                     //          .channel
		.sink39_data          (rsp_demux_039_src0_data),                        //          .data
		.sink39_startofpacket (rsp_demux_039_src0_startofpacket),               //          .startofpacket
		.sink39_endofpacket   (rsp_demux_039_src0_endofpacket),                 //          .endofpacket
		.sink40_ready         (rsp_demux_040_src0_ready),                       //    sink40.ready
		.sink40_valid         (rsp_demux_040_src0_valid),                       //          .valid
		.sink40_channel       (rsp_demux_040_src0_channel),                     //          .channel
		.sink40_data          (rsp_demux_040_src0_data),                        //          .data
		.sink40_startofpacket (rsp_demux_040_src0_startofpacket),               //          .startofpacket
		.sink40_endofpacket   (rsp_demux_040_src0_endofpacket),                 //          .endofpacket
		.sink41_ready         (rsp_demux_041_src0_ready),                       //    sink41.ready
		.sink41_valid         (rsp_demux_041_src0_valid),                       //          .valid
		.sink41_channel       (rsp_demux_041_src0_channel),                     //          .channel
		.sink41_data          (rsp_demux_041_src0_data),                        //          .data
		.sink41_startofpacket (rsp_demux_041_src0_startofpacket),               //          .startofpacket
		.sink41_endofpacket   (rsp_demux_041_src0_endofpacket),                 //          .endofpacket
		.sink42_ready         (rsp_demux_042_src0_ready),                       //    sink42.ready
		.sink42_valid         (rsp_demux_042_src0_valid),                       //          .valid
		.sink42_channel       (rsp_demux_042_src0_channel),                     //          .channel
		.sink42_data          (rsp_demux_042_src0_data),                        //          .data
		.sink42_startofpacket (rsp_demux_042_src0_startofpacket),               //          .startofpacket
		.sink42_endofpacket   (rsp_demux_042_src0_endofpacket),                 //          .endofpacket
		.sink43_ready         (rsp_demux_043_src0_ready),                       //    sink43.ready
		.sink43_valid         (rsp_demux_043_src0_valid),                       //          .valid
		.sink43_channel       (rsp_demux_043_src0_channel),                     //          .channel
		.sink43_data          (rsp_demux_043_src0_data),                        //          .data
		.sink43_startofpacket (rsp_demux_043_src0_startofpacket),               //          .startofpacket
		.sink43_endofpacket   (rsp_demux_043_src0_endofpacket),                 //          .endofpacket
		.sink44_ready         (rsp_demux_044_src0_ready),                       //    sink44.ready
		.sink44_valid         (rsp_demux_044_src0_valid),                       //          .valid
		.sink44_channel       (rsp_demux_044_src0_channel),                     //          .channel
		.sink44_data          (rsp_demux_044_src0_data),                        //          .data
		.sink44_startofpacket (rsp_demux_044_src0_startofpacket),               //          .startofpacket
		.sink44_endofpacket   (rsp_demux_044_src0_endofpacket),                 //          .endofpacket
		.sink45_ready         (rsp_demux_045_src0_ready),                       //    sink45.ready
		.sink45_valid         (rsp_demux_045_src0_valid),                       //          .valid
		.sink45_channel       (rsp_demux_045_src0_channel),                     //          .channel
		.sink45_data          (rsp_demux_045_src0_data),                        //          .data
		.sink45_startofpacket (rsp_demux_045_src0_startofpacket),               //          .startofpacket
		.sink45_endofpacket   (rsp_demux_045_src0_endofpacket),                 //          .endofpacket
		.sink46_ready         (rsp_demux_046_src0_ready),                       //    sink46.ready
		.sink46_valid         (rsp_demux_046_src0_valid),                       //          .valid
		.sink46_channel       (rsp_demux_046_src0_channel),                     //          .channel
		.sink46_data          (rsp_demux_046_src0_data),                        //          .data
		.sink46_startofpacket (rsp_demux_046_src0_startofpacket),               //          .startofpacket
		.sink46_endofpacket   (rsp_demux_046_src0_endofpacket),                 //          .endofpacket
		.sink47_ready         (rsp_demux_047_src0_ready),                       //    sink47.ready
		.sink47_valid         (rsp_demux_047_src0_valid),                       //          .valid
		.sink47_channel       (rsp_demux_047_src0_channel),                     //          .channel
		.sink47_data          (rsp_demux_047_src0_data),                        //          .data
		.sink47_startofpacket (rsp_demux_047_src0_startofpacket),               //          .startofpacket
		.sink47_endofpacket   (rsp_demux_047_src0_endofpacket),                 //          .endofpacket
		.sink48_ready         (rsp_demux_048_src0_ready),                       //    sink48.ready
		.sink48_valid         (rsp_demux_048_src0_valid),                       //          .valid
		.sink48_channel       (rsp_demux_048_src0_channel),                     //          .channel
		.sink48_data          (rsp_demux_048_src0_data),                        //          .data
		.sink48_startofpacket (rsp_demux_048_src0_startofpacket),               //          .startofpacket
		.sink48_endofpacket   (rsp_demux_048_src0_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_1_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_100_clk_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_030_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_030_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_030_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_030_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_030_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_030_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_046_src1_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_046_src1_valid),                       //          .valid
		.sink1_channel       (rsp_demux_046_src1_channel),                     //          .channel
		.sink1_data          (rsp_demux_046_src1_data),                        //          .data
		.sink1_startofpacket (rsp_demux_046_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_046_src1_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_047_src1_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_047_src1_valid),                       //          .valid
		.sink2_channel       (rsp_demux_047_src1_channel),                     //          .channel
		.sink2_data          (rsp_demux_047_src1_data),                        //          .data
		.sink2_startofpacket (rsp_demux_047_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_047_src1_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (156),
		.OUT_PKT_RESPONSE_STATUS_L     (155),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (157),
		.OUT_PKT_ORI_BURST_SIZE_H      (159),
		.OUT_ST_DATA_W                 (160),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ddr2_address_span_extender_cntl_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                     //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_mux_014_src_valid),                                               //      sink.valid
		.in_channel           (cmd_mux_014_src_channel),                                             //          .channel
		.in_startofpacket     (cmd_mux_014_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_mux_014_src_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_mux_014_src_ready),                                               //          .ready
		.in_data              (cmd_mux_014_src_data),                                                //          .data
		.out_endofpacket      (ddr2_address_span_extender_cntl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ddr2_address_span_extender_cntl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ddr2_address_span_extender_cntl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ddr2_address_span_extender_cntl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ddr2_address_span_extender_cntl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ddr2_address_span_extender_cntl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_1_left_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_mux_031_src_valid),                                                //      sink.valid
		.in_channel           (cmd_mux_031_src_channel),                                              //          .channel
		.in_startofpacket     (cmd_mux_031_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_mux_031_src_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_mux_031_src_ready),                                                //          .ready
		.in_data              (cmd_mux_031_src_data),                                                 //          .data
		.out_endofpacket      (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_1_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_1_right_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_mux_032_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_032_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_032_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_032_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_032_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_032_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_1_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_2_left_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_mux_033_src_valid),                                                //      sink.valid
		.in_channel           (cmd_mux_033_src_channel),                                              //          .channel
		.in_startofpacket     (cmd_mux_033_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_mux_033_src_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_mux_033_src_ready),                                                //          .ready
		.in_data              (cmd_mux_033_src_data),                                                 //          .data
		.out_endofpacket      (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_2_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_2_right_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_mux_034_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_034_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_034_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_034_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_034_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_034_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_2_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_3_left_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_mux_035_src_valid),                                                //      sink.valid
		.in_channel           (cmd_mux_035_src_channel),                                              //          .channel
		.in_startofpacket     (cmd_mux_035_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_mux_035_src_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_mux_035_src_ready),                                                //          .ready
		.in_data              (cmd_mux_035_src_data),                                                 //          .data
		.out_endofpacket      (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_3_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_3_right_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_mux_036_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_036_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_036_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_036_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_036_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_036_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_3_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_4_left_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_mux_037_src_valid),                                                //      sink.valid
		.in_channel           (cmd_mux_037_src_channel),                                              //          .channel
		.in_startofpacket     (cmd_mux_037_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_mux_037_src_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_mux_037_src_ready),                                                //          .ready
		.in_data              (cmd_mux_037_src_data),                                                 //          .data
		.out_endofpacket      (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_4_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_4_right_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_mux_038_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_038_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_038_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_038_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_038_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_038_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_4_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_5_left_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_mux_039_src_valid),                                                //      sink.valid
		.in_channel           (cmd_mux_039_src_channel),                                              //          .channel
		.in_startofpacket     (cmd_mux_039_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_mux_039_src_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_mux_039_src_ready),                                                //          .ready
		.in_data              (cmd_mux_039_src_data),                                                 //          .data
		.out_endofpacket      (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_5_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_5_right_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_mux_040_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_040_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_040_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_040_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_040_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_040_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_5_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_6_left_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_mux_041_src_valid),                                                //      sink.valid
		.in_channel           (cmd_mux_041_src_channel),                                              //          .channel
		.in_startofpacket     (cmd_mux_041_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_mux_041_src_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_mux_041_src_ready),                                                //          .ready
		.in_data              (cmd_mux_041_src_data),                                                 //          .data
		.out_endofpacket      (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_6_left_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_6_right_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_mux_042_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_042_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_042_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_042_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_042_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_042_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_6_right_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_mux_043_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_043_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_043_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_043_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_043_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_043_src_data),                                                  //          .data
		.out_endofpacket      (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_ftdi_rx_usb3_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (372),
		.OUT_PKT_RESPONSE_STATUS_L     (371),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (373),
		.OUT_PKT_ORI_BURST_SIZE_H      (375),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_mux_044_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_044_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_044_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_044_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_044_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_044_src_data),                                                  //          .data
		.out_endofpacket      (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_ftdi_tx_usb3_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (156),
		.IN_PKT_RESPONSE_STATUS_L      (155),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (157),
		.IN_PKT_ORI_BURST_SIZE_H       (159),
		.IN_ST_DATA_W                  (160),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ddr2_address_span_extender_cntl_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                     //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (router_016_src_valid),                                                //      sink.valid
		.in_channel           (router_016_src_channel),                                              //          .channel
		.in_startofpacket     (router_016_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (router_016_src_endofpacket),                                          //          .endofpacket
		.in_ready             (router_016_src_ready),                                                //          .ready
		.in_data              (router_016_src_data),                                                 //          .data
		.out_endofpacket      (ddr2_address_span_extender_cntl_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ddr2_address_span_extender_cntl_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ddr2_address_span_extender_cntl_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ddr2_address_span_extender_cntl_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ddr2_address_span_extender_cntl_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ddr2_address_span_extender_cntl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_1_left_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (router_033_src_valid),                                                 //      sink.valid
		.in_channel           (router_033_src_channel),                                               //          .channel
		.in_startofpacket     (router_033_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (router_033_src_endofpacket),                                           //          .endofpacket
		.in_ready             (router_033_src_ready),                                                 //          .ready
		.in_data              (router_033_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_1_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_1_right_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_034_src_valid),                                                  //      sink.valid
		.in_channel           (router_034_src_channel),                                                //          .channel
		.in_startofpacket     (router_034_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_034_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_034_src_ready),                                                  //          .ready
		.in_data              (router_034_src_data),                                                   //          .data
		.out_endofpacket      (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_1_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_2_left_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (router_035_src_valid),                                                 //      sink.valid
		.in_channel           (router_035_src_channel),                                               //          .channel
		.in_startofpacket     (router_035_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (router_035_src_endofpacket),                                           //          .endofpacket
		.in_ready             (router_035_src_ready),                                                 //          .ready
		.in_data              (router_035_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_2_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_2_right_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_036_src_valid),                                                  //      sink.valid
		.in_channel           (router_036_src_channel),                                                //          .channel
		.in_startofpacket     (router_036_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_036_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_036_src_ready),                                                  //          .ready
		.in_data              (router_036_src_data),                                                   //          .data
		.out_endofpacket      (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_2_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_3_left_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (router_037_src_valid),                                                 //      sink.valid
		.in_channel           (router_037_src_channel),                                               //          .channel
		.in_startofpacket     (router_037_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (router_037_src_endofpacket),                                           //          .endofpacket
		.in_ready             (router_037_src_ready),                                                 //          .ready
		.in_data              (router_037_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_3_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_3_right_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_038_src_valid),                                                  //      sink.valid
		.in_channel           (router_038_src_channel),                                                //          .channel
		.in_startofpacket     (router_038_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_038_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_038_src_ready),                                                  //          .ready
		.in_data              (router_038_src_data),                                                   //          .data
		.out_endofpacket      (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_3_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_4_left_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (router_039_src_valid),                                                 //      sink.valid
		.in_channel           (router_039_src_channel),                                               //          .channel
		.in_startofpacket     (router_039_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (router_039_src_endofpacket),                                           //          .endofpacket
		.in_ready             (router_039_src_ready),                                                 //          .ready
		.in_data              (router_039_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_4_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_4_right_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_040_src_valid),                                                  //      sink.valid
		.in_channel           (router_040_src_channel),                                                //          .channel
		.in_startofpacket     (router_040_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_040_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_040_src_ready),                                                  //          .ready
		.in_data              (router_040_src_data),                                                   //          .data
		.out_endofpacket      (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_4_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_5_left_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (router_041_src_valid),                                                 //      sink.valid
		.in_channel           (router_041_src_channel),                                               //          .channel
		.in_startofpacket     (router_041_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (router_041_src_endofpacket),                                           //          .endofpacket
		.in_ready             (router_041_src_ready),                                                 //          .ready
		.in_data              (router_041_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_5_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_5_right_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_042_src_valid),                                                  //      sink.valid
		.in_channel           (router_042_src_channel),                                                //          .channel
		.in_startofpacket     (router_042_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_042_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_042_src_ready),                                                  //          .ready
		.in_data              (router_042_src_data),                                                   //          .data
		.out_endofpacket      (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_5_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_6_left_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                      //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (router_043_src_valid),                                                 //      sink.valid
		.in_channel           (router_043_src_channel),                                               //          .channel
		.in_startofpacket     (router_043_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (router_043_src_endofpacket),                                           //          .endofpacket
		.in_ready             (router_043_src_ready),                                                 //          .ready
		.in_data              (router_043_src_data),                                                  //          .data
		.out_endofpacket      (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_6_left_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_comm_6_right_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_044_src_valid),                                                  //      sink.valid
		.in_channel           (router_044_src_channel),                                                //          .channel
		.in_startofpacket     (router_044_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_044_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_044_src_ready),                                                  //          .ready
		.in_data              (router_044_src_data),                                                   //          .data
		.out_endofpacket      (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_comm_6_right_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_045_src_valid),                                                  //      sink.valid
		.in_channel           (router_045_src_channel),                                                //          .channel
		.in_startofpacket     (router_045_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_045_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_045_src_ready),                                                  //          .ready
		.in_data              (router_045_src_data),                                                   //          .data
		.out_endofpacket      (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_ftdi_rx_usb3_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (372),
		.IN_PKT_RESPONSE_STATUS_L      (371),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (373),
		.IN_PKT_ORI_BURST_SIZE_H       (375),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                       //       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_046_src_valid),                                                  //      sink.valid
		.in_channel           (router_046_src_channel),                                                //          .channel
		.in_startofpacket     (router_046_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_046_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_046_src_ready),                                                  //          .ready
		.in_data              (router_046_src_data),                                                   //          .data
		.out_endofpacket      (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_ftdi_tx_usb3_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ext_flash_uas_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                   //       clk.clk
		.reset                (ext_flash_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (router_049_src_valid),                              //      sink.valid
		.in_channel           (router_049_src_channel),                            //          .channel
		.in_startofpacket     (router_049_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (router_049_src_endofpacket),                        //          .endofpacket
		.in_ready             (router_049_src_ready),                              //          .ready
		.in_data              (router_049_src_data),                               //          .data
		.out_endofpacket      (ext_flash_uas_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ext_flash_uas_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ext_flash_uas_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ext_flash_uas_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ext_flash_uas_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ext_flash_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (49),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ext_flash_uas_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                   //       clk.clk
		.reset                (ext_flash_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (cmd_mux_047_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_047_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_047_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_047_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_047_src_ready),                             //          .ready
		.in_data              (cmd_mux_047_src_data),                              //          .data
		.out_endofpacket      (ext_flash_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ext_flash_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ext_flash_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ext_flash_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ext_flash_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ext_flash_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_100_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (rmap_mem_nfee_comm_1_avalon_rmap_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                    //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (rmap_mem_nfee_comm_2_avalon_rmap_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                    //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (rmap_mem_nfee_comm_3_avalon_rmap_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                    //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (rmap_mem_nfee_comm_4_avalon_rmap_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                    //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (rmap_mem_nfee_comm_5_avalon_rmap_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                                    //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (rmap_mem_nfee_comm_6_avalon_rmap_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                                    //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_100_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (ftdi_usb3_0_avalon_slave_config_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (ftdi_usb3_0_avalon_slave_config_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (ftdi_usb3_0_avalon_slave_config_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                           //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_1_reset_sink_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (comm_pedreiro_v1_01_1_avalon_slave_windowing_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                                        //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_2_reset_sink_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (comm_pedreiro_v1_01_2_avalon_slave_windowing_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                                        //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_3_reset_sink_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (comm_pedreiro_v1_01_3_avalon_slave_windowing_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                                        //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_4_reset_sink_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (comm_pedreiro_v1_01_4_avalon_slave_windowing_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                                        //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_5_reset_sink_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (comm_pedreiro_v1_01_5_avalon_slave_windowing_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                                        //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (rmap_mem_nfee_comm_6_reset_sink_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (comm_pedreiro_v1_01_6_avalon_slave_windowing_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                                        //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter_014 #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_100_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (ddr2_address_span_extender_cntl_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (ddr2_address_span_extender_cntl_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (ddr2_address_span_extender_cntl_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                           //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_100_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                    //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_100_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (dma_comm_1_left_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_1_left_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_1_left_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)               //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dma_comm_1_right_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_1_right_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_1_right_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_100_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (dma_comm_2_left_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_2_left_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_2_left_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)               //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dma_comm_2_right_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_2_right_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_2_right_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_100_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (dma_comm_3_left_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_3_left_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_3_left_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)               //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dma_comm_3_right_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_3_right_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_3_right_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_100_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (dma_comm_4_left_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_4_left_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_4_left_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)               //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dma_comm_4_right_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_4_right_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_4_right_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_100_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (dma_comm_5_left_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_5_left_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_5_left_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)               //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dma_comm_5_right_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_5_right_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_5_right_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (clk_100_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (dma_comm_6_left_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_6_left_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_6_left_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)               //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dma_comm_6_right_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_comm_6_right_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_comm_6_right_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_028 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dma_ftdi_rx_usb3_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_ftdi_rx_usb3_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_ftdi_rx_usb3_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_028_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_028_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_028_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_028_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_029 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dma_ftdi_tx_usb3_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_ftdi_tx_usb3_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_ftdi_tx_usb3_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_029_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_029_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_029_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_029_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_030 (
		.in_clk_0_clk   (clk_100_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_030_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_030_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_030_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_030_out_0_error)                        //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_031 (
		.in_clk_0_clk   (clk_100_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_1_left_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_031_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_031_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_031_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_031_out_0_error)                            //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_032 (
		.in_clk_0_clk   (clk_100_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_1_right_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_032_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_032_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_032_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_032_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_033 (
		.in_clk_0_clk   (clk_100_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_2_left_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_033_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_033_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_033_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_033_out_0_error)                            //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_034 (
		.in_clk_0_clk   (clk_100_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_2_right_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_034_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_034_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_034_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_034_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_035 (
		.in_clk_0_clk   (clk_100_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_3_left_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_035_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_035_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_035_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_035_out_0_error)                            //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_036 (
		.in_clk_0_clk   (clk_100_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_3_right_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_036_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_036_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_036_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_036_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_037 (
		.in_clk_0_clk   (clk_100_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_4_left_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_037_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_037_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_037_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_037_out_0_error)                            //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_038 (
		.in_clk_0_clk   (clk_100_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_4_right_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_038_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_038_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_038_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_038_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_039 (
		.in_clk_0_clk   (clk_100_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_5_left_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_039_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_039_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_039_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_039_out_0_error)                            //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_040 (
		.in_clk_0_clk   (clk_100_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_5_right_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_040_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_040_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_040_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_040_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_041 (
		.in_clk_0_clk   (clk_100_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_6_left_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_041_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_041_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_041_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_041_out_0_error)                            //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_042 (
		.in_clk_0_clk   (clk_100_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_comm_6_right_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_042_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_042_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_042_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_042_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_043 (
		.in_clk_0_clk   (clk_100_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_ftdi_rx_usb3_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_043_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_043_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_043_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_043_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_044 (
		.in_clk_0_clk   (clk_100_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_ftdi_tx_usb3_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_044_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_044_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_044_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_044_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_045 (
		.in_clk_0_clk   (clk_100_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (clock_bridge_afi_50_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (clock_bridge_afi_50_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (clock_bridge_afi_50_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_045_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_045_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_045_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_045_out_0_error)                  //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_046 (
		.in_clk_0_clk   (clk_100_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (onchip_memory_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (onchip_memory_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_046_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_046_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_046_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_046_out_0_error)              //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter_047 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_047 (
		.in_clk_0_clk   (clk_100_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (ext_flash_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ext_flash_uas_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (ext_flash_uas_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (ext_flash_uas_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_047_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_047_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_047_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_047_out_0_error)            //         .error
	);

	MebX_Qsys_Project_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_048 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                      // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // in_rst_0.reset
		.in_0_data      (ddr2_address_span_extender_windowed_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (ddr2_address_span_extender_windowed_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (ddr2_address_span_extender_windowed_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_048_out_0_data),                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_048_out_0_valid),                                    //         .valid
		.out_0_ready    (avalon_st_adapter_048_out_0_ready),                                    //         .ready
		.out_0_error    (avalon_st_adapter_048_out_0_error)                                     //         .error
	);

endmodule
